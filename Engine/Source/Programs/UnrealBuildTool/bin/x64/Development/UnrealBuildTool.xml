<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UnrealBuildTool</name>
    </assembly>
    <members>
        <member name="T:UnrealBuildTool.MacExports">
            <summary>
            Public Mac functions exposed to UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacExports.StripSymbols(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference)">
            <summary>
            Strips symbols from a file
            </summary>
            <param name="SourceFile">The input file</param>
            <param name="TargetFile">The output file</param>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainSettings.MacOSSDKVersion">
            <summary>
            Which version of the Mac OS SDK to target at build time
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainSettings.MacOSVersion">
            <summary>
            Which version of the Mac OS X to allow at run time
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainSettings.MinMacOSVersion">
            <summary>
            Minimum version of Mac OS X to actually run on, running on earlier versions will display the system minimum version error dialog and exit.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainSettings.ToolchainDir">
            <summary>
            Directory for the developer binaries
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainSettings.BaseSDKDir">
            <summary>
            Location of the SDKs
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacToolChainSettings.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="bVerbose">Whether to output verbose logging</param>
        </member>
        <member name="T:UnrealBuildTool.MacToolChainOptions">
            <summary>
            Option flags for the Mac toolchain
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainOptions.None">
            <summary>
            No custom options
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainOptions.EnableAddressSanitizer">
            <summary>
            Enable address sanitzier
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainOptions.EnableThreadSanitizer">
            <summary>
            Enable thread sanitizer
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChainOptions.EnableUndefinedBehaviorSanitizer">
            <summary>
            Enable undefined behavior sanitizer
            </summary>
        </member>
        <member name="T:UnrealBuildTool.MacToolChain">
            <summary>
            Mac toolchain wrapper
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChain.Options">
            <summary>
            Whether to compile with ASan enabled
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChain.MacCompiler">
            <summary>
            Which compiler frontend to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChain.MacLinker">
            <summary>
            Which linker frontend to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChain.MacArchiver">
            <summary>
            Which archiver to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacToolChain.bHasWipedCopyDylibScript">
            <summary>
            Track which scripts need to be deleted before appending to
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacToolChain.GenerateDebugInfo(UnrealBuildTool.FileItem,UnrealBuildTool.LinkEnvironment,UnrealBuildTool.ActionGraph)">
            <summary>
            Generates debug info for a given executable
            </summary>
            <param name="MachOBinary">FileItem describing the executable or dylib to generate debug info for</param>
            <param name="LinkEnvironment"></param>
            <param name="ActionGraph"></param>
        </member>
        <member name="M:UnrealBuildTool.MacToolChain.FinalizeAppBundle(UnrealBuildTool.LinkEnvironment,UnrealBuildTool.FileItem,UnrealBuildTool.FileItem,UnrealBuildTool.ActionGraph)">
            <summary>
            Creates app bundle for a given executable
            </summary>
            <param name="LinkEnvironment"></param>
            <param name="Executable">FileItem describing the executable to generate app bundle for</param>
            <param name="FixDylibOutputFile"></param>
            <param name="ActionGraph"></param>
        </member>
        <member name="T:UnrealBuildTool.MacTargetRules">
            <summary>
            Mac-specific target settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacTargetRules.bGenerateDsymFile">
            <summary>
            Whether to generate dSYM files
            Lists Architectures that you want to build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacTargetRules.bEnableAddressSanitizer">
            <summary>
            Enables address sanitizer (ASan)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacTargetRules.bEnableThreadSanitizer">
            <summary>
            Enables thread sanitizer (TSan)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MacTargetRules.bEnableUndefinedBehaviorSanitizer">
            <summary>
            Enables undefined behavior sanitizer (UBSan)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacTargetRules.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyMacTargetRules">
            <summary>
            Read-only wrapper for Mac-specific target settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlyMacTargetRules.Inner">
            <summary>
            The private mutable settings object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyMacTargetRules.#ctor(UnrealBuildTool.MacTargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The settings object to wrap</param>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyMacTargetRules.bGenerateDsymFile">
            <summary>
            Accessors for fields on the inner TargetRules instance
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.IsBuildProduct(System.String,System.String[],System.String[])">
            <summary>
            Determines if the given name is a build product for a target.
            </summary>
            <param name="FileName">The name to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <returns>True if the string matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.GetBinaryExtension(UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extension to use for the given binary type
            </summary>
            <param name="InBinaryType"> The binrary type being built</param>
            <returns>string    The binary extenstion (ie 'exe' or 'dll')</returns>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.GetDebugInfoExtensions(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extensions to use for debug info for the given binary type
            </summary>
            <param name="Target">Rules for the target being built</param>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string[]    The debug info extensions (i.e. 'pdb')</returns>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.ModifyModuleRulesForOtherPlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, where the target is a different host platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.UseAbsolutePathsInUnityFiles">
            <summary>
            Don't use absolute paths in unity files; we may be remote compiling.
            </summary>
            <returns>bool true if it is required, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.IsBuildRequired">
            <summary>
            Return whether we wish to have this platform's binaries in our builds
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.IsCISRequired">
            <summary>
            Return whether we wish to have this platform's binaries in our CIS tests
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.ConvertPath(System.String)">
            <summary>
            Converts the passed in path from UBT host to compiler native format.
            </summary>
            <param name="OriginalPath">The path to convert</param>
            <returns>The path in native format for the toolchain</returns>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.ModifyModuleRulesForActivePlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, in a target that's being built for this platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.SetUpEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the target environment for building
            </summary>
            <param name="Target">Settings for the target being compiled</param>
            <param name="CompileEnvironment">The compile environment for this target</param>
            <param name="LinkEnvironment">The link environment for this target</param>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.ShouldCreateDebugInfo(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Whether this platform should create debug information or not
            </summary>
            <param name="Target">The target being built</param>
            <returns>true if debug info should be generated, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.CreateToolChain(UnrealBuildTool.CppPlatform,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Creates a toolchain instance for the given platform.
            </summary>
            <param name="CppPlatform">The platform to create a toolchain for</param>
            <param name="Target">The target being built</param>
            <returns>New toolchain instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.MacPlatform.Deploy(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Deploys the given target
            </summary>
            <param name="Target">Information about the target being deployed</param>
        </member>
        <member name="M:UnrealBuildTool.MacPlatformFactory.RegisterBuildPlatforms(UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Register the platform with the UEBuildPlatform class
            </summary>
        </member>
        <member name="T:UnrealBuildTool.MacProjectGenerator">
            <summary>
            Base class for platform-specific project generators
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacProjectGenerator.RegisterPlatformProjectGenerator">
            <summary>
            Register the platform with the UEPlatformProjectGenerator class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MacProjectGenerator.HasVisualStudioSupport(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            
            	VisualStudio project generation functions
            	
             <summary>
             Whether this build platform has native support for VisualStudio
             </summary>
             <param name="InPlatform">  The UnrealTargetPlatform being built</param>
             <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
             <param name="ProjectFileFormat"></param>
             <returns>bool    true if native VisualStudio support (or custom VSI) is available</returns>
        </member>
        <member name="F:UnrealBuildTool.AppleToolChainSettings.XcodeDeveloperDir">
            <summary>
            Which developer directory to root from? If this is "xcode-select", UBT will query for the currently selected Xcode
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleRules">
            <summary>
            ModuleRules is a data structure that contains the rules for defining a module
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleRules.ModuleType">
            <summary>
            Type of module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.ModuleType.CPlusPlus">
            <summary>
            C++
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.ModuleType.External">
            <summary>
            External (third-party)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleRules.CodeOptimization">
            <summary>
            Code optimization settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.CodeOptimization.Never">
            <summary>
            Code should never be optimized if possible.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.CodeOptimization.InNonDebugBuilds">
            <summary>
            Code should only be optimized in non-debug builds (not in Debug).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.CodeOptimization.InShippingBuildsOnly">
            <summary>
            Code should only be optimized in shipping builds (not in Debug, DebugGame, Development)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.CodeOptimization.Always">
            <summary>
            Code should always be optimized if possible.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.CodeOptimization.Default">
            <summary>
            Default: 'InNonDebugBuilds' for game modules, 'Always' otherwise.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleRules.PCHUsageMode">
            <summary>
            What type of PCH to use for this module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PCHUsageMode.Default">
            <summary>
            Default: Engine modules use shared PCHs, game modules do not
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PCHUsageMode.NoSharedPCHs">
            <summary>
            Never use shared PCHs.  Always generate a unique PCH for this module if appropriate
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PCHUsageMode.UseSharedPCHs">
            <summary>
            Shared PCHs are OK!
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PCHUsageMode.UseExplicitOrSharedPCHs">
            <summary>
            Shared PCHs may be used if an explicit private PCH is not set through PrivatePCHHeaderFile. In either case, none of the source files manually include a module PCH, and should include a matching header instead.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleRules.PrecompileTargetsType">
            <summary>
            Which type of targets this module should be precompiled for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrecompileTargetsType.None">
            <summary>
            Never precompile this module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrecompileTargetsType.Default">
            <summary>
            Inferred from the module's directory. Engine modules under Engine/Source/Runtime will be compiled for games, those under Engine/Source/Editor will be compiled for the editor, etc...
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrecompileTargetsType.Game">
            <summary>
            Any game targets.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrecompileTargetsType.Editor">
            <summary>
            Any editor targets.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrecompileTargetsType.Any">
            <summary>
            Any targets.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleRules.RuntimeDependency">
            <summary>
            Information about a file which is required by the target at runtime, and must be moved around with it.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.RuntimeDependency.Path">
            <summary>
            The file that should be staged. Should use $(EngineDir) and $(ProjectDir) variables as a root, so that the target can be relocated to different machines.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.RuntimeDependency.Type">
            <summary>
            How to stage this file.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.RuntimeDependency.#ctor(System.String,UnrealBuildTool.StagedFileType)">
            <summary>
            Constructor
            </summary>
            <param name="InPath">Path to the runtime dependency</param>
            <param name="InType">How to stage the given path</param>
        </member>
        <member name="T:UnrealBuildTool.ModuleRules.RuntimeDependencyList">
            <summary>
            List of runtime dependencies, with convenience methods for adding new items
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.RuntimeDependencyList.Inner">
            <summary>
            Inner list of runtime dependencies
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.RuntimeDependencyList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.RuntimeDependencyList.Add(System.String)">
            <summary>
            Add a runtime dependency to the list
            </summary>
            <param name="InPath">Path to the runtime dependency. May include wildcards.</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.RuntimeDependencyList.Add(System.String,UnrealBuildTool.StagedFileType)">
            <summary>
            Add a runtime dependency to the list
            </summary>
            <param name="InPath">Path to the runtime dependency. May include wildcards.</param>
            <param name="InType">How to stage this file</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.RuntimeDependencyList.Add(UnrealBuildTool.ModuleRules.RuntimeDependency)">
            <summary>
            Add a runtime dependency to the list
            </summary>
            <param name="InRuntimeDependency">RuntimeDependency instance</param>
        </member>
        <member name="T:UnrealBuildTool.ModuleRules.ReceiptPropertyList">
            <summary>
            List of runtime dependencies, with convenience methods for adding new items
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.ReceiptPropertyList.Inner">
            <summary>
            Inner list of runtime dependencies
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.ReceiptPropertyList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.ReceiptPropertyList.Add(System.String,System.String)">
            <summary>
            Add a receipt property to the list
            </summary>
            <param name="Name">Name of the property</param>
            <param name="Value">Value for the property</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.ReceiptPropertyList.Add(UnrealBuildTool.ReceiptProperty)">
            <summary>
            Add a receipt property to the list
            </summary>
            <param name="InReceiptProperty">ReceiptProperty instance</param>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.Target">
            <summary>
            Rules for the target that this module belongs to
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.Type">
            <summary>
            Type of module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.BinariesSubFolder">
            <summary>
            Subfolder of Binaries/PLATFORM folder to put this module in when building DLLs. This should only be used by modules that are found via searching like the
            TargetPlatform or ShaderFormat modules. If FindModules is not used to track them down, the modules will not be found.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.OptimizeCode">
            <summary>
            When this module's code should be optimized.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrivatePCHHeaderFile">
            <summary>
            Explicit private PCH for this module. Implies that this module will not use a shared PCH.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.SharedPCHHeaderFile">
            <summary>
            Header file name for a shared PCH provided by this module.  Must be a valid relative path to a public C++ header file.
            This should only be set for header files that are included by a significant number of other C++ modules.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.ShortName">
            <summary>
            Specifies an alternate name for intermediate directories and files for intermediates of this module. Useful when hitting path length limitations.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PCHUsage">
            <summary>
            Precompiled header usage for this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bTreatAsEngineModule">
            <summary>
            Whether this module should be treated as an engine module (eg. using engine definitions, PCHs, compiled with optimizations enabled in DebugGame configurations, etc...).
            Initialized to a default based on the rules assembly it was created from.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bUseBackwardsCompatibleDefaults">
            <summary>
            Whether to use backwards compatible defaults for this module. By default, engine modules always use the latest default settings, while project modules do not (to support
            an easier migration path).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bUseRTTI">
            <summary>
            Use run time type information
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bUseAVX">
            <summary>
            Use AVX instructions
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bEnableBufferSecurityChecks">
            <summary>
            Enable buffer security checks.  This should usually be enabled as it prevents severe security risks.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bEnableExceptions">
            <summary>
            Enable exception handling
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bEnableObjCExceptions">
            <summary>
            Enable objective C exception handling
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bEnableShadowVariableWarnings">
            <summary>
            Enable warnings for shadowed variables
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bEnableUndefinedIdentifierWarnings">
            <summary>
            Enable warnings for using undefined identifiers in #if expressions
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bFasterWithoutUnity">
            <summary>
            If true and unity builds are enabled, this module will build without unity.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.MinSourceFilesForUnityBuildOverride">
            <summary>
            The number of source files in this module before unity build will be activated for that module.  If set to
            anything besides -1, will override the default setting which is controlled by MinGameModuleSourceFilesForUnityBuild
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.MinFilesUsingPrecompiledHeaderOverride">
            <summary>
            Overrides BuildConfiguration.MinFilesUsingPrecompiledHeader if non-zero.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bBuildLocallyWithSNDBS">
            <summary>
            Module uses a #import so must be built locally when compiling with SN-DBS
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.IsRedistributableOverride">
            <summary>
            Redistribution override flag for this module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bOutputPubliclyDistributable">
            <summary>
            Whether the output from this module can be publicly distributed, even if it has code/
            dependencies on modules that are not (i.e. CarefullyRedist, NotForLicensees, NoRedist).
            This should be used when you plan to release binaries but not source.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.WhitelistRestrictedFolders">
            <summary>
            List of folders which are whitelisted to be referenced when compiling this binary, without propagating restricted folder names
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bEnforceIWYU">
            <summary>
            Enforce "include what you use" rules when PCHUsage is set to ExplicitOrSharedPCH; warns when monolithic headers (Engine.h, UnrealEd.h, etc...) 
            are used, and checks that source files include their matching header first.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bAddDefaultIncludePaths">
            <summary>
            Whether to add all the default include paths to the module (eg. the Source/Classes folder, subfolders under Source/Public).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bPrecompile">
            <summary>
            Whether this module should be precompiled. Defaults to the bPrecompile flag from the target. Clear this flag to prevent a module being precompiled.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bUsePrecompiled">
            <summary>
            Whether this module should use precompiled data. Always true for modules created from installed assemblies.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicIncludePathModuleNames">
            <summary>
            List of modules names (no path needed) with header files that our module's public headers needs access to, but we don't need to "import" or link against.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicDependencyModuleNames">
            <summary>
            List of public dependency module names (no path needed) (automatically does the private/public include). These are modules that are required by our public source files.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrivateIncludePathModuleNames">
            <summary>
            List of modules name (no path needed) with header files that our module's private code files needs access to, but we don't need to "import" or link against.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrivateDependencyModuleNames">
            <summary>
            List of private dependency module names.  These are modules that our private code depends on but nothing in our public
            include files depend on.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.CircularlyReferencedDependentModules">
            <summary>
            Only for legacy reason, should not be used in new code. List of module dependencies that should be treated as circular references.  This modules must have already been added to
            either the public or private dependent module list.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicSystemIncludePaths">
            <summary>
            List of system/library include paths - typically used for External (third party) modules.  These are public stable header file directories that are not checked when resolving header dependencies.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicIncludePaths">
            <summary>
            (This setting is currently not need as we discover all files from the 'Public' folder) List of all paths to include files that are exposed to other modules
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrivateIncludePaths">
            <summary>
            List of all paths to this module's internal include files, not exposed to other modules (at least one include to the 'Private' path, more if we want to avoid relative paths)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicLibraryPaths">
            <summary>
            List of system/library paths (directory of .lib files) - typically used for External (third party) modules
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicAdditionalLibraries">
            <summary>
            List of additional libraries (names of the .lib files including extension) - typically used for External (third party) modules
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicFrameworks">
            <summary>
            List of XCode frameworks (iOS and MacOS)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicWeakFrameworks">
            <summary>
            List of weak frameworks (for OS version transitions)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicAdditionalFrameworks">
            <summary>
            List of addition frameworks - typically used for External (third party) modules on Mac and iOS
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.AdditionalBundleResources">
            <summary>
            List of addition resources that should be copied to the app bundle for Mac or iOS
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicAdditionalShadowFiles">
            <summary>
            For builds that execute on a remote machine (e.g. iOS), this list contains additional files that
            need to be copied over in order for the app to link successfully.  Source/header files and PCHs are
            automatically copied.  Usually this is simply a list of precompiled third party library dependencies.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicDelayLoadDLLs">
            <summary>
            List of delay load DLLs - typically used for External (third party) modules
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ModuleRules.Definitions">
            <summary>
            Accessor for the PublicDefinitions list
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrivateDefinitions">
            <summary>
            Private compiler definitions for this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PublicDefinitions">
            <summary>
            Public compiler definitions for this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.DynamicallyLoadedModuleNames">
            <summary>
            Addition modules this module may require at run-time 
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ModuleRules.PlatformSpecificDynamicallyLoadedModuleNames">
            <summary>
            Extra modules this module may require at run time, that are on behalf of another platform (i.e. shader formats and the like)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.RuntimeDependencies">
            <summary>
            List of files which this module depends on at runtime. These files will be staged along with the target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.AdditionalPropertiesForReceipt">
            <summary>
            List of additional properties to be added to the build receipt
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.PrecompileForTargets">
            <summary>
            Which targets this module should be precompiled for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.ExternalDependencies">
            <summary>
            External files which invalidate the makefile if modified. Relative paths are resolved relative to the .build.cs file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleRules.bLegacyPublicIncludePaths">
            <summary>
            Whether this module qualifies included headers from other modules relative to the root of their 'Public' folder. This reduces the number
            of search paths that have to be passed to the compiler, improving performance and reducing the length of the compiler command line.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ModuleRules.EngineDirectory">
            <summary>
            The current engine directory
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ModuleRules.ModuleDirectory">
            <summary>
            Property for the directory containing this module. Useful for adding paths to third party dependencies.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.#ctor(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Constructor. For backwards compatibility while the parameterless constructor is being phased out, initialization which would happen here is done by 
            RulesAssembly.CreateModulRules instead.
            </summary>
            <param name="Target">Rules for building this target</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.AddEngineThirdPartyPrivateStaticDependencies(UnrealBuildTool.ReadOnlyTargetRules,System.String[])">
            <summary>
            Add the given Engine ThirdParty modules as static private dependencies
            Statically linked to this module, meaning they utilize exports from the other module
            Private, meaning the include paths for the included modules will not be exposed when giving this modules include paths
            NOTE: There is no AddThirdPartyPublicStaticDependencies function.
            </summary>
            <param name="Target">The target this module belongs to</param>
            <param name="ModuleNames">The names of the modules to add</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.AddEngineThirdPartyPrivateDynamicDependencies(UnrealBuildTool.ReadOnlyTargetRules,System.String[])">
            <summary>
            Add the given Engine ThirdParty modules as dynamic private dependencies
            Dynamically linked to this module, meaning they do not utilize exports from the other module
            Private, meaning the include paths for the included modules will not be exposed when giving this modules include paths
            NOTE: There is no AddThirdPartyPublicDynamicDependencies function.
            </summary>
            <param name="Target">Rules for the target being built</param>
            <param name="ModuleNames">The names of the modules to add</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.SetupModulePhysXAPEXSupport(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Setup this module for PhysX/APEX support (based on the settings in UEBuildConfiguration)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleRules.CanPrecompile(Tools.DotNETCommon.FileReference)">
            <summary>
            Determines if this module can be precompiled for the current target.
            </summary>
            <param name="RulesFile">Path to the module rules file</param>
            <returns>True if the module can be precompiled, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.XboxOneTargetRules">
            <summary>
            Stub partial class for XboxOne-specific target settings. 
            This class is not in a restricted location to simplify code paths in UBT. It is visible to all UE4 users, without NDA, and will appear
            empty to those without the XboxOne implementation code.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyXboxOneTargetRules">
            <summary>
            Stub read-only wrapper for XboxOne-specific target settings.
            This class is not in a restricted location to simplify code paths in UBT. It is visible to all UE4 users, without NDA, and will appear
            empty to those without the XboxOne implementation code.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlyXboxOneTargetRules.Inner">
            <summary>
            The private mutable settings object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyXboxOneTargetRules.#ctor(UnrealBuildTool.XboxOneTargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The settings object to wrap</param>
        </member>
        <member name="T:UnrealBuildTool.PS4TargetRules">
            <summary>
            Stub partial class for PS4-specific target settings. 
            This class is not in a restricted location to simplify code paths in UBT. It is visible to all UE4 users, without NDA, and will appear
            empty to those without the PS4 implementation code.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyPS4TargetRules">
            <summary>
            Stub read-only wrapper for PS4-specific target settings.
            This class is not in a restricted location to simplify code paths in UBT. It is visible to all UE4 users, without NDA, and will appear
            empty to those without the PS4 implementation code.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlyPS4TargetRules.Inner">
            <summary>
            The private mutable settings object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyPS4TargetRules.#ctor(UnrealBuildTool.PS4TargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The settings object to wrap</param>
        </member>
        <member name="T:UnrealBuildTool.SwitchTargetRules">
            <summary>
            Stub partial class for Switch-specific target settings. 
            This class is not in a restricted location to simplify code paths in UBT. It is visible to all UE4 users, without NDA, and will appear
            empty to those without the Switch implementation code.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlySwitchTargetRules">
            <summary>
            Stub read-only wrapper for Switch-specific target settings.
            This class is not in a restricted location to simplify code paths in UBT. It is visible to all UE4 users, without NDA, and will appear
            empty to those without the Switch implementation code.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlySwitchTargetRules.Inner">
            <summary>
            The private mutable settings object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlySwitchTargetRules.#ctor(UnrealBuildTool.SwitchTargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The settings object to wrap</param>
        </member>
        <member name="T:UnrealBuildTool.TargetDescriptor">
            <summary>
            Describes all of the information needed to initialize a UEBuildTarget object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetDescriptor.#ctor(Tools.DotNETCommon.FileReference,System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ProjectFile">Path to the project file</param>
            <param name="TargetName">Name of the target to build</param>
            <param name="Platform">Platform to build for</param>
            <param name="Configuration">Configuration to build</param>
            <param name="Architecture">Architecture to build for</param>
        </member>
        <member name="M:UnrealBuildTool.TargetDescriptor.ParseCommandLine(System.String[],Tools.DotNETCommon.FileReference@)">
            <summary>
            Parse a list of target descriptors from the command line
            </summary>
            <param name="Arguments">Command-line arguments</param>
            <param name="ProjectFile">The project file, if already set. May be updated if not.</param>
            <returns>List of target descriptors</returns>
        </member>
        <member name="M:UnrealBuildTool.TargetDescriptor.ParseArgumentValue(System.String,System.String,System.String@)">
            <summary>
            Parse a single argument value, of the form -Foo=Bar
            </summary>
            <param name="Argument">The argument to parse</param>
            <param name="Prefix">The argument prefix, eg. "-Foo="</param>
            <param name="Value">Receives the value of the argument</param>
            <returns>True if the argument could be parsed, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.UEBuildDeployTarget">
            <summary>
            Contains information about a target required to deploy it. Written at build time, and read back in when UBT needs to run the deploy step.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.ProjectFile">
            <summary>
            Path to the project file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.TargetFile">
            <summary>
            Path to the .target.cs
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.AppName">
            <summary>
            The shared app name for this target (eg. UE4Editor)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.TargetName">
            <summary>
            The name of this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.TargetType">
            <summary>
            Type of the target to build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.Platform">
            <summary>
            The platform being built
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.Configuration">
            <summary>
            The configuration being built
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildDeployTarget.OutputPath">
            <summary>
            The output path
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.OutputPaths">
            <summary>
            The full list of output paths, for platforms that support building multiple binaries simultaneously
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.EngineIntermediateDirectory">
            <summary>
            Path to the directory for engine intermediates. May be under the project directory if not being built for the shared build environment.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.ProjectDirectory">
            <summary>
            The project directory, or engine directory for targets without a project file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.BuildReceiptFileName">
            <summary>
            Path to the generated build receipt.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.bCreateStubIPA">
            <summary>
            If true, then a stub IPA will be generated when compiling is done (minimal files needed for a valid IPA)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.AndroidArchitectures">
            <summary>
            Which architectures to deploy for on Android
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.AndroidGPUArchitectures">
            <summary>
            Which GPU architectures to deploy for on Android
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildDeployTarget.LuminGPUArchitectures">
            <summary>
            Which GPU architectures to deploy for on Lumin
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildDeployTarget.#ctor(UnrealBuildTool.UEBuildTarget)">
            <summary>
            Construct the deployment info from a target
            </summary>
            <param name="Target">The target being built</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildDeployTarget.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Read the deployment info from a file on disk
            </summary>
            <param name="Location">Path to the file to read</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildDeployTarget.Write(Tools.DotNETCommon.FileReference)">
            <summary>
            Write the deployment info to a file on disk
            </summary>
            <param name="Location">File to write to</param>
        </member>
        <member name="T:UnrealBuildTool.UEBuildModuleExternal">
            <summary>
            A module that is never compiled by us, and is only used to group include paths and libraries into a dependency unit.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEBuildPlatformFactory">
            <summary>
            Factory class for registering platforms at startup
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformFactory.TryRegisterBuildPlatforms(UnrealBuildTool.SDKOutputLevel,System.Boolean)">
            <summary>
            Attempt to register a build platform, checking whether it is a valid platform in installed builds
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildPlatformFactory.TargetPlatform">
            <summary>
            Gets the target platform for an individual factory
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformFactory.RegisterBuildPlatforms(UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Register the platform with the UEBuildPlatform class
            </summary>
        </member>
        <member name="T:UnrealBuildTool.SDKStatus">
            <summary>
            SDK installation status
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SDKStatus.Valid">
            <summary>
            Desired SDK is installed and set up.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SDKStatus.Invalid">
            <summary>
            Could not find the desired SDK, SDK setup failed, etc.		
            </summary>
        </member>
        <member name="T:UnrealBuildTool.SDKOutputLevel">
            <summary>
            Output level for diagnostic messages when initializing the platform SDK
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SDKOutputLevel.Quiet">
            <summary>
            No output
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SDKOutputLevel.Minimal">
            <summary>
            Minimal output
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SDKOutputLevel.Verbose">
            <summary>
            All messages
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEBuildPlatformSDK">
            <summary>
            SDK for a platform
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlatformSDK.CurrentlyInstalledSDKStringManifest">
            <summary>
            Name of the file that holds currently install SDK version string
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlatformSDK.LastRunScriptVersionManifest">
            <summary>
            name of the file that holds the last succesfully run SDK setup script version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlatformSDK.SDKEnvironmentVarsFile">
            <summary>
            Name of the file that holds environment variables of current SDK
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.PlatformSupportsAutoSDKs">
            <summary>
            Whether platform supports switching SDKs during runtime
            </summary>
            <returns>true if supports</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.GetRequiredSDKString">
            <summary>
            Returns SDK string as required by the platform
            </summary>
            <returns>Valid SDK string</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.GetRequiredScriptVersionString">
            <summary>
            Gets the version number of the SDK setup script itself.  The version in the base should ALWAYS be the master revision from the last refactor.
            If you need to force a rebuild for a given platform, override this for the given platform.
            </summary>
            <returns>Setup script version</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.GetPathToPlatformAutoSDKs">
            <summary>
            Returns path to platform SDKs
            </summary>
            <returns>Valid SDK string</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.TryGetHostPlatformAutoSDKDir(Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Returns path to platform SDKs
            </summary>
            <returns>Valid SDK string</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.GetPlatformAutoSDKSetupEnvVar">
            <summary>
            Because most ManualSDK determination depends on reading env vars, if this process is spawned by a process that ALREADY set up
            AutoSDKs then all the SDK env vars will exist, and we will spuriously detect a Manual SDK. (children inherit the environment of the parent process).
            Therefore we write out an env variable to set in the command file (OutputEnvVars.txt) such that child processes can determine if their manual SDK detection
            is bogus.  Make it platform specific so that platforms can be in different states.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.GetCurrentlyInstalledSDKString(System.String,System.String@)">
            <summary>
            Gets currently installed version
            </summary>
            <param name="PlatformSDKRoot">absolute path to platform SDK root</param>
            <param name="OutInstalledSDKVersionString">version string as currently installed</param>
            <returns>true if was able to read it</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.GetLastRunScriptVersionString(System.String,System.String@)">
            <summary>
            Gets the version of the last successfully run setup script.
            </summary>
            <param name="PlatformSDKRoot">absolute path to platform SDK root</param>
            <param name="OutLastRunScriptVersion">version string</param>
            <returns>true if was able to read it</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.SetCurrentlyInstalledAutoSDKString(System.String)">
            <summary>
            Sets currently installed version
            </summary>
            <param name="InstalledSDKVersionString">SDK version string to set</param>
            <returns>true if was able to set it</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.GetHookExecutableName(UnrealBuildTool.UEBuildPlatformSDK.SDKHookType)">
            <summary>
            Returns Hook names as needed by the platform
            (e.g. can be overridden with custom executables or scripts)
            </summary>
            <param name="Hook">Hook type</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.RunAutoSDKHooks(UnrealBuildTool.SDKOutputLevel,System.String,System.String,UnrealBuildTool.UEBuildPlatformSDK.SDKHookType,System.Boolean)">
            <summary>
            Runs install/uninstall hooks for SDK
            </summary>
            <param name="OutputLevel">The output level for diagnostic messages</param>
            <param name="PlatformSDKRoot">absolute path to platform SDK root</param>
            <param name="SDKVersionString">version string to run for (can be empty!)</param>
            <param name="Hook">which one of hooks to run</param>
            <param name="bHookCanBeNonExistent">whether a non-existing hook means failure</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.SetupEnvironmentFromAutoSDK(System.String,UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Loads environment variables from SDK
            If any commands are added or removed the handling needs to be duplicated in
            TargetPlatformManagerModule.cpp
            </summary>
            <param name="PlatformSDKRoot">absolute path to platform SDK</param>
            <param name="OutputLevel">The output level for diagnostic messages</param>
            <returns>true if succeeded</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.HasRequiredAutoSDKInstalled">
            <summary>
            Currently installed AutoSDK is written out to a text file in a known location.
            This function just compares the file's contents with the current requirements.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.SetupAutoSDK(UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Runs batch files if necessary to set up required AutoSDK.
            AutoSDKs are SDKs that have not been setup through a formal installer, but rather come from
            a source control directory, or other local copy.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEBuildPlatformSDK.SDKHookType">
            <summary>
            Enum describing types of hooks a platform SDK can have
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.GetSDKTargetPlatformName">
            <summary>
            Returns platform-specific name used in SDK repository
            </summary>
            <returns>path to SDK Repository</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatformSDK.HasRequiredSDKsInstalled">
            <summary>
            Whether the required external SDKs are installed for this platform.
            Could be either a manual install or an AutoSDK.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEBuildPlugin">
            <summary>
            Stores information about a plugin that is being built for a target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlugin.Info">
            <summary>
            Information about the plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlugin.Modules">
            <summary>
            Modules that this plugin belongs to
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlugin.Dependencies">
            <summary>
            Recursive
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlugin.bDescriptorNeededAtRuntime">
            <summary>
            Whether the descriptor for this plugin is needed at runtime; because it has modules or content which is used, or because it references another module that does.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlugin.bDescriptorReferencedExplicitly">
            <summary>
            Whether this descriptor is referenced non-optionally by something else; a project file or other plugin. This is recursively applied to the plugin's references.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlugin.#ctor(UnrealBuildTool.PluginInfo)">
            <summary>
            Constructor
            </summary>
            <param name="Info">The static plugin information</param>
        </member>
        <member name="P:UnrealBuildTool.UEBuildPlugin.Name">
            <summary>
            Accessor for the name of this plugin
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildPlugin.File">
            <summary>
            Accessor for the file for this plugin
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildPlugin.Type">
            <summary>
            Accessor for the type of the plugin
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildPlugin.Directory">
            <summary>
            Accessor for this plugin's root directory
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildPlugin.Descriptor">
            <summary>
            Accessor for this plugin's descriptor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlugin.ToString">
            <summary>
            Returns the name of this plugin for debugging
            </summary>
            <returns>Name of the plugin</returns>
        </member>
        <member name="T:UnrealBuildTool.CLionGenerator">
            <summary>
            CLion project file generator which is just the CMakefileGenerator and only here for UBT to match against
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CLionGenerator.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Creates a new instance of the <see cref="T:UnrealBuildTool.CMakefileGenerator"/> class.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CMakefileFolder">
            <summary>
            Represents a folder within the master project (e.g. Visual Studio solution)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CMakefileFolder.#ctor(UnrealBuildTool.ProjectFileGenerator,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CMakefileGenerator">
            <summary>
            CMakefile project file generator implementation
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CMakefileGenerator.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Creates a new instance of the <see cref="T:UnrealBuildTool.CMakefileGenerator"/> class.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CMakefileGenerator.ShouldGenerateIntelliSenseData">
            <summary>
            Determines whether or not we should generate code completion data whenever possible.
            </summary>
            <returns><value>true</value> if we should generate code completion data; <value>false</value> otherwise.</returns>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.IsProjectBuild">
            <summary>
            Is this a project build?
            </summary>
            <remarks>
            This determines if engine files are included in the source lists.
            </remarks>
            <returns><value>true</value> if we should treat this as a project build; <value>false</value> otherwise.</returns>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.ProjectFileExtension">
            <summary>
            The file extension for this project file.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeExtension">
            <summary>
            The CMake helper file extension
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeIncludesFileName">
            <summary>
            The CMake file used to store the list of includes for the project.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeEngineConfigsFileName">
            <summary>
            The CMake file used to store the configuration files (INI) for the engine.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeProjectConfigsFileName">
            <summary>
            The CMake file used to store the configuration files (INI) for the project.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeEngineCSFileName">
            <summary>
            The CMake file used to store the additional build configuration files (CSharp) for the engine.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeProjectCSFileName">
            <summary>
            The CMake file used to store the additional configuration files (CSharp) for the project.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeEngineShadersFileName">
            <summary>
            The CMake file used to store the additional shader files (usf/ush) for the engine.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeProjectShadersFileName">
            <summary>
            The CMake file used to store the additional shader files (usf/ush) for the project.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeEngineHeadersFileName">
            <summary>
            The CMake file used to store the list of engine headers.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeProjectHeadersFileName">
            <summary>
            The CMake file used to store the list of engine headers.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeEngineSourcesFileName">
            <summary>
            The CMake file used to store the list of sources for the engine.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeProjectSourcesFileName">
            <summary>
            The CMake file used to store the list of sources for the project.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.CMakefileGenerator.CMakeDefinitionsFileName">
            <summary>
            The CMake file used to store the list of definitions for the project.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CMakefileGenerator.WriteMasterProjectFile(UnrealBuildTool.ProjectFile)">
            <summary>
            Writes the master project file (e.g. Visual Studio Solution file)
            </summary>
            <param name="UBTProject">The UnrealBuildTool project</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.CMakefileGenerator.GetIncludeDirectory(System.String,System.String)">
            Adds the include directory to the list, after converting it to relative to UE4 root
        </member>
        <member name="M:UnrealBuildTool.CMakefileGenerator.WriteCLionIgnoreDirs">
            <summary>
            Writes a file that CLion uses to know what directories to exclude from indexing. This should speed up indexing
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CMakefileGenerator.bCmakeMinimalTargets">
            <summary>
            This will filter out numerous targets to speed up cmake processing
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CMakefileGenerator.bIncludeIOSTargets">
            <summary>
            Whether to include iOS targets or not
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CMakefileGenerator.bIncludeTVOSTargets">
            <summary>
            Whether to include TVOS targets or not
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CMakefileGenerator.AllocateProjectFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Allocates a generator-specific project file object
            </summary>
            <param name="InitFilePath">Path to the project file</param>
            <returns>The newly allocated project file object</returns>
        </member>
        <member name="M:UnrealBuildTool.EddieSourceFile.#ctor(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:UnrealBuildTool.KDevelopFolder">
            <summary>
            Represents a folder within the master project (e.g. Visual Studio solution)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.KDevelopFolder.#ctor(UnrealBuildTool.ProjectFileGenerator,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:UnrealBuildTool.KDevelopGenerator">
            <summary>
            KDevelop project file generator implementation
            </summary>
        </member>
        <member name="P:UnrealBuildTool.KDevelopGenerator.ProjectFileExtension">
            File extension for project files we'll be generating (e.g. ".vcxproj")
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.WriteKDevMasterProjectSection(System.Text.StringBuilder@,System.String)">
            <summary>
            Write the primare $ProjectName.kdev4 project file, the one that should be opened when loading the project
            into KDevelop
            </summary>
            <param name="FileContent">File content.</param>
            <param name="Name">Name.</param>
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.WriteCommandSubSection(System.Text.StringBuilder@,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Write the Command Sub section for .kdev4/$ProjectName.kdev4 file
            </summary>
            <param name="FileContent">File content.</param>
            <param name="TargetName">Target name.</param>
            <param name="ConfName">Conf name.</param>
            <param name="BuildConfigIndex">Build config index.</param>
            <param name="Type">Type.</param>
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.WriteCommandSection(System.Text.StringBuilder@)">
            <summary>
             Write the Command section for a .kdev4/$ProjectName.kdev4 file.
            </summary>
            <param name="FileContent">File content.</param>
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.WriteIncludeSection(System.Text.StringBuilder@)">
            <summary>
            Adds the include directory to the list, after converting it to an absolute path to UE4 root directory.
            </summary>
            <param name="FileContent">File content.</param>
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.SplitDefinitionAndValue(System.String,System.String@,System.String@)">
            <summary>
            Splits the definition text into macro name and value (if any).
            </summary>
            <param name="Definition">Definition text</param>
            <param name="Key">Out: The definition name</param>
            <param name="Value">Out: The definition value or null if it has none</param>
            <returns>Pair representing macro name and value.</returns>
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.WriteDefineSection(System.Text.StringBuilder@)">
            <summary>
            Write the defines section to the .kdev4/$ProjectName.kdev4 project file.
            </summary>
            <param name="FileContent">File content.</param>
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.WriteExcludeSection(System.Text.StringBuilder@)">
            <summary>
            Excludes list in one big ugly list.
            </summary>
            <param name="FileContent">File content.</param>
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.WriteKDevelopPro">
            Simple Place to call all the Write*Section functions.
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.WriteProjectFiles">
            ProjectFileGenerator interface
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.AllocateMasterProjectFolder(UnrealBuildTool.ProjectFileGenerator,System.String)">
            ProjectFileGenerator interface
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.AllocateProjectFile(Tools.DotNETCommon.FileReference)">
            ProjectFileGenerator interface
            <summary>
            Allocates a generator-specific project file object
            </summary>
            <param name="InitFilePath">Path to the project file</param>
            <returns>The newly allocated project file object</returns>
        </member>
        <member name="M:UnrealBuildTool.KDevelopGenerator.CleanProjectFiles(Tools.DotNETCommon.DirectoryReference,System.String,Tools.DotNETCommon.DirectoryReference)">
            ProjectFileGenerator interface
        </member>
        <member name="T:UnrealBuildTool.MakefileFolder">
            <summary>
            Represents a folder within the master project (e.g. Visual Studio solution)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MakefileFolder.#ctor(UnrealBuildTool.ProjectFileGenerator,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:UnrealBuildTool.MakefileGenerator">
            <summary>
            Makefile project file generator implementation
            </summary>
        </member>
        <member name="F:UnrealBuildTool.MakefileGenerator.bGenerateIntelliSenseData">
            True if intellisense data should be generated (takes a while longer)
            Now this is needed for project target generation.
        </member>
        <member name="M:UnrealBuildTool.MakefileGenerator.#ctor(Tools.DotNETCommon.FileReference)">
            Default constructor
        </member>
        <member name="M:UnrealBuildTool.MakefileGenerator.ShouldGenerateIntelliSenseData">
            True if we should include IntelliSense data in the generated project files when possible
        </member>
        <member name="P:UnrealBuildTool.MakefileGenerator.ProjectFileExtension">
            File extension for project files we'll be generating (e.g. ".vcxproj")
        </member>
        <member name="M:UnrealBuildTool.MakefileGenerator.WriteProjectFiles">
            ProjectFileGenerator interface
        </member>
        <member name="M:UnrealBuildTool.MakefileGenerator.AllocateMasterProjectFolder(UnrealBuildTool.ProjectFileGenerator,System.String)">
            ProjectFileGenerator interface
        </member>
        <member name="M:UnrealBuildTool.MakefileGenerator.AllocateProjectFile(Tools.DotNETCommon.FileReference)">
            ProjectFileGenerator interface
            <summary>
            Allocates a generator-specific project file object
            </summary>
            <param name="InitFilePath">Path to the project file</param>
            <returns>The newly allocated project file object</returns>
        </member>
        <member name="M:UnrealBuildTool.MakefileGenerator.CleanProjectFiles(Tools.DotNETCommon.DirectoryReference,System.String,Tools.DotNETCommon.DirectoryReference)">
            ProjectFileGenerator interface
        </member>
        <member name="T:UnrealBuildTool.ProjectTarget">
            <summary>
            A single target within a project.  A project may have any number of targets within it, which are basically compilable projects
            in themselves that the project wraps up.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.TargetFilePath">
            The target rules file path on disk, if we have one
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.ProjectFilePath">
            The project file path on disk
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.UnrealProjectFilePath">
            <summary>
            Path to the .uproject file on disk
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.TargetRules">
            Optional target rules for this target.  If the target came from a *.Target.cs file on disk, then it will have one of these.
            For targets that are synthetic (like UnrealBuildTool or other manually added project files) we won't have a rules object for those.
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.SupportedPlatforms">
            Platforms supported by the target
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.ExtraSupportedPlatforms">
            Extra supported build platforms.  Normally the target rules determines these, but for synthetic targets we'll add them here.
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.ExtraSupportedConfigurations">
            Extra supported build configurations.  Normally the target rules determines these, but for synthetic targets we'll add them here.
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.ForceDevelopmentConfiguration">
            If true, forces Development configuration regardless of which configuration is set as the Solution Configuration
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.ProjectDeploys">
            Whether the project requires 'Deploy' option set (VC projects)
        </member>
        <member name="F:UnrealBuildTool.ProjectTarget.CreateRulesDelegate">
            Delegate for creating a rules instance for a given platform/configuration
        </member>
        <member name="T:UnrealBuildTool.AliasedFile">
            <summary>
            Class that stores info about aliased file.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ProjectFile.SourceFile">
            <summary>
            Represents a single source file (or other type of file) in a project
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.SourceFile.#ctor(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Constructor
            </summary>
            <param name="InReference">Path to the source file on disk</param>
            <param name="InBaseFolder">The directory on this the path within the project will be relative to</param>
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.SourceFile.Reference">
            <summary>
            File path to file on disk
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.SourceFile.BaseFolder">
            <summary>
            Optional directory that overrides where files in this project are relative to when displayed in the IDE.  If null, will default to the project's BaseFolder.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.SourceFile.ToString">
            <summary>
            Define ToString() so the debugger can show the name in watch windows
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Constructs a new project file object
            </summary>
            <param name="InProjectFilePath">The path to the project file, relative to the master project file</param>
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.ProjectFilePath">
            Project file path
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.IsGeneratedProject">
            Returns true if this is a generated project (as opposed to an imported project)
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.IsStubProject">
            Returns true if this is a "stub" project.  Stub projects function as dumb containers for source files
            and are never actually "built" by the master project.  Stub projects are always "generated" projects.
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.IsForeignProject">
            Returns true if this is a foreign project, and requires UBT to be passed the path to the .uproject file 
            on the command line.
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.PluginFilePath">
            <summary>
            For mod projects, contains the path to the plugin file
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.ShouldBuildForAllSolutionTargets">
            Whether this project should be built for all solution targets
        </member>
        <member name="P:UnrealBuildTool.ProjectFile.ShouldBuildByDefaultForSolutionTargets">
            Whether this project should be built by default. Can still be built from the IDE through the context menu.
        </member>
        <member name="F:UnrealBuildTool.ProjectFile.ProjectTargets">
            All of the targets in this project.  All non-stub projects must have at least one target.
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.AddFilesToProject(System.Collections.Generic.List{Tools.DotNETCommon.FileReference},Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Adds a list of files to this project, ignoring dupes
            </summary>
            <param name="FilesToAdd">Files to add</param>
            <param name="BaseFolder">The directory the path within the project will be relative to</param>
        </member>
        <member name="F:UnrealBuildTool.ProjectFile.AliasedFiles">
            Aliased (i.e. files is custom filter tree) in this project
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.AddAliasedFileToProject(UnrealBuildTool.AliasedFile)">
            <summary>
            Adds aliased file to the project.
            </summary>
            <param name="File">Aliased file.</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.AddFileToProject(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Adds a file to this project, ignoring dupes
            </summary>
            <param name="FilePath">Path to the file on disk</param>
            <param name="BaseFolder">The directory the path within the project will be relative to</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.SplitDefinitionAndValue(System.String,System.String@,System.String@)">
            <summary>
            Splits the definition text into macro name and value (if any).
            </summary>
            <param name="Definition">Definition text</param>
            <param name="Key">Out: The definition name</param>
            <param name="Value">Out: The definition value or null if it has none</param>
            <returns>Pair representing macro name and value.</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.AddIntelliSensePreprocessorDefinitions(System.Collections.Generic.List{System.String})">
            <summary>
            Adds all of the specified preprocessor definitions to this VCProject's list of preprocessor definitions for all modules in the project
            </summary>
            <param name="NewPreprocessorDefinitions">List of preprocessor definitons to add</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.AddInteliiSenseIncludePaths(System.Collections.Generic.HashSet{Tools.DotNETCommon.DirectoryReference},System.Boolean)">
            <summary>
            Adds all of the specified include paths to this VCProject's list of include paths for all modules in the project
            </summary>
            <param name="NewIncludePaths">List of include paths to add</param>
            <param name="bAddingSystemIncludes"></param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.AddDependsOnProject(UnrealBuildTool.ProjectFile)">
            <summary>
            Add the given project to the DepondsOn project list.
            </summary>
            <param name="InProjectFile">The project this project is dependent on</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.WriteProjectFile(System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform},System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration})">
            <summary>
            Writes a project file to disk
            </summary>
            <param name="InPlatforms">The platforms to write the project files for</param>
            <param name="InConfigurations">The configurations to add to the project files</param>
            <returns>True on success</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.WriteDebugProjectFiles(System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform},System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration})">
            <summary>
            If found writes a debug project file to disk
            </summary>
            <param name="InPlatforms">The platforms to write the project files for</param>
            <param name="InConfigurations">The configurations to add to the project files</param>
            <returns>List of project files written</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.AllocSourceFile(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Allocates a generator-specific source file object
            </summary>
            <param name="InitFilePath">Path to the source file on disk</param>
            <param name="InitProjectSubFolder">Optional sub-folder to put the file in.  If empty, this will be determined automatically from the file's path relative to the project file</param>
            <returns>The newly allocated source file object</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.NormalizeProjectPath(System.String)">
            <summary>
            Takes the given path and tries to rebase it relative to the project or solution directory variables.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.NormalizeProjectPath(Tools.DotNETCommon.FileSystemReference)">
            <summary>
            Takes the given path and tries to rebase it relative to the project.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.EscapePath(System.String)">
            <summary>
            Takes the given path, normalizes it, and quotes it if necessary.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFile.ToString">
            <summary>
            Visualizer for the debugger
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFile.SourceFileMap">
            Map of file paths to files in the project.
        </member>
        <member name="F:UnrealBuildTool.ProjectFile.SourceFiles">
            Files in this project
        </member>
        <member name="F:UnrealBuildTool.ProjectFile.IntelliSenseIncludeSearchPaths">
            Include paths for every single module in the project file, merged together
        </member>
        <member name="F:UnrealBuildTool.ProjectFile.IntelliSensePreprocessorDefinitions">
            Preprocessor definitions for every single module in the project file, merged together
        </member>
        <member name="F:UnrealBuildTool.ProjectFile.DependsOnProjects">
            Projects that this project is dependent on
        </member>
        <member name="T:UnrealBuildTool.MasterProjectFolder">
            <summary>
            Represents a folder within the master project (e.g. Visual Studio solution)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MasterProjectFolder.#ctor(UnrealBuildTool.ProjectFileGenerator,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="InitOwnerProjectFileGenerator">Project file generator that owns this object</param>
            <param name="InitFolderName">Name for this folder</param>
        </member>
        <member name="P:UnrealBuildTool.MasterProjectFolder.FolderName">
            Name of this folder
        </member>
        <member name="M:UnrealBuildTool.MasterProjectFolder.AddSubFolder(System.String)">
            <summary>
            Adds a new sub-folder to this folder
            </summary>
            <param name="SubFolderName">Name of the new folder</param>
            <returns>The newly-added folder</returns>
        </member>
        <member name="M:UnrealBuildTool.MasterProjectFolder.FindFolderForProject(UnrealBuildTool.ProjectFile)">
            <summary>
            Recursively searches for the specified project and returns the folder that it lives in, or null if not found
            </summary>
            <param name="Project">The project file to look for</param>
            <returns>The found folder that the project is in, or null</returns>
        </member>
        <member name="F:UnrealBuildTool.MasterProjectFolder.OwnerProjectFileGenerator">
            Owner project generator
        </member>
        <member name="F:UnrealBuildTool.MasterProjectFolder.SubFolders">
            Sub-folders
        </member>
        <member name="F:UnrealBuildTool.MasterProjectFolder.ChildProjects">
            Child projects
        </member>
        <member name="F:UnrealBuildTool.MasterProjectFolder.Files">
            Files in this folder.  These are files that aren't part of any project, but display in the IDE under the project folder
            and can be browsed/opened by the user easily in the user interface
        </member>
        <member name="T:UnrealBuildTool.ProjectFileFormat">
            <summary>
            The type of project files to generate
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ProjectFileGeneratorSettings">
            <summary>
            Static class containing 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGeneratorSettings.Format">
            <summary>
            Default list of project file formats to generate
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGeneratorSettings.ParseFormatList(System.String)">
            <summary>
            Parses a list of project file formats from a string
            </summary>
            <param name="Formats"></param>
            <returns>Sequence of project file formats</returns>
        </member>
        <member name="T:UnrealBuildTool.ProjectFileGenerator">
            <summary>
            Base class for all project file generators
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bGenerateProjectFiles">
            <summary>
            Global static that enables generation of project files.  Doesn't actually compile anything.
            This is enabled only via UnrealBuildTool command-line.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bGeneratingGameProjectFiles">
            <summary>
            True if we're generating lightweight project files for a single game only, excluding most engine code, documentation, etc.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.ProjectPlatforms">
            <summary>
            Optional list of platforms to generate projects for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.GameProjectName">
            <summary>
            When bGeneratingGameProjectFiles=true, this is the game name we're generating projects for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bCreateDummyConfigsForUnsupportedPlatforms">
            <summary>
            Global static that only adds platforms that are supported when generating a given target.
            This was the old behavior, and it resulted in scenarios where having an unsupported platform selected
            in the platform drop-down would silently 'switch' to building Win32.
            The new behavior is to add all platforms when generating a target, and then check if it is supported
            at build time. If it is not, then a BuildException is thrown informing the user of an unsupported platform.
            NOTE: This only matters when using "-AllProjects".  It can increase the project file load times though, because of all
                  of the extra project configuration combinations we need to store
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeTestAndShippingConfigs">
            <summary>
            Whether we should include configurations for "Test" and "Shipping" in generated projects (pass "-NoShippingConfigs" to disable this)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bGenerateIntelliSenseData">
            <summary>
            True if intellisense data should be generated (takes a while longer)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeDocumentation">
            <summary>
            True if we should include documentation in the generated projects
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bAllDocumentationLanguages">
            <summary>
            True if all documentation languages should be included in generated projects, otherwise only "INT" will be included
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bUsePrecompiled">
            <summary>
            True if build targets should pass the -useprecompiled argument
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeEngineSource">
            <summary>
            True if we should include engine source in the generated solution
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeEnterpriseSource">
            <summary>
            Whether to include enterprise source in the generated solution
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeShaderSource">
            <summary>
            True if shader source files should be included in the generated projects
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeBuildSystemFiles">
            <summary>
            True if build system files should be included
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeConfigFiles">
            <summary>
            True if we should include config files (.ini files) in the generated project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeLocalizationFiles">
            <summary>
            True if we should include localization files (.int/.kor/etc files) in the generated project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeTemplateFiles">
            <summary>
            True if we should include template files (.template files) in the generated project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.IncludeEnginePrograms">
            <summary>
            True if we should include program projects in the generated solution
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bIncludeDotNETCoreProjects">
            <summary>
            True if we should include .NET Core projects in the generated solution
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bKeepSourceSubDirectories">
            <summary>
            True if we should reflect "Source" sub-directories on disk in the master project as master project directories.
            This arguably adds some visual clutter to the master project, but is truer to the on-disk file organization.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.MasterProjectPath">
            <summary>
            Relative path to the directory where the master project file will be saved to
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.EngineProjectFileNameBase">
            <summary>
            Name of the UE4 engine project that contains all of the engine code, config files and other files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.EnterpriseProjectFileNameBase">
            <summary>
            Name of the UE4 enterprise project that contains all of the enterprise code, config files and other files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.IntermediateProjectFilesPath">
            <summary>
            When ProjectsAreIntermediate is true, this is the directory to store generated project files
            @todo projectfiles: Ideally, projects for game modules/targets would be created in the game's Intermediate folder!
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.ProjectTimestampFile">
            <summary>
            Path to timestamp file, recording when was the last time projects were created.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.NewLine">
            <summary>
            Global static new line string used by ProjectFileGenerator to generate project files.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bGatherThirdPartySource">
            <summary>
            If true, we'll parse subdirectories of third-party projects to locate source and header files to include in the
            generated projects.  This can make the generated projects quite a bit bigger, but makes it easier to open files
            directly from the IDE.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.AllowDotNetCoreProjects">
            <summary>
            Indicates whether we should process dot net core based C# projects
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.MasterProjectName">
            <summary>
            Name of the master project file (e.g. base file name for the solution file for Visual Studio, or the Xcode project file on Mac)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.bMasterProjectNameFromFolder">
            <summary>
            If true, sets the master project name according to the name of the folder it's in
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.ModuleToProjectFileMap">
            <summary>
            Maps all module names that were included in generated project files, to actual project file objects.
            @todo projectfiles: Nasty global static list.  This is only really used for IntelliSense, and to avoid extra folder searches for projects we've already cached source files for.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.OnlyGameProject">
            <summary>
            If generating project files for a single project, the path to its .uproject file.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ProjectFileGenerator.OnlyGenerateIntelliSenseDataForProject">
            <summary>
            When generating IntelliSense data, we may want to only generate data for a specific project file, even if other targets make use of modules
            in this project file.  This is useful to prevent unusual or hacky global definitions from Programs affecting the Editor/Engine modules.  We
            always want the most common and useful definitions to be set when working with solutions with many modules.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ProjectFileGenerator.ProjectFileExtension">
            <summary>
            File extension for project files we'll be generating (e.g. ".vcxproj")
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.ShouldGenerateIntelliSenseData">
            <summary>
            True if we should include IntelliSense data in the generated project files when possible
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Default constructor.
            </summary>
            <param name="InOnlyGameProject">The project file passed in on the command line</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddAutomationModules(System.Collections.Generic.List{Tools.DotNETCommon.FileReference},UnrealBuildTool.MasterProjectFolder)">
            <summary>
            Adds all .automation.csproj files to the solution.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.DiscoverCSharpProgramProjects(UnrealBuildTool.MasterProjectFolder)">
            <summary>
            Finds all csproj within Engine/Source/Programs, and add them if their UE4CSharp.prog file exists.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.FindGameProjects">
            <summary>
            Finds the game projects that we're generating project files for
            </summary>
            <returns>List of project files</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.ShouldGenerateProject(Tools.DotNETCommon.FileReference)">
            <summary>
            Determines if we should generate IDE project files for for the given project
            </summary>
            <param name="ProjectFile">The project to check</param>
            <returns>True to generate a project, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.GetPreferredSourceCodeAccessor(Tools.DotNETCommon.FileReference,UnrealBuildTool.ProjectFileFormat@)">
            <summary>
            Gets the user's preferred IDE from their editor settings
            </summary>
            <param name="ProjectFile">Project file being built</param>
            <param name="Format">Preferred format for the project being built</param>
            <returns>True if a preferred IDE was set, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.GenerateProjectFiles(System.String[])">
            <summary>
            Generates a Visual Studio solution file and Visual C++ project files for all known engine and game targets.
            Does not actually build anything.
            </summary>
            <param name="Arguments">Command-line arguments</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddUBTConfigFilesToEngineProject(UnrealBuildTool.ProjectFile)">
            <summary>
            Adds detected UBT configuration files (BuildConfiguration.xml) to engine project.
            </summary>
            <param name="EngineProject">Engine project to add files to.</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.CleanProjectFiles(Tools.DotNETCommon.DirectoryReference,System.String,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Clean project files
            </summary>
            <param name="InMasterProjectDirectory">The master project directory</param>
            <param name="InMasterProjectName">The name of the master project</param>
            <param name="InIntermediateProjectFilesDirectory">The intermediate path of project files</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.ConfigureProjectFileGeneration(System.String[],System.Boolean@)">
            <summary>
            Configures project generator based on command-line options
            </summary>
            <param name="Arguments">Arguments passed into the program</param>
            <param name="IncludeAllPlatforms">True if all platforms should be included</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddAllGameProjects(System.Collections.Generic.Dictionary{Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.ProjectFile},System.String,UnrealBuildTool.MasterProjectFolder)">
            <summary>
            Adds all game project files, including target projects and config files
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddEngineLocalizationFiles(UnrealBuildTool.ProjectFile)">
            Adds all engine localization text files to the specified project
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddEngineTemplateFiles(UnrealBuildTool.ProjectFile)">
            Adds all engine template text files to the specified project
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddEngineConfigFiles(UnrealBuildTool.ProjectFile)">
            Adds all engine config files to the specified project
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddEngineExtrasFiles(UnrealBuildTool.ProjectFile)">
            Adds all engine extras files to the specified project
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddUnrealHeaderToolConfigFiles(UnrealBuildTool.ProjectFile)">
            Adds UnrealHeaderTool config files to the specified project
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.DiscoverExtraPlugins(System.Collections.Generic.List{Tools.DotNETCommon.FileReference})">
            <summary>
            Finds any additional plugin files.
            </summary>
            <returns>List of additional plugin files</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.DiscoverModules(System.Collections.Generic.List{Tools.DotNETCommon.FileReference})">
            <summary>
            Finds all module files (filtering by platform)
            </summary>
            <returns>Filtered list of module files</returns>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.NoRedistFolders">
            <summary>
            List of non-redistributable folders
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.IsNoRedistModule(Tools.DotNETCommon.FileReference)">
            <summary>
            Checks if a module is in a non-redistributable folder
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.DiscoverTargets(System.Collections.Generic.List{Tools.DotNETCommon.FileReference})">
            <summary>
            Finds all target files (filtering by platform)
            </summary>
            <returns>Filtered list of target files</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.EliminateRedundantMasterProjectSubFolders(UnrealBuildTool.MasterProjectFolder,System.String)">
            <summary>
            Recursively collapses all sub-folders that are redundant.  Should only be called after we're done adding
            files and projects to the master project.
            </summary>
            <param name="Folder">The folder whose sub-folders we should potentially collapse into</param>
            <param name="ParentMasterProjectFolderPath"></param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.Validate(UnrealBuildTool.MasterProjectFolder,System.String)">
            <summary>
            Validate the specified Folder. Default implementation requires
            for project file names to be unique!
            </summary>
            <param name="Folder">Folder.</param>
            <param name="MasterProjectFolderPath">Parent master project folder path.</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddUnrealBuildToolProject(UnrealBuildTool.MasterProjectFolder)">
            <summary>
            Adds UnrealBuildTool to the master project
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddSimpleCSharpProject(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Adds a C# project to the master project
            </summary>
            <param name="ProjectName">Name of project file to add</param>
            <param name="bShouldBuildForAllSolutionTargets"></param>
            <param name="bForceDevelopmentConfiguration"></param>
            <param name="bShouldBuildByDefaultForSolutionTargets"></param>
            <returns>ProjectFile if the operation was successful, otherwise null.</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.CheckRegistryKey(Microsoft.Win32.RegistryKey,System.String)">
            <summary>
            Check the registry for MVC3 project support
            </summary>
            <param name="RootKey"></param>
            <param name="VisualStudioVersion"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.CheckVisualStudioExtensionPackage(System.String,System.String,System.String)">
            <summary>
            Check to see if a Visual Studio Extension is installed
            </summary>
            <param name="VisualStudioFolder"></param>
            <param name="VisualStudioVersion"></param>
            <param name="Extension"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddEngineProgramConfigFiles(System.Collections.Generic.Dictionary{Tools.DotNETCommon.FileReference,UnrealBuildTool.ProjectFile})">
            <summary>
            Adds all of the config files for program targets to their project files
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.GenerateIntelliSenseData(System.String[],System.Collections.Generic.List{System.Tuple{UnrealBuildTool.ProjectFile,UnrealBuildTool.ProjectTarget}})">
            <summary>
            Generates data for IntelliSense (compile definitions, include paths)
            </summary>
            <param name="Arguments">Incoming command-line arguments to UBT</param>
            <param name="Targets">Targets to build for intellisense</param>
            <return>Whether the process was successful or not</return>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.SetupSupportedPlatformsAndConfigurations(System.Boolean,System.String@)">
            <summary>
            Selects which platforms and build configurations we want in the project file
            </summary>
            <param name="IncludeAllPlatforms">True if we should include ALL platforms that are supported on this machine.  Otherwise, only desktop platforms will be included.</param>
            <param name="SupportedPlatformNames">Output string for supported platforms, returned as comma-separated values.</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.IsValidDesktopPlatform(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Is this a valid platform. Used primarily for Installed vs non-Installed builds.
            </summary>
            <param name="InPlatform"></param>
            <returns>true if valid, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.FindGameContainingFile(System.Collections.Generic.List{Tools.DotNETCommon.FileReference},Tools.DotNETCommon.FileReference)">
            <summary>
            Find the game which contains a given input file.
            </summary>
            <param name="AllGames">All game folders</param>
            <param name="File">Full path of the file to search for</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddProjectsForAllModules(System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.Dictionary{Tools.DotNETCommon.FileReference,UnrealBuildTool.ProjectFile},System.Collections.Generic.Dictionary{Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.ProjectFile},System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Boolean)">
            <summary>
            Finds all modules and code files, given a list of games to process
            </summary>
            <param name="AllGames">All game folders</param>
            <param name="ProgramProjects">All program projects</param>
            <param name="ModProjects">All mod projects</param>
            <param name="AllModuleFiles">List of *.Build.cs files for all engine programs and games</param>
            <param name="bGatherThirdPartySource">True to gather source code from third party projects too</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddProjectsForAllTargets(System.Collections.Generic.List{Tools.DotNETCommon.FileReference},UnrealBuildTool.ProjectFile@,UnrealBuildTool.ProjectFile@,System.Collections.Generic.Dictionary{Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.ProjectFile}@,System.Collections.Generic.Dictionary{Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.ProjectFile}@,System.Collections.Generic.Dictionary{Tools.DotNETCommon.FileReference,UnrealBuildTool.ProjectFile}@,System.Collections.Generic.Dictionary{Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.ProjectFile}@,System.Collections.Generic.Dictionary{Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.ProjectFile}@)">
            <summary>
            Creates project entries for all known targets (*.Target.cs files)
            </summary>
            <param name="AllGames">All game folders</param>
            <param name="EngineProject">The engine project we created</param>
            <param name="EnterpriseProject">The enterprise project we created</param>
            <param name="GameProjects">Map of game folder name to all of the game projects we created</param>
            <param name="ModProjects">Map of mod folder name to all the mod projects we created</param>
            <param name="ProgramProjects">Map of program names to all of the program projects we created</param>
            <param name="TemplateGameProjects">Set of template game projects we found.  These will also be in the GameProjects map</param>
            <param name="SampleGameProjects">Set of sample game projects that were found</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddEngineShaderSource(UnrealBuildTool.ProjectFile)">
            Adds shader source code to the specified project
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddEngineBuildFiles(UnrealBuildTool.ProjectFile)">
            Adds engine build infrastructure files to the specified project
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddEngineDocumentation(UnrealBuildTool.ProjectFile)">
            Adds engine documentation to the specified project
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.FindOrAddProject(Tools.DotNETCommon.FileReference,System.Boolean,System.Boolean@)">
            <summary>
            Adds a new project file and returns an object that represents that project file (or if the project file is already known, returns that instead.)
            </summary>
            <param name="FilePath">Full path to the project file</param>
            <param name="IncludeInGeneratedProjects">True if this project should be included in the set of generated projects.  Only matters when actually generating project files.</param>
            <param name="bAlreadyExisted">True if we already had this project file</param>
            <returns>Object that represents this project file in Unreal Build Tool</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AllocateProjectFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Allocates a generator-specific project file object
            </summary>
            <param name="InitFilePath">Path to the project file</param>
            <returns>The newly allocated project file object</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AllocateMasterProjectFolder(UnrealBuildTool.ProjectFileGenerator,System.String)">
            <summary>
            Allocates a generator-specific master project folder object
            </summary>
            <param name="OwnerProjectFileGenerator">Project file generator that owns this object</param>
            <param name="FolderName">Name for this folder</param>
            <returns>The newly allocated project folder object</returns>
        </member>
        <member name="P:UnrealBuildTool.ProjectFileGenerator.AllProjectFiles">
            <summary>
            Returns a list of all the known project files
            </summary>
            <returns>Project file list</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.WriteProjectFiles">
            <summary>
            Writes the project files to disk
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.WriteMasterProjectFile(UnrealBuildTool.ProjectFile)">
            <summary>
            Writes the master project file (e.g. Visual Studio Solution file)
            </summary>
            <param name="UBTProject">The UnrealBuildTool project</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.WriteFileIfChanged(System.String,System.String,System.Text.Encoding)">
            <summary>
            Writes the specified string content to a file.  Before writing to the file, it loads the existing file (if present) to see if the contents have changed
            </summary>
            <param name="FileName">File to write</param>
            <param name="NewFileContents">File content</param>
            <param name="InEncoding"></param>
            <returns>True if the file was saved, or if it didn't need to be overwritten because the content was unchanged</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileGenerator.AddExistingProjectFile(UnrealBuildTool.ProjectFile,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform},System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration})">
            <summary>
            Adds the given project to the OtherProjects list
            </summary>
            <param name="InProject">The project to add</param>
            <param name="bNeedsAllPlatformAndConfigurations"></param>
            <param name="bForceDevelopmentConfiguration"></param>
            <param name="bProjectDeploys"></param>
            <param name="InSupportedPlatforms"></param>
            <param name="InSupportedConfigurations"></param>
            <returns>True if successful</returns>
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.DefaultProject">
            The default project to be built for the solution.
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.UBTProject">
            The project for UnrealBuildTool.  Note that when generating project files for installed builds, we won't have
            an UnrealBuildTool project at all.
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.SupportedPlatforms">
            List of platforms that we'll support in the project files
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.SupportedConfigurations">
            List of build configurations that we'll support in the project files
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.ProjectFileMap">
            Map of project file names to their project files.  This includes every single project file in memory or otherwise that
            we know about so far.  Note that when generating project files, this map may even include project files that we won't
            be including in the generated projects.
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.GeneratedProjectFiles">
            List of project files that we'll be generating
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.OtherProjectFiles">
            List of other project files that we want to include in a generated solution file, even though we
            aren't generating them ourselves.  Note that these may *not* always be C++ project files (e.g. C#)
        </member>
        <member name="F:UnrealBuildTool.ProjectFileGenerator.RootFolder">
            List of top-level folders in the master project file
        </member>
        <member name="T:UnrealBuildTool.ProjectFileComparer">
            <summary>
            Helper class used for comparing the existing and generated project files.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileComparer.CanIgnoreWhitespace(System.Char)">
            <summary>
            Used by CompareOrdinalIgnoreWhitespaceAndCase to determine if a whitespace can be ignored.
            </summary>
            <param name="Whitespace">Whitespace character.</param>
            <returns>true if the character can be ignored, false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileComparer.CompareOrdinalIgnoreWhitespaceAndCase(System.String,System.String)">
            <summary>
            Compares two project files ignoring whitespaces, case and GUIDs.
            </summary>
            <remarks>
            Compares two specified String objects by evaluating the numeric values of the corresponding Char objects in each string.
            Only space and tabulation characters are ignored. Ignores leading whitespaces at the beginning of each line and 
            differences in whitespace sequences between matching non-whitespace sub-strings.
            </remarks>
            <param name="StrA">The first string to compare.</param>
            <param name="StrB">The second string to compare. </param>
            <returns>An integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileComparer.CompareOrdinalIgnoreCase(System.String,System.String)">
            <summary>
            Compares two project files ignoring case and GUIDs.
            </summary>
            <param name="StrA">The first string to compare.</param>
            <param name="StrB">The second string to compare. </param>
            <returns>An integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectFileComparer.CompareOrdinalIgnoreCase(System.String,System.String,System.Boolean)">
            <summary>
            Compares two project files ignoring case and GUIDs.
            </summary>
            <see cref="M:UnrealBuildTool.ProjectFileComparer.CompareOrdinalIgnoreWhitespaceAndCase(System.String,System.String)"/>
            <param name="StrA">The first string to compare.</param>
            <param name="StrB">The second string to compare. </param>
            <param name="bIgnoreWhitespace">True if whitsapces should be ignored.</param>
            <returns>An integer that indicates the lexical relationship between the two comparands.</returns>
        </member>
        <member name="T:UnrealBuildTool.QMakefileFolder">
            <summary>
            Represents a folder within the master project (e.g. Visual Studio solution)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.QMakefileFolder.#ctor(UnrealBuildTool.ProjectFileGenerator,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:UnrealBuildTool.QMakefileGenerator">
            <summary>
            QMakefile project file generator implementation
            </summary>
        </member>
        <member name="M:UnrealBuildTool.QMakefileGenerator.#ctor(Tools.DotNETCommon.FileReference)">
            Default constructor
        </member>
        <member name="P:UnrealBuildTool.QMakefileGenerator.ProjectFileExtension">
            File extension for project files we'll be generating (e.g. ".vcxproj")
        </member>
        <member name="M:UnrealBuildTool.QMakefileGenerator.SplitDefinitionAndValue(System.String,System.String@,System.String@)">
            <summary>
            Splits the definition text into macro name and value (if any).
            </summary>
            <param name="Definition">Definition text</param>
            <param name="Key">Out: The definition name</param>
            <param name="Value">Out: The definition value or null if it has none</param>
            <returns>Pair representing macro name and value.</returns>
        </member>
        <member name="M:UnrealBuildTool.QMakefileGenerator.AddIncludeDirectory(System.Collections.Generic.List{System.String}@,System.String,System.String)">
            Adds the include directory to the list, after converting it to relative to UE4 root
        </member>
        <member name="M:UnrealBuildTool.QMakefileGenerator.WriteProjectFiles">
            ProjectFileGenerator interface
        </member>
        <member name="M:UnrealBuildTool.QMakefileGenerator.AllocateMasterProjectFolder(UnrealBuildTool.ProjectFileGenerator,System.String)">
            ProjectFileGenerator interface
        </member>
        <member name="M:UnrealBuildTool.QMakefileGenerator.AllocateProjectFile(Tools.DotNETCommon.FileReference)">
            ProjectFileGenerator interface
            <summary>
            Allocates a generator-specific project file object
            </summary>
            <param name="InitFilePath">Path to the project file</param>
            <returns>The newly allocated project file object</returns>
        </member>
        <member name="M:UnrealBuildTool.QMakefileGenerator.CleanProjectFiles(Tools.DotNETCommon.DirectoryReference,System.String,Tools.DotNETCommon.DirectoryReference)">
            ProjectFileGenerator interface
        </member>
        <member name="F:UnrealBuildTool.MSBuildProjectFile.VCProjectFileVersionString">
            The project file version string
        </member>
        <member name="F:UnrealBuildTool.MSBuildProjectFile.StubProjectConfigurationName">
            The build configuration name to use for stub project configurations.  These are projects whose purpose
            is to make it easier for developers to find source files and to provide IntelliSense data for the module
            to Visual Studio
        </member>
        <member name="F:UnrealBuildTool.MSBuildProjectFile.StubProjectPlatformName">
            The name of the Visual C++ platform to use for stub project configurations
            NOTE: We always use Win32 for the stub project's platform, since that is guaranteed to be supported by Visual Studio
        </member>
        <member name="F:UnrealBuildTool.MSBuildProjectFile.ProjectConfigurationNameOverride">
            override project configuration name for platforms visual studio doesn't natively support
        </member>
        <member name="F:UnrealBuildTool.MSBuildProjectFile.ProjectPlatformNameOverride">
            override project platform for platforms visual studio doesn't natively support
        </member>
        <member name="P:UnrealBuildTool.MSBuildProjectFile.ProjectTypeGUID">
            <summary>
            The Guid representing the project type e.g. C# or C++
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MSBuildProjectFile.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Constructs a new project file object
            </summary>
            <param name="InitFilePath">The path to the project file on disk</param>
        </member>
        <member name="M:UnrealBuildTool.MSBuildProjectFile.LoadGUIDFromExistingProject">
            <summary>
            Attempts to load the project's GUID from an existing project file on disk
            </summary>
        </member>
        <member name="M:UnrealBuildTool.MSBuildProjectFile.MakeProjectPlatformAndConfigurationNames(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,System.String@,System.String@)">
            <summary>
            Given a target platform and configuration, generates a platform and configuration name string to use in Visual Studio projects.
            Unlike with solution configurations, Visual Studio project configurations only support certain types of platforms, so we'll
            generate a configuration name that has the platform "built in", and use a default platform type
            </summary>
            <param name="Platform">Actual platform</param>
            <param name="Configuration">Actual configuration</param>
            <param name="TargetConfigurationName">The configuration name from the target rules, or null if we don't have one</param>
            <param name="ProjectPlatformName">Name of platform string to use for Visual Studio project</param>
            <param name="ProjectConfigurationName">Name of configuration string to use for Visual Studio project</param>
        </member>
        <member name="M:UnrealBuildTool.MSBuildProjectFile.IsValidProjectPlatformAndConfiguration(UnrealBuildTool.ProjectTarget,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Checks to see if the specified solution platform and configuration is able to map to this project
            </summary>
            <param name="ProjectTarget">The target that we're checking for a valid platform/config combination</param>
            <param name="Platform">Platform</param>
            <param name="Configuration">Configuration</param>
            <returns>True if this is a valid combination for this project, otherwise false</returns>
        </member>
        <member name="M:UnrealBuildTool.MSBuildProjectFile.EscapeFileName(System.String)">
            <summary>
            Escapes characters in a filename so they can be stored in an XML attribute
            </summary>
            <param name="FileName">The filename to escape</param>
            <returns>The escaped filename</returns>
        </member>
        <member name="P:UnrealBuildTool.MSBuildProjectFile.ProjectGUID">
            <summary>
            GUID for this Visual C++ project file
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFile.#ctor(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,UnrealBuildTool.VCProjectFileFormat,System.Boolean,System.Boolean,System.String)">
            <summary>
            Constructs a new project file object
            </summary>
            <param name="InFilePath">The path to the project file on disk</param>
            <param name="InOnlyGameProject"></param>
            <param name="InProjectFileFormat">Visual C++ project file version</param>
            <param name="bUseFastPDB">If true, adds the -FastPDB argument to build command lines</param>
            <param name="bUsePerFileIntellisense">If true, generates per-file intellisense data</param>
            <param name="BuildToolOverride">Optional arguments to pass to UBT when building</param>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFile.MakeProjectPlatformAndConfigurationNames(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,System.String@,System.String@)">
            <summary>
            Given a target platform and configuration, generates a platform and configuration name string to use in Visual Studio projects.
            Unlike with solution configurations, Visual Studio project configurations only support certain types of platforms, so we'll
            generate a configuration name that has the platform "built in", and use a default platform type
            </summary>
            <param name="Platform">Actual platform</param>
            <param name="Configuration">Actual configuration</param>
            <param name="TargetConfigurationName">The configuration name from the target rules, or null if we don't have one</param>
            <param name="ProjectPlatformName">Name of platform string to use for Visual Studio project</param>
            <param name="ProjectConfigurationName">Name of configuration string to use for Visual Studio project</param>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFile.WriteDebugProjectFiles(System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform},System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration})">
            <summary>
            If found writes a debug project file to disk
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFile.WriteProjectFile(System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform},System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration})">
            Implements Project interface
        </member>
        <member name="M:UnrealBuildTool.VCProjectFile.GetVCFileType(System.String)">
            <summary>
            Returns the VCFileType element name based on the file path.
            </summary>
            <param name="Path">The path of the file to return type for.</param>
            <returns>Name of the element in MSBuild project file for this file.</returns>
        </member>
        <member name="T:UnrealBuildTool.VCSharpProjectFile">
            <summary>
            A Visual C# project.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.VCSharpProjectFile.ProjectTypeGUID">
            <summary>
            This is the GUID that Visual Studio uses to identify a C# project file in the solution
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCSharpProjectFile.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Constructs a new project file object
            </summary>
            <param name="InitFilePath">The path to the project file on disk</param>
        </member>
        <member name="M:UnrealBuildTool.VCSharpProjectFile.GetProjectInfo(UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Extract information from the csproj file based on the supplied configuration
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCSharpProjectFile.IsDotNETCoreProject">
            <summary>
            Determine if this project is a .NET Core project
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCSharpProjectFile.GetCSharpDependencies">
            <summary>
            Reads the list of dependencies from the specified project file.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCSharpProjectFile.AddDotNetAssemblyReference(System.String)">
            <summary>
            Adds a C# dot net (system) assembly reference to this project
            </summary>
            <param name="AssemblyReference">The full path to the assembly file on disk</param>
        </member>
        <member name="M:UnrealBuildTool.VCSharpProjectFile.AddAssemblyReference(Tools.DotNETCommon.FileReference)">
            <summary>
            Adds a C# assembly reference to this project, such as a third party assembly needed for this project to compile
            </summary>
            <param name="AssemblyReference">The full path to the assembly file on disk</param>
        </member>
        <member name="M:UnrealBuildTool.VCSharpProjectFile.MakeProjectPlatformAndConfigurationNames(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,System.String@,System.String@)">
            <summary>
            Given a target platform and configuration, generates a platform and configuration name string to use in Visual Studio projects.
            Unlike with solution configurations, Visual Studio project configurations only support certain types of platforms, so we'll
            generate a configuration name that has the platform "built in", and use a default platform type
            </summary>
            <param name="Platform">Actual platform</param>
            <param name="Configuration">Actual configuration</param>
            <param name="TargetConfigurationName">The configuration name from the target rules, or null if we don't have one</param>
            <param name="ProjectPlatformName">Name of platform string to use for Visual Studio project</param>
            <param name="ProjectConfigurationName">Name of configuration string to use for Visual Studio project</param>
        </member>
        <member name="M:UnrealBuildTool.VCSharpProjectFile.WriteProjectFile(System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform},System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration})">
            <summary>
            Basic csproj file support. Generates C# library project with one build config.
            </summary>
            <param name="InPlatforms">Not used.</param>
            <param name="InConfigurations">Not Used.</param>
            <returns>true if the opration was successful, false otherwise</returns>
        </member>
        <member name="F:UnrealBuildTool.VCSharpProjectFile.AssemblyReferences">
            Assemblies this project is dependent on
        </member>
        <member name="F:UnrealBuildTool.VCSharpProjectFile.DotNetAssemblyReferences">
            System assemblies this project is dependent on
        </member>
        <member name="F:UnrealBuildTool.VCSharpProjectFile.CachedProjectInfo">
            Cache of parsed info about this project
        </member>
        <member name="T:UnrealBuildTool.VisualStudioSolutionFolder">
            <summary>
            Represents a folder within the master project (e.g. Visual Studio solution)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VisualStudioSolutionFolder.#ctor(UnrealBuildTool.ProjectFileGenerator,System.String)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:UnrealBuildTool.VisualStudioSolutionFolder.FolderGUID">
            GUID for this folder
        </member>
        <member name="T:UnrealBuildTool.VCProjectFileGenerator">
            <summary>
            Visual C++ project file generator implementation
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.ProjectFileFormat">
            <summary>
            The version of Visual Studio to generate project files for.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.bWriteSolutionOptionFile">
            <summary>
            Whether to write a solution option (suo) file for the sln
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.bAddFastPDBToProjects">
            <summary>
            Whether to add the -FastPDB option to build command lines by default
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.bUsePerFileIntellisense">
            <summary>
            Whether to generate per-file intellisense data
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.bEditorDependsOnShaderCompileWorker">
            <summary>
            Whether to include a dependency on ShaderCompileWorker when generating project files for the editor.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.BuildToolOverride">
            <summary>
            Override for the build tool to use in generated projects. If the compiler version is specified on the command line, we use the same argument on the 
            command line for generated projects.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.#ctor(Tools.DotNETCommon.FileReference,UnrealBuildTool.VCProjectFileFormat,UnrealBuildTool.WindowsCompiler)">
            <summary>
            Default constructor
            </summary>
            <param name="InOnlyGameProject">The single project to generate project files for, or null</param>
            <param name="InProjectFileFormat">Override the project file format to use</param>
            <param name="InOverrideCompiler">Override the compiler version to use</param>
        </member>
        <member name="P:UnrealBuildTool.VCProjectFileGenerator.ProjectFileExtension">
            File extension for project files we'll be generating (e.g. ".vcxproj")
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.CleanProjectFiles(Tools.DotNETCommon.DirectoryReference,System.String,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.AllocateProjectFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Allocates a generator-specific project file object
            </summary>
            <param name="InitFilePath">Path to the project file</param>
            <returns>The newly allocated project file object</returns>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.AllocateMasterProjectFolder(UnrealBuildTool.ProjectFileGenerator,System.String)">
            ProjectFileGenerator interface
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.GetProjectFileToolVersionString(UnrealBuildTool.VCProjectFileFormat)">
            "4.0", "12.0", or "14.0", etc...
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.GetProjectFilePlatformToolsetVersionString(UnrealBuildTool.VCProjectFileFormat)">
            for instance: <PlatformToolset>v110</PlatformToolset>
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.DefaultPlatformName">
            This is the platform name that Visual Studio is always guaranteed to support.  We'll use this as
            a platform for any project configurations where our actual platform is not supported by the
            installed version of Visual Studio (e.g, "iOS")
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.DotNetPlatformName">
            The platform name that must be used for .NET projects
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.ConfigureProjectFileGeneration(System.String[],System.Boolean@)">
            <summary>
            Configures project generator based on command-line options
            </summary>
            <param name="Arguments">Arguments passed into the program</param>
            <param name="IncludeAllPlatforms">True if all platforms should be included</param>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.AddEngineExtrasFiles(UnrealBuildTool.ProjectFile)">
            <summary>
            Adds Extra files that are specific to Visual Studio projects
            </summary>
            <param name="EngineProject">Project to add files to</param>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.SetupSupportedPlatformsAndConfigurations(System.Boolean,System.String@)">
            <summary>
            Selects which platforms and build configurations we want in the project file
            </summary>
            <param name="IncludeAllPlatforms">True if we should include ALL platforms that are supported on this machine.  Otherwise, only desktop platforms will be included.</param>
            <param name="SupportedPlatformNames">Output string for supported platforms, returned as comma-separated values.</param>
        </member>
        <member name="T:UnrealBuildTool.VCProjectFileGenerator.VCSolutionConfigCombination">
            <summary>
            Used to sort VC solution config names along with the config and platform values
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.VCSolutionConfigCombination.VCSolutionConfigAndPlatformName">
            Visual Studio solution configuration name for this config+platform
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.VCSolutionConfigCombination.Configuration">
            Configuration name
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.VCSolutionConfigCombination.Platform">
            Platform name
        </member>
        <member name="F:UnrealBuildTool.VCProjectFileGenerator.VCSolutionConfigCombination.TargetConfigurationName">
            The target configuration name
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.MakeSolutionConfigurationName(UnrealBuildTool.UnrealTargetConfiguration,System.String)">
            <summary>
            Composes a string to use for the Visual Studio solution configuration, given a build configuration and target rules configuration name
            </summary>
            <param name="Configuration">The build configuration</param>
            <param name="TargetConfigurationName">The target rules configuration name</param>
            <returns>The generated solution configuration name</returns>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.WriteProjectFiles">
            <summary>
            Writes the project files to disk
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.VCProjectFileGenerator.CleanupStringForSCC(System.String)">
            <summary>
            Takes a string and "cleans it up" to make it parsable by the Visual Studio source control provider's file format
            </summary>
            <param name="Str">String to clean up</param>
            <returns>The cleaned up string</returns>
        </member>
        <member name="T:UnrealBuildTool.XcodeSourceFile">
            <summary>
            Info needed to make a file a member of specific group
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeSourceFile.#ctor(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:UnrealBuildTool.XcodeSourceFile.FileGuid">
            <summary>
            File Guid for use in Xcode project
            </summary>
        </member>
        <member name="P:UnrealBuildTool.XcodeSourceFile.FileRefGuid">
            <summary>
            File reference Guid for use in Xcode project
            </summary>
        </member>
        <member name="T:UnrealBuildTool.XcodeFileGroup">
            <summary>
            Represents a group of files shown in Xcode's project navigator as a folder
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.#ctor(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference)">
            <summary>
            Constructs a new project file object
            </summary>
            <param name="InitFilePath">The path to the project file on disk</param>
            <param name="InOnlyGameProject"></param>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.GetFileCategory(System.String)">
            <summary>
            Gets Xcode file category based on its extension
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.GetFileType(System.String)">
            <summary>
            Gets Xcode file type based on its extension
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.IsSourceCode(System.String)">
            <summary>
            Returns true if Extension is a known extension for files containing source code
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.FindGroupByAbsolutePath(System.Collections.Generic.Dictionary{System.String,UnrealBuildTool.XcodeFileGroup}@,System.String)">
            <summary>
            Returns a project navigator group to which the file should belong based on its path.
            Creates a group tree if it doesn't exist yet.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.ConvertPath(System.String)">
            <summary>
            Convert all paths to Apple/Unix format (with forward slashes)
            </summary>
            <param name="InPath">The path to convert</param>
            <returns>The normalized path</returns>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.AllocSourceFile(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Allocates a generator-specific source file object
            </summary>
            <param name="InitFilePath">Path to the source file on disk</param>
            <param name="InitProjectSubFolder">Optional sub-folder to put the file in.  If empty, this will be determined automatically from the file's path relative to the project file</param>
            <returns>The newly allocated source file object</returns>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.GenerateSectionsWithSourceFiles(System.Text.StringBuilder,System.Text.StringBuilder,System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Generates bodies of all sections that contain a list of source files plus a dictionary of project navigator groups.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFile.WriteProjectFile(System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform},System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration})">
            Implements Project interface
        </member>
        <member name="T:UnrealBuildTool.XcodeProjectFolder">
            <summary>
            Represents a folder within the master project (e.g. Visual Studio solution)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.XcodeProjectFileGenerator">
            <summary>
            Xcode project file generator implementation
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFileGenerator.MakeXcodeGuid">
            <summary>
            Make a random Guid string usable by Xcode (24 characters exactly)
            </summary>
        </member>
        <member name="P:UnrealBuildTool.XcodeProjectFileGenerator.ProjectFileExtension">
            File extension for project files we'll be generating (e.g. ".vcxproj")
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFileGenerator.CleanProjectFiles(Tools.DotNETCommon.DirectoryReference,System.String,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFileGenerator.AllocateProjectFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Allocates a generator-specific project file object
            </summary>
            <param name="InitFilePath">Path to the project file</param>
            <returns>The newly allocated project file object</returns>
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFileGenerator.AllocateMasterProjectFolder(UnrealBuildTool.ProjectFileGenerator,System.String)">
            ProjectFileGenerator interface
        </member>
        <member name="F:UnrealBuildTool.XcodeProjectFileGenerator.ProjectFilePlatform">
            Which platforms we should generate targets for
        </member>
        <member name="F:UnrealBuildTool.XcodeProjectFileGenerator.bGeneratingRunIOSProject">
            Should we generate a special project to use for iOS signing instead of a normal one
        </member>
        <member name="F:UnrealBuildTool.XcodeProjectFileGenerator.bGeneratingRunTVOSProject">
            Should we generate a special project to use for tvOS signing instead of a normal one
        </member>
        <member name="M:UnrealBuildTool.XcodeProjectFileGenerator.ConfigureProjectFileGeneration(System.String[],System.Boolean@)">
            <summary>
            Configures project generator based on command-line options
            </summary>
            <param name="Arguments">Arguments passed into the program</param>
            <param name="IncludeAllPlatforms">True if all platforms should be included</param>
        </member>
        <member name="T:UnrealBuildTool.BuildVersion">
            <summary>
            Holds information about the current engine version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.MajorVersion">
            <summary>
            The major engine version (4 for UE4)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.MinorVersion">
            <summary>
            The minor engine version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.PatchVersion">
            <summary>
            The hotfix/patch version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.Changelist">
            <summary>
            The changelist that the engine is being built from
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.CompatibleChangelist">
            <summary>
            The changelist that the engine maintains compatibility with
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.IsLicenseeVersion">
            <summary>
            Whether the changelist numbers are a licensee changelist
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.IsPromotedBuild">
            <summary>
            Whether the current build is a promoted build, that is, built strictly from a clean sync of the given changelist
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.BranchName">
            <summary>
            Name of the current branch, with '/' characters escaped as '+'
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildVersion.BuildId">
            <summary>
            The current build id. This will be generated automatically whenever engine binaries change if not set in the default Engine/Build/Build.version.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.BuildVersion.EffectiveCompatibleChangelist">
            <summary>
            Returns the value which can be used as the compatible changelist. Requires that the regular changelist is also set, and defaults to the 
            regular changelist if a specific compatible changelist is not set.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildVersion.ReadDefault">
            <summary>
            Reads the default build version, throwing an exception on error.
            </summary>
            <returns>New BuildVersion instance</returns>
        </member>
        <member name="M:UnrealBuildTool.BuildVersion.TryRead(Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildVersion@)">
            <summary>
            Try to read a version file from disk
            </summary>
            <param name="FileName">Path to the version file</param>
            <param name="Version">The version information</param>
            <returns>True if the version was read successfully, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.BuildVersion.GetDefaultFileName">
            <summary>
            Get the default path to the build.version file on disk
            </summary>
            <returns>Path to the Build.version file</returns>
        </member>
        <member name="M:UnrealBuildTool.BuildVersion.GetFileNameForTarget(Tools.DotNETCommon.DirectoryReference,System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String)">
            <summary>
            Get the default path for a target's version file.
            </summary>
            <returns>Path to the target's version file</returns>
        </member>
        <member name="M:UnrealBuildTool.BuildVersion.TryParse(Tools.DotNETCommon.JsonObject,UnrealBuildTool.BuildVersion@)">
            <summary>
            Parses a build version from a JsonObject
            </summary>
            <param name="Object">The object to read from</param>
            <param name="Version">The resulting version field</param>
            <returns>True if the build version could be read, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.BuildVersion.Write(Tools.DotNETCommon.FileReference)">
            <summary>
            Exports this object as Json
            </summary>
            <param name="FileName">The filename to write to</param>
        </member>
        <member name="M:UnrealBuildTool.BuildVersion.Write(System.IO.TextWriter)">
            <summary>
            Exports this object as Json
            </summary>
            <param name="Writer">Writer for output text</param>
        </member>
        <member name="M:UnrealBuildTool.BuildVersion.WriteProperties(Tools.DotNETCommon.JsonWriter)">
            <summary>
            Exports this object as Json
            </summary>
            <param name="Writer">The json writer to receive the version settings</param>
            <returns>True if the build version could be read, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyBuildVersion">
            <summary>
            Read-only wrapper for a BuildVersion instance
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyBuildVersion.#ctor(UnrealBuildTool.BuildVersion)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The writable build version instance</param>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyBuildVersion.MajorVersion">
            <summary>
            Accessors for fields on the inner BuildVersion instance
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CppPlatform">
            <summary>
            The platforms that may be compilation targets for C++ files.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CppConfiguration">
            <summary>
            Compiler configuration. This controls whether to use define debug macros and other compiler settings. Note that optimization level should be based on the bOptimizeCode variable rather than
            this setting, so it can be modified on a per-module basis without introducing an incompatibility between object files or PCHs.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CSharpTargetConfiguration">
            <summary>
            The optimization level that may be compilation targets for C# files.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.PrecompiledHeaderAction">
            <summary>
            The possible interactions between a precompiled header and a C++ file being compiled.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CPPOutput">
            <summary>
            Encapsulates the compilation output of compiling a set of C++ files.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CppCompileEnvironment">
            <summary>
            Encapsulates the environment that a C++ file is compiled in.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.Platform">
            <summary>
            The platform to be compiled/linked for.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.Configuration">
            <summary>
            The configuration to be compiled/linked for.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.Architecture">
            <summary>
            The architecture that is being compiled/linked (empty string by default)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.LocalShadowDirectory">
            <summary>
            The directory to shadow source files in for syncing to remote compile servers
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.PrecompiledHeaderIncludeFilename">
            <summary>
            The name of the header file which is precompiled.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.PrecompiledHeaderAction">
            <summary>
            Whether the compilation should create, use, or do nothing with the precompiled header.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bUseRTTI">
            <summary>
            Use run time type information
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bUseInlining">
            <summary>
            Enable inlining.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bUseAVX">
            <summary>
            Use AVX instructions
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bEnableBufferSecurityChecks">
            <summary>
            Enable buffer security checks.   This should usually be enabled as it prevents severe security risks.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bFasterWithoutUnity">
            <summary>
            If true and unity builds are enabled, this module will build without unity.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.MinSourceFilesForUnityBuildOverride">
            <summary>
            The number of source files in this module before unity build will be activated for that module.  If set to
            anything besides -1, will override the default setting which is controlled by MinGameModuleSourceFilesForUnityBuild
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.MinFilesUsingPrecompiledHeaderOverride">
            <summary>
            The minimum number of files that must use a pre-compiled header before it will be created and used.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bBuildLocallyWithSNDBS">
            <summary>
            Module uses a #import so must be built locally when compiling with SN-DBS
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bEnableExceptions">
            <summary>
            Enable exception handling
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bEnableObjCExceptions">
            <summary>
            Enable objective C exception handling
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bEnableShadowVariableWarnings">
            <summary>
            Whether to warn about the use of shadow variables
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bShadowVariableWarningsAsErrors">
            <summary>
            Whether to treat shadow variable warnings as errors.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bEnableUndefinedIdentifierWarnings">
            <summary>
            Whether to warn about the use of undefined identifiers in #if expressions
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bUndefinedIdentifierWarningsAsErrors">
            <summary>
            Whether to treat undefined identifier warnings as errors.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bOptimizeCode">
            <summary>
            True if compiler optimizations should be enabled. This setting is distinct from the configuration (see CPPTargetConfiguration).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bOptimizeForSize">
            <summary>
            Whether to optimize for minimal code size
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bCreateDebugInfo">
            <summary>
            True if debug info should be created.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bIsBuildingLibrary">
            <summary>
            True if we're compiling .cpp files that will go into a library (.lib file)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bIsBuildingDLL">
            <summary>
            True if we're compiling a DLL
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bUseStaticCRT">
            <summary>
            Whether we should compile using the statically-linked CRT. This is not widely supported for the whole engine, but is required for programs that need to run without dependencies.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bUseDebugCRT">
            <summary>
            Whether to use the debug CRT in debug configurations
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bOmitFramePointers">
            <summary>
            Whether to omit frame pointers or not. Disabling is useful for e.g. memory profiling on the PC
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bEnableOSX109Support">
            <summary>
            Whether we should compile with support for OS X 10.9 Mavericks. Used for some tools that we need to be compatible with this version of OS X.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bUsePDBFiles">
            <summary>
            Whether PDB files should be used for Visual C++ builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bSupportEditAndContinue">
            <summary>
            Whether to support edit and continue.  Only works on Microsoft compilers in 32-bit compiles.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bUseIncrementalLinking">
            <summary>
            Whether to use incremental linking or not.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bAllowLTCG">
            <summary>
            Whether to allow the use of LTCG (link time code generation) 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bPGOProfile">
            <summary>
            Whether to enable Profile Guided Optimization (PGO) instrumentation in this build.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bPGOOptimize">
            <summary>
            Whether to optimize this build with Profile Guided Optimization (PGO).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.PGODirectory">
            <summary>
            Platform specific directory where PGO profiling data is stored.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.PGOFilenamePrefix">
            <summary>
            Platform specific filename where PGO profiling data is saved.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bPrintTimingInfo">
            <summary>
            Whether to log detailed timing info from the compiler
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bAllowRemotelyCompiledPCHs">
            <summary>
            When enabled, allows XGE to compile pre-compiled header files on remote machines.  Otherwise, PCHs are always generated locally.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.IncludePaths">
            <summary>
            The include paths to look for included files in.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.ForceIncludeFiles">
            <summary>
            List of header files to force include
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.Definitions">
            <summary>
            The C++ preprocessor definitions to use.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.AdditionalArguments">
            <summary>
            Additional arguments to pass to the compiler.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.AdditionalFrameworks">
            <summary>
            A list of additional frameworks whose include paths are needed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.PrecompiledHeaderFile">
            <summary>
            The file containing the precompiled header data.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.Headers">
            <summary>
            Header file cache for this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bHackHeaderGenerator">
            <summary>
            Whether or not UHT is being built
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppCompileEnvironment.bHideSymbolsByDefault">
            <summary>
            Whether to hide symbols by default
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CppCompileEnvironment.#ctor(UnrealBuildTool.CppPlatform,UnrealBuildTool.CppConfiguration,System.String,UnrealBuildTool.CPPHeaders)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CppCompileEnvironment.#ctor(UnrealBuildTool.CppCompileEnvironment)">
            <summary>
            Copy constructor.
            </summary>
            <param name="Other">Environment to copy settings from</param>
        </member>
        <member name="T:UnrealBuildTool.DataDrivenPlatformInfo">
            <summary>
             Class to manage looking up data driven platform information (loaded from .ini files instead of in code)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.DataDrivenPlatformInfo.ConfigDataDrivenPlatformInfo">
            <summary>
            All data driven information about a platform
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DataDrivenPlatformInfo.ConfigDataDrivenPlatformInfo.bIsConfidential">
            <summary>
            Is the platform a confidential ("console-style") platform
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DataDrivenPlatformInfo.ConfigDataDrivenPlatformInfo.IniParent">
            <summary>
            Does the ini need to inherit from another platform's inis?
            </summary>
        </member>
        <member name="M:UnrealBuildTool.DataDrivenPlatformInfo.ConfigDataDrivenPlatformInfo.InitFromConfig(UnrealBuildTool.ConfigFile)">
            <summary>
            Construct an info object from a config file
            </summary>
            <param name="Config"></param>
        </member>
        <member name="M:UnrealBuildTool.DataDrivenPlatformInfo.GetDataDrivenInfoForPlatform(System.String)">
            <summary>
            Return the data driven info for the given platform name 
            </summary>
            <param name="PlatformName"></param>
            <returns></returns>
        </member>
        <member name="T:UnrealBuildTool.ExceptionUtils">
            <summary>
            Methods for adding context information to exceptions
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ExceptionUtils.ContextEntryName">
            <summary>
            Unique key name for adding context to exceptions thrown inside Epic apps
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ExceptionUtils.AddContext(System.Exception,System.String)">
            <summary>
            Adds a context message to a list stored on the given exception. Intended to be used in situations where supplying additional context
            for an exception is valuable, but wrapping it would remove information.
            </summary>
            <param name="Ex">The exception that was thrown</param>
            <param name="Message">Message to append to the context list</param>
        </member>
        <member name="M:UnrealBuildTool.ExceptionUtils.AddContext(System.Exception,System.String,System.Object[])">
            <summary>
            Adds a context message to a list stored on the given exception. Intended to be used in situations where supplying additional context
            for an exception is valuable, but wrapping it would remove information.
            </summary>
            <param name="Ex">The exception that was thrown</param>
            <param name="Format">Formatting string for </param>
            <param name="Args">Message to append to the context list</param>
        </member>
        <member name="M:UnrealBuildTool.ExceptionUtils.GetContext(System.Exception)">
            <summary>
            Enumerates the context lines from the given exception
            </summary>
            <param name="Ex">The exception to retrieve context from</param>
            <returns>Sequence of context lines</returns>
        </member>
        <member name="M:UnrealBuildTool.ExceptionUtils.PrintExceptionInfo(System.Exception,System.String)">
            <summary>
            Prints a summary of the given exception to the console, and writes detailed information to the log
            </summary>
            <param name="Ex">The exception which has occurred</param>
            <param name="LogFileName">Log filename to reference for more detailed information</param>
        </member>
        <member name="M:UnrealBuildTool.ExceptionUtils.PrintExceptionInfo(System.Exception,System.String,System.Action{System.String})">
            <summary>
            Prints a summary of the given exception to the console, and writes detailed information to the log
            </summary>
            <param name="Ex">The exception which has occurred</param>
            <param name="LogFileName">Log filename to reference for more detailed information</param>
            <param name="LogAll">Output function for all verbosity</param>
        </member>
        <member name="M:UnrealBuildTool.ExceptionUtils.PrintExceptionInfo(System.Exception,System.String,System.Action{System.String},System.Action{System.String})">
            <summary>
            Prints a summary of the given exception to the console, and writes detailed information to the log
            </summary>
            <param name="Ex">The exception which has occurred</param>
            <param name="LogFileName">Log filename to reference for more detailed information</param>
            <param name="LogNormal">Basic output function</param>
            <param name="LogVerbose">Verbose output function</param>
        </member>
        <member name="T:UnrealBuildTool.ParallelExecutor">
            <summary>
            This executor is similar to LocalExecutor, but uses p/invoke on Windows to ensure that child processes are started at a lower priority and are terminated when the parent process terminates.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ParallelExecutor.ProcessorCountMultiplier">
            <summary>
            Processor count multiplier for local execution. Can be below 1 to reserve CPU for other tasks.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ParallelExecutor.MaxProcessorCount">
            <summary>
            Maximum processor count for local execution. 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ParallelExecutor.bStopCompilationAfterErrors">
            <summary>
            When enabled, will stop compiling targets after a compile error occurs.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ParallelExecutor.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ParallelExecutor.Name">
            <summary>
            Returns the name of this executor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ParallelExecutor.IsAvailable">
            <summary>
            Checks whether the parallel executor can be used
            </summary>
            <returns>True if the parallel executor can be used</returns>
        </member>
        <member name="M:UnrealBuildTool.ParallelExecutor.ExecuteActions(System.Collections.Generic.List{UnrealBuildTool.Action},System.Boolean)">
            <summary>
            Executes the specified actions locally.
            </summary>
            <returns>True if all the tasks successfully executed, or false if any of them failed.</returns>
        </member>
        <member name="M:UnrealBuildTool.ParallelExecutor.ExecuteAction(Tools.DotNETCommon.ManagedProcessGroup,UnrealBuildTool.ParallelExecutor.BuildAction,System.Collections.Generic.List{UnrealBuildTool.ParallelExecutor.BuildAction},System.Threading.AutoResetEvent)">
            <summary>
            Execute an individual action
            </summary>
            <param name="ProcessGroup">The process group</param>
            <param name="Action">The action to execute</param>
            <param name="CompletedActions">On completion, the list to add the completed action to</param>
            <param name="CompletedEvent">Event to set once an event is complete</param>
        </member>
        <member name="M:UnrealBuildTool.ParallelExecutor.RecursiveIncDependents(UnrealBuildTool.ParallelExecutor.BuildAction,System.Collections.Generic.HashSet{UnrealBuildTool.ParallelExecutor.BuildAction})">
            <summary>
            Increment the number of dependants of an action, recursively
            </summary>
            <param name="Action">The action to update</param>
            <param name="VisitedActions">Set of visited actions</param>
        </member>
        <member name="T:UnrealBuildTool.ModuleManifest">
            <summary>
            Stores the version (or a unique build ID) for the modules for a target in a certain folder.
            
            This allows the runtime to identify which modules are used for which files, and which version they're at. This prevents stale binaries from being
            loaded by the runtime when making a local unversioned build, and allows faster incremental builds than compiling the build changelist into every 
            module when making versioned builds.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleManifest.#ctor(System.String)">
            <summary>
            Constructs the module map with the given changelist
            </summary>
            <param name="InBuildId">The unique build id</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleManifest.Include(UnrealBuildTool.ModuleManifest)">
            <summary>
            Merge another manifest into this one
            </summary>
            <param name="Other">The manifest to merge in</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleManifest.GetStandardFileName(System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,System.Boolean)">
            <summary>
            Gets the standard path for an manifest
            </summary>
            <param name="AppName">The modular app name being built</param>
            <param name="Configuration">The target configuration</param>
            <param name="Platform">The target platform</param>
            <param name="BuildArchitecture">The architecture of the target platform</param>
            <param name="bIsGameDirectory"></param>
            <returns>Filename for the app receipt</returns>
        </member>
        <member name="M:UnrealBuildTool.ModuleManifest.Read(Tools.DotNETCommon.FileReference)">
            <summary>
            Read an app receipt from disk
            </summary>
            <param name="FileName">Filename to read from</param>
            <returns>The receipt that was read</returns>
        </member>
        <member name="M:UnrealBuildTool.ModuleManifest.TryRead(Tools.DotNETCommon.FileReference,UnrealBuildTool.ModuleManifest@)">
            <summary>
            Tries to read a receipt from disk.
            </summary>
            <param name="FileName">The filename that was read</param>
            <param name="Result">If successful, the receipt that was read. Null otherwise.</param>
            <returns>True if the file was read succesfully.</returns>
        </member>
        <member name="M:UnrealBuildTool.ModuleManifest.Write(System.String)">
            <summary>
            Write the receipt to disk.
            </summary>
            <param name="FileName">The file to write to</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleManifest.Write(System.IO.TextWriter)">
            <summary>
            Write the receipt to disk.
            </summary>
            <param name="Writer">The writer to output to</param>
        </member>
        <member name="T:UnrealBuildTool.PluginReferenceDescriptor">
            <summary>
            Representation of a reference to a plugin from a project file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.Name">
            <summary>
            Name of the plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.bEnabled">
            <summary>
            Whether it should be enabled by default
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.bOptional">
            <summary>
            Whether this plugin is optional, and the game should silently ignore it not being present
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.Description">
            <summary>
            Description of the plugin for users that do not have it installed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.MarketplaceURL">
            <summary>
            URL for this plugin on the marketplace, if the user doesn't have it installed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.WhitelistPlatforms">
            <summary>
            If enabled, list of platforms for which the plugin should be enabled (or all platforms if blank).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.BlacklistPlatforms">
            <summary>
            If enabled, list of platforms for which the plugin should be disabled.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.WhitelistTargetConfigurations">
            <summary>
            If enabled, list of target configurations for which the plugin should be enabled (or all target configurations if blank).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.BlacklistTargetConfigurations">
            <summary>
            If enabled, list of target configurations for which the plugin should be disabled.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.WhitelistTargets">
            <summary>
            If enabled, list of targets for which the plugin should be enabled (or all targets if blank).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.BlacklistTargets">
            <summary>
            If enabled, list of targets for which the plugin should be disabled.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginReferenceDescriptor.SupportedTargetPlatforms">
            <summary>
            The list of supported platforms for this plugin. This field is copied from the plugin descriptor, and supplements the user's whitelisted and blacklisted platforms.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PluginReferenceDescriptor.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of the plugin</param>
            <param name="InMarketplaceURL">The marketplace URL for plugins which are not installed</param>
            <param name="bInEnabled">Whether the plugin is enabled</param>
        </member>
        <member name="M:UnrealBuildTool.PluginReferenceDescriptor.Write(Tools.DotNETCommon.JsonWriter)">
            <summary>
            Construct a PluginReferenceDescriptor from a Json object
            </summary>
            <param name="Writer">The writer for output fields</param>
        </member>
        <member name="M:UnrealBuildTool.PluginReferenceDescriptor.WriteArray(Tools.DotNETCommon.JsonWriter,System.String,UnrealBuildTool.PluginReferenceDescriptor[])">
            <summary>
            Write an array of module descriptors
            </summary>
            <param name="Writer">The Json writer to output to</param>
            <param name="Name">Name of the array</param>
            <param name="Plugins">Array of plugins</param>
        </member>
        <member name="M:UnrealBuildTool.PluginReferenceDescriptor.FromJsonObject(Tools.DotNETCommon.JsonObject)">
            <summary>
            Construct a PluginReferenceDescriptor from a Json object
            </summary>
            <param name="RawObject">The Json object containing a plugin reference descriptor</param>
            <returns>New PluginReferenceDescriptor object</returns>
        </member>
        <member name="M:UnrealBuildTool.PluginReferenceDescriptor.IsEnabledForPlatform(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Determines if this reference enables the plugin for a given platform
            </summary>
            <param name="Platform">The platform to check</param>
            <returns>True if the plugin should be enabled</returns>
        </member>
        <member name="M:UnrealBuildTool.PluginReferenceDescriptor.IsEnabledForTargetConfiguration(UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Determines if this reference enables the plugin for a given target configuration
            </summary>
            <param name="TargetConfiguration">The target configuration to check</param>
            <returns>True if the plugin should be enabled</returns>
        </member>
        <member name="M:UnrealBuildTool.PluginReferenceDescriptor.IsEnabledForTarget(UnrealBuildTool.TargetType)">
            <summary>
            Determines if this reference enables the plugin for a given target
            </summary>
            <param name="Target">The target to check</param>
            <returns>True if the plugin should be enabled</returns>
        </member>
        <member name="M:UnrealBuildTool.PluginReferenceDescriptor.IsSupportedTargetPlatform(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Determines if this reference is valid for the given target platform.
            </summary>
            <param name="Platform">The platform to check</param>
            <returns>True if the plugin for this target platform</returns>
        </member>
        <member name="T:UnrealBuildTool.PrecompiledManifest">
            <summary>
            Stores information about a compiled binary or module, including the build products and intermediate folders.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledManifest.OutputFiles">
            <summary>
            List of files produced by compiling the module. These are within the module output directory.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledManifest.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledManifest.Read(Tools.DotNETCommon.FileReference)">
            <summary>
            Read a receipt from disk.
            </summary>
            <param name="Location">Filename to read from</param>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledManifest.TryRead(Tools.DotNETCommon.FileReference,UnrealBuildTool.PrecompiledManifest@)">
            <summary>
            Try to read a manifest from disk, failing gracefully if it can't be read.
            </summary>
            <param name="Location">Filename to read from</param>
            <param name="Manifest">If successful, the manifest that was read</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledManifest.Write(Tools.DotNETCommon.FileReference)">
            <summary>
            Write the receipt to disk.
            </summary>
            <param name="Location">Output filename</param>
        </member>
        <member name="T:UnrealBuildTool.PrecompileMode">
            <summary>
            Action to take for precompiling binaries and modules
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompileMode.None">
            <summary>
            Build the module normally
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompileMode.Create">
            <summary>
            Create precompiled build products
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompileMode.Use">
            <summary>
            Use existing precompiled build products
            </summary>
        </member>
        <member name="T:UnrealBuildTool.LogEventType">
            <summary>
            Log Event Type
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogEventType.Fatal">
            <summary>
            The log event is a fatal error
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogEventType.Error">
            <summary>
            The log event is an error
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogEventType.Warning">
            <summary>
            The log event is a warning
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogEventType.Console">
            <summary>
            Output the log event to the console
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogEventType.Log">
            <summary>
            Output the event to the on-disk log
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogEventType.Verbose">
            <summary>
            The log event should only be displayed if verbose logging is enabled
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogEventType.VeryVerbose">
            <summary>
            The log event should only be displayed if very verbose logging is enabled
            </summary>
        </member>
        <member name="T:UnrealBuildTool.LogFormatOptions">
            <summary>
            Options for formatting messages
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogFormatOptions.None">
            <summary>
            Format normally
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LogFormatOptions.NoSeverityPrefix">
            <summary>
            Never write a severity prefix. Useful for pre-formatted messages that need to be in a particular format for, eg. the Visual Studio output window
            </summary>
        </member>
        <member name="T:UnrealBuildTool.Log">
             <summary>
             UAT/UBT Custom log system.
             
             This lets you use any TraceListeners you want, but you should only call the static 
             methods below, not call Trace.XXX directly, as the static methods
             This allows the system to enforce the formatting and filtering conventions we desire.
            
             For posterity, we cannot use the Trace or TraceSource class directly because of our special log requirements:
               1. We possibly capture the method name of the logging event. This cannot be done as a macro, so must be done at the top level so we know how many layers of the stack to peel off to get the real function.
               2. We have a verbose filter we would like to apply to all logs without having to have each listener filter individually, which would require our string formatting code to run every time.
               3. We possibly want to ensure severity prefixes are logged, but Trace.WriteXXX does not allow any severity info to be passed down.
             </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.bIsInitialized">
            <summary>
            Guard our initialization. Mainly used by top level exception handlers to ensure its safe to call a logging function.
            In general user code should not concern itself checking for this.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.LogLevel">
            <summary>
            When true, verbose logging is enabled.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.bLogSeverity">
            <summary>
            When true, warnings and errors will have a WARNING: or ERROR: prexifx, respectively.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.bLogProgramNameWithSeverity">
            <summary>
            When true, warnings and errors will have a prefix suitable for display by MSBuild (avoiding error messages showing as (EXEC : Error : ")
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.bLogSources">
            <summary>
            When true, logs will have the calling mehod prepended to the output as MethodName:
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.bLogSourcesToConsole">
            <summary>
            When true, console output will have the calling mehod prepended to the output as MethodName:
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.bColorConsoleOutput">
            <summary>
            When true, will detect warnings and errors and set the console output color to yellow and red.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.Timer">
            <summary>
            When configured, this tracks time since initialization to prepend a timestamp to each log.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.Log.bIsVerbose">
            <summary>
            Expose the log level. This is a hack for ProcessResult.LogOutput, which wants to bypass our normal formatting scheme.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Log.WriteOnceSet">
            <summary>
            A collection of strings that have been already written once
            </summary>
        </member>
        <member name="P:UnrealBuildTool.Log.Indent">
            <summary>
            Indent added to every output line
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Log.#cctor">
            <summary>
            Static initializer
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Log.IsInitialized">
            <summary>
            Allows code to check if the log system is ready yet.
            End users should NOT need to use this. It pretty much exists
            to work around startup issues since this is a global singleton.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.Log.ColorConsoleOutput">
            <summary>
            Allows code to check if the log system is using console output color.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.Log.SetLoggingLevel(UnrealBuildTool.LogEventType)">
            <summary>
            Allows us to change verbosity after initializing. This can happen since we initialize logging early, 
            but then read the config and command line later, which could change this value.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Log.InitLogging(System.Boolean,UnrealBuildTool.LogEventType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Diagnostics.TraceListener})">
            <summary>
            This class allows InitLogging to be called more than once to work around chicken and eggs issues with logging and parsing command lines (see UBT startup code).
            </summary>
            <param name="bLogTimestamps">If true, the timestamp from Log init time will be prepended to all logs.</param>
            <param name="InLogLevel"></param>
            <param name="bLogSeverity">If true, warnings and errors will have a WARNING: and ERROR: prefix to them. </param>
            <param name="bLogProgramNameWithSeverity">If true, includes the program name with any severity prefix</param>
            <param name="bLogSources">If true, logs will have the originating method name prepended to them.</param>
            <param name="bLogSourcesToConsole">If true, console output will have the originating method name appended to it.</param>
            <param name="bColorConsoleOutput"></param>
            <param name="TraceListeners">Collection of trace listeners to attach to the Trace.Listeners, in addition to the Default listener. The existing listeners (except the Default listener) are cleared first.</param>
        </member>
        <member name="M:UnrealBuildTool.Log.GetSource(System.Int32)">
            <summary>
            Gets the name of the Method N levels deep in the stack frame. Used to trap what method actually made the logging call.
            Only used when bLogSources is true.
            </summary>
            <param name="StackFramesToSkip"></param>
            <returns>ClassName.MethodName</returns>
        </member>
        <member name="M:UnrealBuildTool.Log.GetSeverityPrefix(UnrealBuildTool.LogEventType)">
            <summary>
            Converts a LogEventType into a log prefix. Only used when bLogSeverity is true.
            </summary>
            <param name="Severity"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.Log.GetMessageCode(UnrealBuildTool.LogEventType)">
            <summary>
            Converts a LogEventType into a message code
            </summary>
            <param name="Severity"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.Log.FormatMessage(System.Int32,UnrealBuildTool.LogEventType,UnrealBuildTool.LogFormatOptions,System.Boolean,System.String,System.Object[])">
            <summary>
            Formats message for logging. Enforces the configured options.
            </summary>
            <param name="StackFramesToSkip">Number of frames to skip to get to the originator of the log request.</param>
            <param name="Verbosity">Message verbosity level</param>
            <param name="Options">Options for formatting this string</param>
            <param name="bForConsole">Whether the message is intended for console output</param>
            <param name="Format">Message text format string</param>
            <param name="Args">Message text parameters</param>
            <returns>Formatted message</returns>
        </member>
        <member name="M:UnrealBuildTool.Log.WriteLinePrivate(System.Int32,System.Boolean,UnrealBuildTool.LogEventType,UnrealBuildTool.LogFormatOptions,System.String,System.Object[])">
            <summary>
            Writes a formatted message to the console. All other functions should boil down to calling this method.
            </summary>
            <param name="StackFramesToSkip">Number of frames to skip to get to the originator of the log request.</param>
            <param name="bWriteOnce">If true, this message will be written only once</param>
            <param name="Verbosity">Message verbosity level. We only meaningfully use values up to Verbose</param>
            <param name="FormatOptions">Options for formatting messages</param>
            <param name="Format">Message format string.</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.WriteLineIf(System.Boolean,UnrealBuildTool.LogEventType,System.String,System.Object[])">
            <summary>
            Similar to Trace.WriteLineIf
            </summary>
            <param name="Condition"></param>
            <param name="Verbosity"></param>
            <param name="Format"></param>
            <param name="Args"></param>
        </member>
        <member name="M:UnrealBuildTool.Log.WriteLine(System.Int32,UnrealBuildTool.LogEventType,System.String,System.Object[])">
            <summary>
            Mostly an internal function, but expose StackFramesToSkip to allow UAT to use existing wrapper functions and still get proper formatting.
            </summary>
            <param name="StackFramesToSkip"></param>
            <param name="Verbosity"></param>
            <param name="Format"></param>
            <param name="Args"></param>
        </member>
        <member name="M:UnrealBuildTool.Log.WriteLine(System.Int32,UnrealBuildTool.LogEventType,UnrealBuildTool.LogFormatOptions,System.String,System.Object[])">
            <summary>
            Mostly an internal function, but expose StackFramesToSkip to allow UAT to use existing wrapper functions and still get proper formatting.
            </summary>
            <param name="StackFramesToSkip"></param>
            <param name="Verbosity"></param>
            <param name="FormatOptions"></param>
            <param name="Format"></param>
            <param name="Args"></param>
        </member>
        <member name="M:UnrealBuildTool.Log.WriteLine(UnrealBuildTool.LogEventType,System.String,System.Object[])">
            <summary>
            Similar to Trace.WriteLine
            </summary>
            <param name="Verbosity"></param>
            <param name="Format"></param>
            <param name="Args"></param>
        </member>
        <member name="M:UnrealBuildTool.Log.WriteLine(UnrealBuildTool.LogEventType,UnrealBuildTool.LogFormatOptions,System.String,System.Object[])">
            <summary>
            Similar to Trace.WriteLine
            </summary>
            <param name="Verbosity"></param>
            <param name="FormatOptions"></param>
            <param name="Format"></param>
            <param name="Args"></param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceError(System.String,System.Object[])">
            <summary>
            Writes an error message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceVerbose(System.String,System.Object[])">
            <summary>
            Writes a verbose message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceInformation(System.String,System.Object[])">
            <summary>
            Writes a message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceWarning(System.String,System.Object[])">
            <summary>
            Writes a warning message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceVeryVerbose(System.String,System.Object[])">
            <summary>
            Writes a very verbose message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceLog(System.String,System.Object[])">
            <summary>
            Writes a message to the log only.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.WriteLineOnce(UnrealBuildTool.LogEventType,System.String,System.Object[])">
            <summary>
            Similar to Trace.WriteLine
            </summary>
            <param name="Verbosity"></param>
            <param name="Format"></param>
            <param name="Args"></param>
        </member>
        <member name="M:UnrealBuildTool.Log.WriteLineOnce(UnrealBuildTool.LogEventType,UnrealBuildTool.LogFormatOptions,System.String,System.Object[])">
            <summary>
            Similar to Trace.WriteLine
            </summary>
            <param name="Verbosity"></param>
            <param name="Options"></param>
            <param name="Format"></param>
            <param name="Args"></param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceErrorOnce(System.String,System.Object[])">
            <summary>
            Writes an error message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceVerboseOnce(System.String,System.Object[])">
            <summary>
            Writes a verbose message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceInformationOnce(System.String,System.Object[])">
            <summary>
            Writes a message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceWarningOnce(System.String,System.Object[])">
            <summary>
            Writes a warning message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceVeryVerboseOnce(System.String,System.Object[])">
            <summary>
            Writes a very verbose message to the console.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="M:UnrealBuildTool.Log.TraceLogOnce(System.String,System.Object[])">
            <summary>
            Writes a message to the log only.
            </summary>
            <param name="Format">Message format string</param>
            <param name="Args">Optional arguments</param>
        </member>
        <member name="T:UnrealBuildTool.ScopedLogIndent">
            <summary>
            Class to apply a log indent for the lifetime of an object 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ScopedLogIndent.PrevIndent">
            <summary>
            The previous indent
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ScopedLogIndent.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Indent">Indent to append to the existing indent</param>
        </member>
        <member name="M:UnrealBuildTool.ScopedLogIndent.Dispose">
            <summary>
            Restore the log indent to normal
            </summary>
        </member>
        <member name="T:UnrealBuildTool.PrecompiledHeaderInstance">
            <summary>
            Information about a PCH instance
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderInstance.HeaderFile">
            <summary>
            The file to include to use this shared PCH
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderInstance.bOptimizeCode">
            <summary>
            Whether optimization is enabled
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderInstance.bUseRTTI">
            <summary>
            Whether to enable RTTI
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderInstance.Output">
            <summary>
            The output files for the shared PCH
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledHeaderInstance.#ctor(UnrealBuildTool.FileItem,System.Boolean,System.Boolean,UnrealBuildTool.CPPOutput)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledHeaderInstance.ToString">
            <summary>
            Return a string representation of this object for debugging
            </summary>
            <returns>String representation of the object</returns>
        </member>
        <member name="T:UnrealBuildTool.PrecompiledHeaderTemplate">
            <summary>
            A template for creating a shared PCH. Instances of it are created depending on the configurations required.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderTemplate.Module">
            <summary>
            Module providing this PCH.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderTemplate.BaseCompileEnvironment">
            <summary>
            The base compile environment, including all the public compile environment that all consuming modules inherit.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderTemplate.HeaderFile">
            <summary>
            The header file 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderTemplate.OutputDir">
            <summary>
            Output directory for instances of this PCH.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PrecompiledHeaderTemplate.Instances">
            <summary>
            Instances of this PCH
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledHeaderTemplate.#ctor(UnrealBuildTool.UEBuildModuleCPP,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.FileItem,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Constructor
            </summary>
            <param name="Module">The module with a valid shared PCH</param>
            <param name="BaseCompileEnvironment">The compile environment to use</param>
            <param name="HeaderFile">The header file to generate a PCH from</param>
            <param name="OutputDir">Output directory for instances of this PCH</param>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledHeaderTemplate.IsValidFor(UnrealBuildTool.CppCompileEnvironment)">
            <summary>
            Checks whether this template is valid for the given compile environment
            </summary>
            <param name="CompileEnvironment">Compile environment to check with</param>
            <returns>True if the template is compatible with the given compile environment</returns>
        </member>
        <member name="M:UnrealBuildTool.PrecompiledHeaderTemplate.ToString">
            <summary>
            Return a string representation of this object for debugging
            </summary>
            <returns>String representation of the object</returns>
        </member>
        <member name="T:UnrealBuildTool.TargetInfo">
            <summary>
            Information about a target, passed along when creating a module descriptor
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetInfo.Name">
            <summary>
            Name of the target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetInfo.Platform">
            <summary>
            The platform that the target is being built for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetInfo.Configuration">
            <summary>
            The configuration being built
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetInfo.Architecture">
            <summary>
            Architecture that the target is being built for (or an empty string for the default)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetInfo.ProjectFile">
            <summary>
            The project containing the target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetInfo.Version">
            <summary>
            The current build version
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetInfo.#ctor(System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,Tools.DotNETCommon.FileReference,UnrealBuildTool.ReadOnlyBuildVersion)">
            <summary>
            Constructs a TargetInfo for passing to the TargetRules constructor.
            </summary>
            <param name="Name">Name of the target being built</param>
            <param name="Platform">The platform that the target is being built for</param>
            <param name="Configuration">The configuration being built</param>
            <param name="Architecture">The architecture being built for</param>
            <param name="ProjectFile">Path to the project file containing the target</param>
            <param name="Version">The current build version</param>
        </member>
        <member name="M:UnrealBuildTool.TargetInfo.#ctor(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Constructs a TargetInfo for passing to the ModuleRules constructor.
            </summary>
            <param name="Rules">The constructed target rules object. This is null when passed into a TargetRules constructor, but should be valid at all other times.</param>
        </member>
        <member name="T:UnrealBuildTool.TargetType">
            <summary>
            The type of target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetType.Game">
            <summary>
            Cooked monolithic game executable (GameName.exe).  Also used for a game-agnostic engine executable (UE4Game.exe or RocketGame.exe)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetType.Editor">
            <summary>
            Uncooked modular editor executable and DLLs (UE4Editor.exe, UE4Editor*.dll, GameName*.dll)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetType.Client">
            <summary>
            Cooked monolithic game client executable (GameNameClient.exe, but no server code)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetType.Server">
            <summary>
            Cooked monolithic game server executable (GameNameServer.exe, but no client code)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetType.Program">
            <summary>
            Program (standalone program, e.g. ShaderCompileWorker.exe, can be modular or monolithic depending on the program)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.TargetLinkType">
            <summary>
            Specifies how to link all the modules in this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetLinkType.Default">
            <summary>
            Use the default link type based on the current target type
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetLinkType.Monolithic">
            <summary>
            Link all modules into a single binary
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetLinkType.Modular">
            <summary>
            Link modules into individual dynamic libraries
            </summary>
        </member>
        <member name="T:UnrealBuildTool.TargetBuildEnvironment">
            <summary>
            Specifies whether to share engine binaries and intermediates with other projects, or to create project-specific versions. By default,
            editor builds always use the shared build environment (and engine binaries are written to Engine/Binaries/Platform), but monolithic builds
            and programs do not (except in installed builds). Using the shared build environment prevents target-specific modifications to the build
            environment.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetBuildEnvironment.Default">
            <summary>
            Use the default build environment for this target type (and whether the engine is installed)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetBuildEnvironment.Shared">
            <summary>
            Engine binaries and intermediates are output to the engine folder. Target-specific modifications to the engine build environment will be ignored.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetBuildEnvironment.Unique">
            <summary>
            Engine binaries and intermediates are specific to this target
            </summary>
        </member>
        <member name="T:UnrealBuildTool.RequiresUniqueBuildEnvironmentAttribute">
            <summary>
            Attribute used to mark fields which much match between targets in the shared build environment
            </summary>
        </member>
        <member name="T:UnrealBuildTool.TargetRules">
            <summary>
            TargetRules is a data structure that contains the rules for defining a target (application/executable)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.TargetRules.TargetType">
            <summary>
            Static class wrapping constants aliasing the global TargetType enum.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.TargetType.Game">
            <summary>
            Alias for TargetType.Game
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.TargetType.Editor">
            <summary>
            Alias for TargetType.Editor
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.TargetType.Client">
            <summary>
            Alias for TargetType.Client
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.TargetType.Server">
            <summary>
            Alias for TargetType.Server
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.TargetType.Program">
            <summary>
            Alias for TargetType.Program
            </summary>
        </member>
        <member name="T:UnrealBuildTool.TargetRules.LinkEnvironmentConfiguration">
            <summary>
            Dummy class to maintain support for the SetupGlobalEnvironment() callback. We don't expose these classes directly any more.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.LinkEnvironmentConfiguration.Inner">
            <summary>
            TargetRules instance to forward settings to.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetRules.LinkEnvironmentConfiguration.#ctor(UnrealBuildTool.TargetRules)">
            <summary>
            Constructor.
            </summary>
            <param name="Inner">The target rules object. Fields on this object are treated as aliases to fields on this rules object.</param>
        </member>
        <member name="P:UnrealBuildTool.TargetRules.LinkEnvironmentConfiguration.bHasExports">
            <summary>
            Settings exposed from the TargetRules instance
            </summary>
        </member>
        <member name="T:UnrealBuildTool.TargetRules.CPPEnvironmentConfiguration">
            <summary>
            Dummy class to maintain support for the SetupGlobalEnvironment() callback. We don't expose these classes directly any more.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.CPPEnvironmentConfiguration.Inner">
            <summary>
            TargetRules instance to forward settings to.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetRules.CPPEnvironmentConfiguration.#ctor(UnrealBuildTool.TargetRules)">
            <summary>
            Constructor.
            </summary>
            <param name="Inner">The target rules object. Fields on this object are treated as aliases to fields on this rules object.</param>
        </member>
        <member name="P:UnrealBuildTool.TargetRules.CPPEnvironmentConfiguration.Definitions">
            <summary>
            Settings exposed from the TargetRules instance
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.Name">
            <summary>
            The name of this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.Platform">
            <summary>
            Platform that this target is being built for.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.Configuration">
            <summary>
            The configuration being built.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.Architecture">
            <summary>
            Architecture that the target is being built for (or an empty string for the default).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.ProjectFile">
            <summary>
            Path to the project file for the project containing this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.Version">
            <summary>
            The current build version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.Type">
            <summary>
            The type of target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUsesSteam">
            <summary>
            Whether the target uses Steam.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUsesCEF3">
            <summary>
            Whether the target uses CEF3.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUsesSlate">
            <summary>
            Whether the project uses visual Slate UI (as opposed to the low level windowing/messaging, which is always available).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseStaticCRT">
            <summary>
            Forces linking against the static CRT. This is not fully supported across the engine due to the need for allocator implementations to be shared (for example), and TPS 
            libraries to be consistent with each other, but can be used for utility programs.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bDebugBuildsActuallyUseDebugCRT">
            <summary>
            Enables the debug C++ runtime (CRT) for debug builds. By default we always use the release runtime, since the debug
            version isn't particularly useful when debugging Unreal Engine projects, and linking against the debug CRT libraries forces
            our third party library dependencies to also be compiled using the debug CRT (and often perform more slowly). Often
            it can be inconvenient to require a separate copy of the debug versions of third party static libraries simply
            so that you can debug your program's code.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bOutputPubliclyDistributable">
            <summary>
            Whether the output from this target can be publicly distributed, even if it has dependencies on modules that are in folders 
            with special restrictions (eg. CarefullyRedist, NotForLicensees, NoRedist).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.UndecoratedConfiguration">
            <summary>
            Specifies the configuration whose binaries do not require a "-Platform-Configuration" suffix.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bBuildAllPlugins">
            <summary>
            Build all the plugins that we can find, even if they're not enabled. This is particularly useful for content-only projects, 
            where you're building the UE4Editor target but running it with a game that enables a plugin.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.AdditionalPlugins">
            <summary>
            A list of additional plugins which need to be included in this target. This allows referencing non-optional plugin modules
            which cannot be disabled, and allows building against specific modules in program targets which do not fit the categories
            in ModuleHostType.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.EnablePlugins">
            <summary>
            Additional plugins that should be included for this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.DisablePlugins">
            <summary>
            List of plugins to be disabled for this target. Note that the project file may still reference them, so they should be marked
            as optional to avoid failing to find them at runtime.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.TargetRules.ExcludePlugins">
            <summary>
            Accessor for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.PakSigningKeysFile">
            <summary>
            Path to the set of pak signing keys to embed in the executable.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.SolutionDirectory">
            <summary>
            Allows a Program Target to specify it's own solution folder path.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bBuildInSolutionByDefault">
            <summary>
            Whether the target should be included in the default solution build configuration
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bOutputToEngineBinaries">
            <summary>
            Output the executable to the engine binaries folder.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bShouldCompileAsDLL">
            <summary>
            Whether this target should be compiled as a DLL.  Requires LinkType to be set to TargetLinkType.Monolithic.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.ExeBinariesSubFolder">
            <summary>
            Subfolder to place executables in, relative to the default location.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.GeneratedCodeVersion">
            <summary>
            Allow target module to override UHT code generation version.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompilePhysX">
            <summary>
            Whether to include PhysX support.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileAPEX">
            <summary>
            Whether to include PhysX APEX support.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileNvCloth">
            <summary>
            Whether to include NvCloth.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileICU">
            <summary>
            Whether to include ICU unicode/i18n support in Core.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileCEF3">
            <summary>
            Whether to compile CEF3 support.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bBuildEditor">
            <summary>
            Whether to compile the editor or not. Only desktop platforms (Windows or Mac) will use this, other platforms force this to false.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bBuildRequiresCookedData">
            <summary>
            Whether to compile code related to building assets. Consoles generally cannot build assets. Desktop platforms generally can.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bBuildWithEditorOnlyData">
            <summary>
            Whether to compile WITH_EDITORONLY_DATA disabled. Only Windows will use this, other platforms force this to false.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bBuildDeveloperTools">
            <summary>
            Whether to compile the developer tools.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceBuildTargetPlatforms">
            <summary>
            Whether to force compiling the target platform modules, even if they wouldn't normally be built.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceBuildShaderFormats">
            <summary>
            Whether to force compiling shader format modules, even if they wouldn't normally be built.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileSimplygon">
            <summary>
            Whether we should compile in support for Simplygon or not.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileSimplygonSSF">
            <summary>
            Whether we should compile in support for Simplygon's SSF library or not.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileLeanAndMeanUE">
            <summary>
            Whether to compile lean and mean version of UE.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseCacheFreedOSAllocs">
            <summary>
            Whether to utilize cache freed OS allocs with MallocBinned
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileAgainstEngine">
            <summary>
            Enabled for all builds that include the engine project.  Disabled only when building standalone apps that only link with Core.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileAgainstCoreUObject">
            <summary>
            Enabled for all builds that include the CoreUObject project.  Disabled only when building standalone apps that only link with Core.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bIncludeADO">
            <summary>
            If true, include ADO database support in core.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileRecast">
            <summary>
            Whether to compile Recast navmesh generation.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileSpeedTree">
            <summary>
            Whether to compile SpeedTree support.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceEnableExceptions">
            <summary>
            Enable exceptions for all modules.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseInlining">
            <summary>
            Enable inlining for all modules.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceEnableObjCExceptions">
            <summary>
            Enable exceptions for all modules.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceEnableRTTI">
            <summary>
            Enable RTTI for all modules.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bWithServerCode">
            <summary>
            Compile server-only code.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileWithStatsWithoutEngine">
            <summary>
            Whether to include stats support even without the engine.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileWithPluginSupport">
            <summary>
            Whether to include plugin support.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bIncludePluginsForTargetPlatforms">
            <summary>
            Whether to allow plugins which support all target platforms.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bWithPerfCounters">
            <summary>
            Whether to include PerfCounters support.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseLoggingInShipping">
            <summary>
            Whether to turn on logging for test/shipping builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bLoggingToMemoryEnabled">
            <summary>
            Whether to turn on logging to memory for test/shipping builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseLauncherChecks">
            <summary>
            Whether to check that the process was launched through an external launcher.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseChecksInShipping">
            <summary>
            Whether to turn on checks (asserts) for test/shipping builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileFreeType">
            <summary>
            True if we need FreeType support.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCompileForSize">
            <summary>
            True if we want to favor optimizing size over speed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceCompileDevelopmentAutomationTests">
            <summary>
            Whether to compile development automation tests.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceCompilePerformanceAutomationTests">
            <summary>
            Whether to compile performance automation tests.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bEventDrivenLoader">
            <summary>
            If true, event driven loader will be used in cooked builds. @todoio This needs to be replaced by a runtime solution after async loading refactor.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseXGEController">
            <summary>
            Whether the XGE controller worker and modules should be included in the engine build.
            These are required for distributed shader compilation using the XGE interception interface.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseBackwardsCompatibleDefaults">
            <summary>
            Whether to use backwards compatible defaults for this module. By default, engine modules always use the latest default settings, while project modules do not (to support
            an easier migration path).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bIWYU">
            <summary>
            Enables "include what you use" by default for modules in this target. Changes the default PCH mode for any module in this project to PCHUsageModule.UseExplicitOrSharedPCHs.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bEnforceIWYU">
            <summary>
            Enforce "include what you use" rules; warns if monolithic headers (Engine.h, UnrealEd.h, etc...) are used, and checks that source files include their matching header first.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bHasExports">
            <summary>
            Whether the final executable should export symbols.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bPrecompile">
            <summary>
            Make static libraries for all engine modules as intermediates for this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUsePrecompiled">
            <summary>
            Use existing static libraries for all engine modules in this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bEnableOSX109Support">
            <summary>
            Whether we should compile with support for OS X 10.9 Mavericks. Used for some tools that we need to be compatible with this version of OS X.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bIsBuildingConsoleApplication">
            <summary>
            True if this is a console application that's being built.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bDisableSymbolCache">
            <summary>
            True if debug symbols that are cached for some platforms should not be created.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseUnityBuild">
            <summary>
            Whether to unify C++ code into larger files for faster compilation.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceUnityBuild">
            <summary>
            Whether to force C++ source files to be combined into larger files for faster compilation.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseAdaptiveUnityBuild">
            <summary>
            Use a heuristic to determine which files are currently being iterated on and exclude them from unity blobs, result in faster
            incremental compile times. The current implementation uses the read-only flag to distinguish the working set, assuming that files will
            be made writable by the source control system if they are being modified. This is true for Perforce, but not for Git.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bAdaptiveUnityDisablesOptimizations">
            <summary>
            Disable optimization for files that are in the adaptive non-unity working set.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bAdaptiveUnityDisablesPCH">
            <summary>
            Disables force-included PCHs for files that are in the adaptive non-unity working set.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.MinGameModuleSourceFilesForUnityBuild">
            <summary>
            The number of source files in a game module before unity build will be activated for that module.  This
            allows small game modules to have faster iterative compile times for single files, at the expense of slower full
            rebuild times.  This setting can be overridden by the bFasterWithoutUnity option in a module's Build.cs file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bShadowVariableErrors">
            <summary>
            Forces shadow variable warnings to be treated as errors on platforms that support it.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUndefinedIdentifierErrors">
            <summary>
            Forces the use of undefined identifiers in conditional expressions to be treated as errors.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseFastMonoCalls">
            <summary>
            New Monolithic Graphics drivers have optional "fast calls" replacing various D3d functions
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseFastSemanticsRenderContexts">
            <summary>
            New Xbox driver supports a "fast semantics" context type. This switches it on for the immediate and deferred contexts
            Try disabling this if you see rendering issues and/or crashes inthe Xbox RHI.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.NumIncludedBytesPerUnityCPP">
            <summary>
            An approximate number of bytes of C++ code to target for inclusion in a single unified C++ file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bStressTestUnity">
            <summary>
            Whether to stress test the C++ unity build robustness by including all C++ files files in a project from a single unified file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForceDebugInfo">
            <summary>
            Whether to force debug info to be generated.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bDisableDebugInfo">
            <summary>
            Whether to globally disable debug info generation; see DebugInfoHeuristics.cs for per-config and per-platform options.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bDisableDebugInfoForGeneratedCode">
            <summary>
            Whether to disable debug info generation for generated files. This improves link times for modules that have a lot of generated glue code.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bOmitPCDebugInfoInDevelopment">
            <summary>
            Whether to disable debug info on PC in development builds (for faster developer iteration, as link times are extremely fast with debug info disabled).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUsePDBFiles">
            <summary>
            Whether PDB files should be used for Visual C++ builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUsePCHFiles">
            <summary>
            Whether PCH files should be used.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.MinFilesUsingPrecompiledHeader">
            <summary>
            The minimum number of files that must use a pre-compiled header before it will be created and used.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bForcePrecompiledHeaderForGameModules">
            <summary>
            When enabled, a precompiled header is always generated for game modules, even if there are only a few source files
            in the module.  This greatly improves compile times for iterative changes on a few files in the project, at the expense of slower
            full rebuild times for small game projects.  This can be overridden by setting MinFilesUsingPrecompiledHeaderOverride in
            a module's Build.cs file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseIncrementalLinking">
            <summary>
            Whether to use incremental linking or not. Incremental linking can yield faster iteration times when making small changes.
            Currently disabled by default because it tends to behave a bit buggy on some computers (PDB-related compile errors).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bAllowLTCG">
            <summary>
            Whether to allow the use of link time code generation (LTCG).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bPGOProfile">
            <summary>
            Whether to enable Profile Guided Optimization (PGO) instrumentation in this build.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bPGOOptimize">
            <summary>
            Whether to optimize this build with Profile Guided Optimization (PGO).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bAllowASLRInShipping">
            <summary>
            Whether to allow the use of ASLR (address space layout randomization) if supported. Only
            applies to shipping builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bSupportEditAndContinue">
            <summary>
            Whether to support edit and continue.  Only works on Microsoft compilers in 32-bit compiles.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bOmitFramePointers">
            <summary>
            Whether to omit frame pointers or not. Disabling is useful for e.g. memory profiling on the PC.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bStripSymbolsOnIOS">
            <summary>
            Whether to strip iOS symbols or not (implied by bGeneratedSYMFile).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseMallocProfiler">
            <summary>
            If true, then enable memory profiling in the build (defines USE_MALLOC_PROFILER=1 and forces bOmitFramePointers=false).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseSharedPCHs">
            <summary>
            Enables "Shared PCHs", a feature which significantly speeds up compile times by attempting to
            share certain PCH files between modules that UBT detects is including those PCH's header files.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseShippingPhysXLibraries">
            <summary>
            True if Development and Release builds should use the release configuration of PhysX/APEX.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseCheckedPhysXLibraries">
            <summary>
            True if Development and Release builds should use the checked configuration of PhysX/APEX. if bUseShippingPhysXLibraries is true this is ignored.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCheckLicenseViolations">
            <summary>
            Tells the UBT to check if module currently being built is violating EULA.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bBreakBuildOnLicenseViolation">
            <summary>
            Tells the UBT to break build if module currently being built is violating EULA.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bUseFastPDBLinking">
            <summary>
            Whether to use the :FASTLINK option when building with /DEBUG to create local PDBs on Windows. Fast, but currently seems to have problems finding symbols in the debugger.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCreateMapFile">
            <summary>
            Outputs a map file as part of the build.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.BundleVersion">
            <summary>
            Bundle version for Mac apps.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bDeployAfterCompile">
            <summary>
            Whether to deploy the executable after compilation on platforms that require deployment.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCreateStubIPA">
            <summary>
            If true, then a stub IPA will be generated when compiling is done (minimal files needed for a valid IPA).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCopyAppBundleBackToDevice">
            <summary>
            If true, then a stub IPA will be generated when compiling is done (minimal files needed for a valid IPA).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bAllowRemotelyCompiledPCHs">
            <summary>
            When enabled, allows XGE to compile pre-compiled header files on remote machines.  Otherwise, PCHs are always generated locally.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bCheckSystemHeadersForModification">
            <summary>
            Whether headers in system paths should be checked for modification when determining outdated actions.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bDisableLinking">
            <summary>
            Whether to disable linking for this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bFormalBuild">
            <summary>
            Indicates that this is a formal build, intended for distribution. This flag is automatically set to true when Build.version has a changelist set.
            The only behavior currently bound to this flag is to compile the default resource file separately for each binary so that the OriginalFilename field is set correctly. 
            By default, we only compile the resource once to reduce build times.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bFlushBuildDirOnRemoteMac">
            <summary>
            Whether to clean Builds directory on a remote Mac before building.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bPrintToolChainTimingInfo">
            <summary>
            Whether to write detailed timing info from the compiler and linker.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bHideSymbolsByDefault">
            <summary>
            Whether to hide symbols by default on POSIX platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.ToolChainName">
            <summary>
            Allows overriding the toolchain to be created for this target. This must match the name of a class declared in the UnrealBuildTool assembly.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bAllowGeneratedIniWhenCooked">
            <summary>
            Whether to load generated ini files in cooked build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.bLegacyPublicIncludePaths">
            <summary>
            Add all the public folders as include paths for the compile environment.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.BuildVersion">
            <summary>
            The build version string
            </summary>
        </member>
        <member name="P:UnrealBuildTool.TargetRules.LinkType">
            <summary>
            Specifies how to link modules in this target (monolithic or modular). This is currently protected for backwards compatibility. Call the GetLinkType() accessor
            until support for the deprecated ShouldCompileMonolithic() override has been removed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.LinkTypePrivate">
            <summary>
            Backing storage for the LinkType property.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.GlobalDefinitions">
            <summary>
            Macros to define globally across the whole target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.ProjectDefinitions">
            <summary>
            Macros to define across all macros in the project.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.TargetRules.Definitions">
            <summary>
            Wrapper around GlobalDefinitions for people just stripping CPPEnvironmentConfiguration from variable names due to deprecation in 4.18.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.TargetRules.LaunchModuleName">
            <summary>
            Specifies the name of the launch module. For modular builds, this is the module that is compiled into the target's executable.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.LaunchModuleNamePrivate">
            <summary>
            Backing storage for the LaunchModuleName property.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.ExtraModuleNames">
            <summary>
            List of additional modules to be compiled into the target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.BuildEnvironment">
            <summary>
            Specifies the build environment for this target. See TargetBuildEnvironment for more information on the available options.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.PreBuildSteps">
            <summary>
            Specifies a list of steps which should be executed before this target is built, in the context of the host platform's shell.
            The following variables will be expanded before execution: 
            $(EngineDir), $(ProjectDir), $(TargetName), $(TargetPlatform), $(TargetConfiguration), $(TargetType), $(ProjectFile).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.PostBuildSteps">
            <summary>
            Specifies a list of steps which should be executed after this target is built, in the context of the host platform's shell.
            The following variables will be expanded before execution: 
            $(EngineDir), $(ProjectDir), $(TargetName), $(TargetPlatform), $(TargetConfiguration), $(TargetType), $(ProjectFile).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.AdditionalCompilerArguments">
            <summary>
            Additional arguments to pass to the compiler
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.AdditionalLinkerArguments">
            <summary>
            Additional arguments to pass to the linker
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.AndroidPlatform">
            <summary>
            Android-specific target settings.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.IOSPlatform">
            <summary>
            IOS-specific target settings.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.LuminPlatform">
            <summary>
            Lumin-specific target settings.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.MacPlatform">
            <summary>
            Mac-specific target settings.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.PS4Platform">
            <summary>
            PS4-specific target settings.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.SwitchPlatform">
            <summary>
            Switch-specific target settings.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.WindowsPlatform">
            <summary>
            Windows-specific target settings.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetRules.XboxOnePlatform">
            <summary>
            Xbox One-specific target settings.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetRules.#ctor(UnrealBuildTool.TargetInfo)">
            <summary>
            Constructor.
            </summary>
            <param name="Target">Information about the target being built</param>
        </member>
        <member name="M:UnrealBuildTool.TargetRules.FormatHexBytes(System.Byte[])">
            <summary>
            Formats an array of bytes as a sequence of values
            </summary>
            <param name="Data">The data to convert into a string</param>
            <returns>List of hexadecimal bytes</returns>
        </member>
        <member name="M:UnrealBuildTool.TargetRules.SetOverridesForTargetType">
            <summary>
            Override any settings required for the selected target type
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetRules.GetConfigurableObjects">
            <summary>
            Finds all the subobjects which can be configured by command line options and config files
            </summary>
            <returns>Sequence of objects</returns>
        </member>
        <member name="P:UnrealBuildTool.TargetRules.HostPlatform">
            <summary>
            Gets the host platform being built on
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetRules.SetupGlobalEnvironment(UnrealBuildTool.TargetInfo,UnrealBuildTool.TargetRules.LinkEnvironmentConfiguration@,UnrealBuildTool.TargetRules.CPPEnvironmentConfiguration@)">
            <summary>
            Setup the global environment for building this target
            IMPORTANT: Game targets will *not* have this function called if they use the shared build environment.
            See ShouldUseSharedBuildEnvironment().
            </summary>
            <param name="Target">The target information - such as platform and configuration</param>
            <param name="OutLinkEnvironmentConfiguration">Output link environment settings</param>
            <param name="OutCPPEnvironmentConfiguration">Output compile environment settings</param>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyTargetRules">
            <summary>
            Read-only wrapper around an existing TargetRules instance. This exposes target settings to modules without letting them to modify the global environment.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlyTargetRules.Inner">
            <summary>
            The writeable TargetRules instance
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyTargetRules.#ctor(UnrealBuildTool.TargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The TargetRules instance to wrap around</param>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyTargetRules.Name">
            <summary>
            Accessors for fields on the inner TargetRules instance
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyTargetRules.RelativeEnginePath">
            <summary>
            Provide access to the RelativeEnginePath property for code referencing ModuleRules.BuildConfiguration.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyTargetRules.UEThirdPartySourceDirectory">
            <summary>
            Provide access to the UEThirdPartySourceDirectory property for code referencing ModuleRules.UEBuildConfiguration.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyTargetRules.UEThirdPartyBinariesDirectory">
            <summary>
            Provide access to the UEThirdPartyBinariesDirectory property for code referencing ModuleRules.UEBuildConfiguration.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyTargetRules.IsInPlatformGroup(UnrealBuildTool.UnrealPlatformGroup)">
            <summary>
            Checks if current platform is part of a given platform group
            </summary>
            <param name="Group">The platform group to check</param>
            <returns>True if current platform is part of a platform group</returns>
        </member>
        <member name="T:UnrealBuildTool.UEBuildBundleResource">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBundleResource.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="InResourcePath"></param>
            <param name="InBundleContentsSubdir"></param>
            <param name="bInShouldLog"></param>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBundleResource.ResourcePath">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBundleResource.BundleContentsSubdir">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBundleResource.bShouldLog">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEBuildFramework">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildFramework.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="InFrameworkName"></param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildFramework.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="InFrameworkName"></param>
            <param name="InFrameworkZipPath"></param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildFramework.#ctor(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="InFrameworkName"></param>
            <param name="InFrameworkZipPath"></param>
            <param name="InCopyBundledAssets"></param>
        </member>
        <member name="F:UnrealBuildTool.UEBuildFramework.FrameworkName">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildFramework.FrameworkZipPath">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildFramework.CopyBundledAssets">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEBuildModuleCPP">
            <summary>
            A module that is compiled from C++ code.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.AutoGenerateCppInfoClass.BuildInfoClass.FileWildcard">
            <summary>
            The wildcard of the *.gen.cpp file which was generated for the module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.AutoGenerateCppInfoClass.BuildInfo">
            <summary>
            Information about how to build the .gen.cpp files. If this is null, then we're not building .gen.cpp files for this module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.AutoGenerateCppInfo">
            <summary>
            Information about the .gen.cpp file.  If this is null then this module doesn't have any UHT-produced code.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.SourceFilesClass.CopyFromListToList(System.Collections.Generic.List{UnrealBuildTool.FileItem},System.Collections.Generic.List{UnrealBuildTool.FileItem})">
            <summary>
            Copy from list to list helper.
            </summary>
            <param name="From">Source list.</param>
            <param name="To">Destination list.</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.SourceFilesClass.CopyFrom(UnrealBuildTool.UEBuildModuleCPP.SourceFilesClass)">
            <summary>
            Copies file lists from other SourceFilesClass to this.
            </summary>
            <param name="Other">Source object.</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.AddAdditionalCPPFiles(System.Collections.Generic.IEnumerable{UnrealBuildTool.FileItem})">
            <summary>
            Adds additional source cpp files for this module.
            </summary>
            <param name="Files">Files to add.</param>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.SourceFiles">
            <summary>
            All the source files for this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.SourceFilesToBuild">
            <summary>
            A list of the absolute paths of source files to be built in this module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.SourceFilesFound">
            <summary>
            A list of the source files that were found for the module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.IntermediateDirectory">
            <summary>
            The directory for this module's object files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.GeneratedCodeDirectory">
            <summary>
            The directory for this module's generated code
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.ProcessedDependenciesClass.UniquePCHHeaderFile">
            <summary>
            The file, if any, which is used as the unique PCH for this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.ProcessedDependencies">
            <summary>
            The processed dependencies for the class
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.InvalidIncludeDirectiveMessages">
            <summary>
            List of invalid include directives. These are buffered up and output before we start compiling.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.CategorizeSourceFiles(System.Collections.Generic.IEnumerable{UnrealBuildTool.FileItem},UnrealBuildTool.UEBuildModuleCPP.SourceFilesClass)">
            <summary>
            Categorizes source files into per-extension buckets
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.WhitelistedCircularDependencies">
            <summary>
            List of whitelisted circular dependencies. Please do NOT add new modules here; refactor to allow the modules to be decoupled instead.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.AddDefaultIncludePaths">
            <summary>
            Add the default include paths for this module to its settings
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildModuleCPP.PrecompiledManifestLocation">
            <summary>
            Path to the precompiled manifest location
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.GatherDataForProjectFile(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.ProjectFile)">
            <summary>
            Gathers intellisense data for the project file containing this module
            </summary>
            <param name="Target">The target being built</param>
            <param name="BinaryCompileEnvironment">The inherited compile environment for this module</param>
            <param name="ProjectFile">The project file containing this module</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.AddModuleToCompileEnvironment(UnrealBuildTool.UEBuildBinary,System.Collections.Generic.HashSet{Tools.DotNETCommon.DirectoryReference},System.Collections.Generic.HashSet{Tools.DotNETCommon.DirectoryReference},System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnrealBuildTool.UEBuildFramework},System.Boolean)">
            <summary>
            Sets up the environment for compiling any module that includes the public interface of this module.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.CreateSharedPCHTemplate(UnrealBuildTool.UEBuildTarget,UnrealBuildTool.CppCompileEnvironment)">
            <summary>
            Create a shared PCH template for this module, which allows constructing shared PCH instances in the future
            </summary>
            <param name="Target">The target which owns this module</param>
            <param name="BaseCompileEnvironment">Base compile environment for this target</param>
            <returns>Template for shared PCHs</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.CreatePrivatePCH(UnrealBuildTool.UEToolChain,UnrealBuildTool.FileItem,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.ActionGraph)">
            <summary>
            Creates a precompiled header action to generate a new pch file 
            </summary>
            <param name="ToolChain">The toolchain to generate the PCH</param>
            <param name="HeaderFile"></param>
            <param name="ModuleCompileEnvironment"></param>
            <param name="ActionGraph">Graph containing build actions</param>
            <returns>The created PCH instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.FindOrCreateSharedPCH(UnrealBuildTool.UEToolChain,UnrealBuildTool.PrecompiledHeaderTemplate,System.Boolean,System.Boolean,UnrealBuildTool.ActionGraph)">
            <summary>
            Generates a precompiled header instance from the given template, or returns an existing one if it already exists
            </summary>
            <param name="ToolChain">The toolchain being used to build this module</param>
            <param name="Template">The PCH template</param>
            <param name="bOptimizeCode">Whether optimization should be enabled for this PCH</param>
            <param name="bUseRTTI">Whether to enable RTTI for this PCH</param>
            <param name="ActionGraph">Graph containing build actions</param>
            <returns>Instance of a PCH</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.CompileUnityFilesWithToolChain(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEToolChain,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.CppCompileEnvironment,System.Collections.Generic.List{UnrealBuildTool.FileItem},UnrealBuildTool.ActionGraph)">
            <summary>
            Compiles the provided CPP unity files. Will
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.CreateHeaderForDefinitions(UnrealBuildTool.CppCompileEnvironment,Tools.DotNETCommon.DirectoryReference,System.String)">
            <summary>
            Creates a header file containing all the preprocessor definitions for a compile environment, and force-include it. We allow a more flexible syntax for preprocessor definitions than
            is typically allowed on the command line (allowing function macros or double-quote characters, for example). Ensuring all definitions are specified in a header files ensures consistent
            behavior.
            </summary>
            <param name="CompileEnvironment">The compile environment</param>
            <param name="IntermediateDirectory">Directory to create the intermediate file</param>
            <param name="HeaderSuffix">Suffix for the included file</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.CreatePCHWrapperFile(Tools.DotNETCommon.FileReference,System.Collections.Generic.IEnumerable{System.String},UnrealBuildTool.FileItem)">
            <summary>
            Create a header file containing the module definitions, which also includes the PCH itself. Including through another file is necessary on 
            Clang, since we get warnings about #pragma once otherwise, but it also allows us to consistently define the preprocessor state on all 
            platforms.
            </summary>
            <param name="OutputFile">The output file to create</param>
            <param name="Definitions">Definitions required by the PCH</param>
            <param name="IncludedFile">The PCH file to include</param>
            <returns>FileItem for the created file</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.WriteDefinitions(System.Collections.Generic.IEnumerable{System.String},System.IO.TextWriter)">
            <summary>
            Write a list of macro definitions to an output file
            </summary>
            <param name="Definitions">List of definitions</param>
            <param name="Writer">Writer to receive output</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.ShouldEnableOptimization(UnrealBuildTool.ModuleRules.CodeOptimization,UnrealBuildTool.UnrealTargetConfiguration,System.Boolean)">
            <summary>
            Determine whether optimization should be enabled for a given target
            </summary>
            <param name="Setting">The optimization setting from the rules file</param>
            <param name="Configuration">The active target configuration</param>
            <param name="bIsEngineModule">Whether the current module is an engine module</param>
            <returns>True if optimization should be enabled</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.CreateModuleCompileEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment)">
            <summary>
            Creates a compile environment from a base environment based on the module settings.
            </summary>
            <param name="Target">Rules for the target being built</param>
            <param name="BaseCompileEnvironment">An existing environment to base the module compile environment on.</param>
            <returns>The new module compile environment.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.CreateSharedPCHCompileEnvironment(UnrealBuildTool.UEBuildTarget,UnrealBuildTool.CppCompileEnvironment)">
            <summary>
            Creates a compile environment for a shared PCH from a base environment based on the module settings.
            </summary>
            <param name="Target">The target being built</param>
            <param name="BaseCompileEnvironment">An existing environment to base the module compile environment on.</param>
            <returns>The new shared PCH compile environment.</returns>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.TotalPCHGenTime">
            Total time spent generating PCHs for modules (not actually compiling, but generating the PCH's input data)
        </member>
        <member name="F:UnrealBuildTool.UEBuildModuleCPP.TotalPCHCacheTime">
            Time spent caching which PCH header is included by each module and source file
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.GetCachedUHTModuleInfo(UnrealBuildTool.EGeneratedCodeVersion)">
            <summary>
            If any of this module's source files contain UObject definitions, this will return those header files back to the caller
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModuleCPP.FindHeaders(System.IO.DirectoryInfo,Tools.DotNETCommon.FileSystemName[],System.Collections.Generic.List{Tools.DotNETCommon.FileReference})">
            <summary>
            Find all the headers under the given base directory, excluding any other platform folders.
            </summary>
            <param name="BaseDir">Base directory to search</param>
            <param name="ExcludeFolders">Array of folders to exclude</param>
            <param name="Headers">Receives the list of headers that was found</param>
        </member>
        <member name="T:UnrealBuildTool.PlatformExports">
            <summary>
            General platform support functions, exported for UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.IsPlatformAvailable(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Checks whether the given platform is available
            </summary>
            <param name="Platform">Platform to check</param>
            <returns>True if the platform is available, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.GetRegisteredPlatforms">
            <summary>
            Gets a list of the registered platforms
            </summary>
            <returns>List of platforms</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.GetDefaultArchitecture(UnrealBuildTool.UnrealTargetPlatform,Tools.DotNETCommon.FileReference)">
            <summary>
            Gets the default architecture for a given platform
            </summary>
            <param name="Platform">The platform to get the default architecture for</param>
            <param name="ProjectFile">Project file to read settings from</param>
            <returns>The default architecture</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.HasDefaultBuildConfig(Tools.DotNETCommon.FileReference,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Checks whether the given project has a default build configuration
            </summary>
            <param name="ProjectFile">The project file</param>
            <param name="Platform">Platform to check settings for</param>
            <returns>True if the project uses the default build configuration</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.RequiresBuild(Tools.DotNETCommon.FileReference,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Checks whether the given project requires a build because of platform needs
            </summary>
            <param name="ProjectFile">The project file</param>
            <param name="Platform">Platform to check settings for</param>
            <returns>True if the project requires a build for the platform</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.GetPlatformFolderNames">
            <summary>
            Returns an array of all platform folder names
            </summary>
            <returns>All platform folder names</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.GetIncludedFolderNames(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Returns an array of all platform folder names
            </summary>
            <param name="Platform">The platform to get the included folder names for</param>
            <returns>All platform folder names</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.GetExcludedFolderNames(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Returns all the excluded folder names for a given platform
            </summary>
            <param name="Platform">The platform to get the excluded folder names for</param>
            <returns>Array of folder names</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.CanUseXGE(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Check whether the given platform supports XGE
            </summary>
            <param name="Platform">Platform to check</param>
            <returns>True if the platform supports XGE</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.CanUseParallelExecutor(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Check whether the given platform supports the parallel executor in UAT
            </summary>
            <param name="Platform">Platform to check</param>
            <returns>True if the platform supports the parallel executor in UAT</returns>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.PreventAutoSDKSwitching">
             <summary>
            
             </summary>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.SetRemoteIniPath(System.String)">
            <summary>
            
            </summary>
            <param name="Path"></param>
        </member>
        <member name="M:UnrealBuildTool.PlatformExports.Initialize(System.Boolean)">
            <summary>
            Initialize UBT in the context of another host process (presumably UAT)
            </summary>
            <param name="bIsEngineInstalled">Whether the engine is installed</param>
            <returns>True if initialization was successful</returns>
        </member>
        <member name="T:UnrealBuildTool.CommandLine">
            <summary>
            Functions for parsing command line arguments
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CommandLine.Parameter">
            <summary>
            Stores information about the field to receive command line arguments
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CommandLine.Parameter.Prefix">
            <summary>
            Prefix for the argument.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CommandLine.Parameter.FieldInfo">
            <summary>
            Field to receive values for this argument
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CommandLine.Parameter.Attribute">
            <summary>
            The attribute containing this argument's info
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CommandLine.ParseArguments(System.Collections.Generic.IEnumerable{System.String},System.Object)">
            <summary>
            Parse the given list of arguments and apply them to the given object
            </summary>
            <param name="Arguments">List of arguments. Parsed arguments will be removed from this list when the function returns.</param>
            <param name="TargetObject">Object to receive the parsed arguments. Fields in this object should be marked up with CommandLineArgumentAttribute's to indicate how they should be parsed.</param>
        </member>
        <member name="M:UnrealBuildTool.CommandLine.ParseAndRemoveArguments(System.Collections.Generic.List{System.String},System.Object)">
            <summary>
            Parse the given list of arguments, and remove any that are parsed successfully
            </summary>
            <param name="Arguments">List of arguments. Parsed arguments will be removed from this list when the function returns.</param>
            <param name="TargetObject">Object to receive the parsed arguments. Fields in this object should be marked up with CommandLineArgumentAttribute's to indicate how they should be parsed.</param>
        </member>
        <member name="M:UnrealBuildTool.CommandLine.AssignValue(UnrealBuildTool.CommandLine.Parameter,System.String,System.Object,System.Collections.Generic.Dictionary{System.Reflection.FieldInfo,UnrealBuildTool.CommandLine.Parameter})">
            <summary>
            Parses and assigns a value to a field
            </summary>
            <param name="Parameter">The parameter being parsed</param>
            <param name="Text">Argument text</param>
            <param name="TargetObject">The target object to assign values to</param>
            <param name="AssignedFieldToParameter">Maps assigned fields to the parameter that wrote to it. Used to detect duplicate and conflicting arguments.</param>
        </member>
        <member name="M:UnrealBuildTool.CommandLine.TryParseValue(System.Type,System.String,System.Object@)">
            <summary>
            Attempts to parse the given string to a value
            </summary>
            <param name="FieldType">Type of the field to convert to</param>
            <param name="Text">The value text</param>
            <param name="Value">On success, contains the parsed object</param>
            <returns>True if the text could be parsed, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.CommandLineAttribute">
            <summary>
            Attribute to indicate the name of a command line argument
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CommandLineAttribute.Prefix">
            <summary>
            Prefix for the option, with a leading '-' and trailing '=' character if a value is expected.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CommandLineAttribute.Value">
            <summary>
            Specifies a fixed value for this argument. Specifying an alternate value is not permitted.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CommandLineAttribute.ValueAfterSpace">
            <summary>
            Indicates that the value of the argument is separated by a space rather than an equals symbol.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CommandLineAttribute.ListSeparator">
            <summary>
            For collection types, specifies the separator character between multiple arguments
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CommandLineAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Prefix">Prefix for this argument</param>
        </member>
        <member name="T:UnrealBuildTool.ConfigCache">
            <summary>
            Caches config files and config file hierarchies
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ConfigCache.AddElementDelegate">
            <summary>
            Delegate to add a value to an ICollection in a target object
            </summary>
            <param name="TargetObject">The object containing the field to be modified</param>
            <param name="ValueObject">The value to add</param>
        </member>
        <member name="T:UnrealBuildTool.ConfigCache.ConfigField">
            <summary>
            Caches information about a field with a [ConfigFile] attribute in a type
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.ConfigField.FieldInfo">
            <summary>
            The field with the config attribute
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.ConfigField.Attribute">
            <summary>
            The attribute instance
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.ConfigField.ElementType">
            <summary>
            For fields implementing ICollection, specifies the element type
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.ConfigField.AddElement">
            <summary>
            For fields implementing ICollection, a callback to add an element type.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ConfigCache.ConfigHierarchyKey">
            <summary>
            Stores information identifying a unique config hierarchy
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.ConfigHierarchyKey.Type">
            <summary>
            The hierarchy type
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.ConfigHierarchyKey.ProjectDir">
            <summary>
            The project directory to read from
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.ConfigHierarchyKey.Platform">
            <summary>
            Which platform-specific files to read
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCache.ConfigHierarchyKey.#ctor(UnrealBuildTool.ConfigHierarchyType,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Constructor
            </summary>
            <param name="Type">The hierarchy type</param>
            <param name="ProjectDir">The project directory to read from</param>
            <param name="Platform">Which platform-specific files to read</param>
        </member>
        <member name="M:UnrealBuildTool.ConfigCache.ConfigHierarchyKey.Equals(System.Object)">
            <summary>
            Test whether this key is equal to another object
            </summary>
            <param name="Other">The object to compare against</param>
            <returns>True if the objects match, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCache.ConfigHierarchyKey.GetHashCode">
            <summary>
            Returns a stable hash of this object
            </summary>
            <returns>Hash value for this object</returns>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.NumConfigFileTypes">
            <summary>
            Stores the number of config file types
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.LocationToConfigFile">
            <summary>
            Cache of individual config files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.HierarchyKeyToHierarchy">
            <summary>
            Cache of config hierarchies by project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCache.TypeToConfigFields">
            <summary>
            Cache of config fields by type
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCache.TryReadFile(Tools.DotNETCommon.FileReference,UnrealBuildTool.ConfigFile@)">
            <summary>
            Attempts to read a config file (or retrieve it from the cache)
            </summary>
            <param name="Location">Location of the file to read</param>
            <param name="ConfigFile">On success, receives the parsed config file</param>
            <returns>True if the file exists and was read, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCache.ReadHierarchy(UnrealBuildTool.ConfigHierarchyType,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UnrealTargetPlatform,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Reads a config hierarchy (or retrieve it from the cache)
            </summary>
            <param name="Type">The type of hierarchy to read</param>
            <param name="ProjectDir">The project directory to read the hierarchy for</param>
            <param name="Platform">Which platform to read platform-specific config files for</param>
            <param name="GeneratedConfigDir">Base directory for generated configs</param>
            <returns>The requested config hierarchy</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCache.FindConfigFieldsForType(System.Type)">
            <summary>
            Gets a list of ConfigFields for the given type
            </summary>
            <param name="TargetObjectType">Type to get configurable fields for</param>
            <returns>List of config fields for the given type</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCache.ReadSettings(Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UnrealTargetPlatform,System.Object)">
            <summary>
            Read config settings for the given object
            </summary>
            <param name="ProjectDir">Path to the project directory</param>
            <param name="Platform">The platform being built</param>
            <param name="TargetObject">Object to receive the settings</param>
        </member>
        <member name="M:UnrealBuildTool.ConfigCache.TryParseValue(System.String,System.Type,System.Object@)">
            <summary>
            Attempts to parse the given text into an object which matches a specific field type
            </summary>
            <param name="Text">The text to parse</param>
            <param name="FieldType">The type of field to parse</param>
            <param name="Value">If successful, a value of type 'FieldType'</param>
            <returns>True if the value could be parsed, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.ConfigLineAction">
            <summary>
            Specifies the action to take for a config line, as denoted by its prefix.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigLineAction.Set">
            <summary>
            Assign the value to the key
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigLineAction.Add">
            <summary>
            Add the value to the key (denoted with +X=Y in config files)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigLineAction.RemoveKey">
            <summary>
            Remove the key without having to match value (denoted with !X in config files)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigLineAction.RemoveKeyValue">
            <summary>
            Remove the matching key and value (denoted with -X=Y in config files)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ConfigLine">
            <summary>
            Contains a pre-parsed raw config line, consisting of action, key and value components.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigLine.Action">
            <summary>
            The action to take when merging this key/value pair with an existing value
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigLine.Key">
            <summary>
            Name of the key to modify
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigLine.Value">
            <summary>
            Value to assign to the key
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigLine.#ctor(UnrealBuildTool.ConfigLineAction,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="Action">Action to take when merging this key/value pair with an existing value</param>
            <param name="Key">Name of the key to modify</param>
            <param name="Value">Value to assign</param>
        </member>
        <member name="M:UnrealBuildTool.ConfigLine.ToString">
            <summary>
            Formats this object for the debugger
            </summary>
            <returns>The original config line</returns>
        </member>
        <member name="T:UnrealBuildTool.ConfigFileSection">
            <summary>
            Contains the lines which appeared in a config section, with all comments and whitespace removed
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigFileSection.Name">
            <summary>
            Name of the section
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigFileSection.Lines">
            <summary>
            Lines which appeared in the config section
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigFileSection.#ctor(System.String)">
            <summary>
            Construct an empty config section with the given name
            </summary>
            <param name="Name">Name of the config section</param>
        </member>
        <member name="T:UnrealBuildTool.ConfigFile">
            <summary>
            Represents a single config file as stored on disk. 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigFile.Sections">
            <summary>
            Maps names to config sections
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigFile.#ctor(Tools.DotNETCommon.FileReference,UnrealBuildTool.ConfigLineAction)">
            <summary>
            Reads config data from the given file.
            </summary>
            <param name="Location">File to read from</param>
            <param name="DefaultAction">The default action to take when encountering arrays without a '+' prefix</param>
        </member>
        <member name="M:UnrealBuildTool.ConfigFile.#ctor(System.String,UnrealBuildTool.ConfigLineAction)">
            <summary>
            Reads config data from the given string.
            </summary>
            <param name="IniText">Single line string of config settings in the format [Section1]:Key1=Value1,[Section2]:Key2=Value2</param>
            <param name="DefaultAction">The default action to take when encountering arrays without a '+' prefix</param>
        </member>
        <member name="M:UnrealBuildTool.ConfigFile.TryAddConfigLine(UnrealBuildTool.ConfigFileSection,System.String,System.Int32,System.Int32,UnrealBuildTool.ConfigLineAction)">
            <summary>
            Try to parse a key/value pair from the given line, and add it to a config section
            </summary>
            <param name="Section">The section to receive the parsed config line</param>
            <param name="Line">Text to parse</param>
            <param name="StartIdx">Index of the first non-whitespace character in this line</param>
            <param name="EndIdx">Index of the last (exclusive) non-whitespace character in this line</param>
            <param name="DefaultAction">The default action to take if '+' or '-' is not specified on a config line</param>
            <returns>True if the line was parsed correctly, false otherwise</returns>
        </member>
        <member name="P:UnrealBuildTool.ConfigFile.SectionNames">
            <summary>
            Names of sections in this file
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigFile.TryGetSection(System.String,UnrealBuildTool.ConfigFileSection@)">
            <summary>
            Tries to get a config section by name
            </summary>
            <param name="SectionName">Name of the section to look for</param>
            <param name="RawSection">On success, the config section that was found</param>
            <returns>True if the section was found, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigFile.Write(Tools.DotNETCommon.FileReference)">
            <summary>
            Write the config file out to the given location. Useful for debugging.
            </summary>
            <param name="Location">The file to write</param>
        </member>
        <member name="T:UnrealBuildTool.ConfigFileAttribute">
            <summary>
            Attribute indicating a value which should be populated from a UE4 .ini config file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigFileAttribute.ConfigType">
            <summary>
            Name of the config hierarchy to read from
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigFileAttribute.SectionName">
            <summary>
            Section containing the setting
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigFileAttribute.KeyName">
            <summary>
            Key name to search for
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigFileAttribute.#ctor(UnrealBuildTool.ConfigHierarchyType,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="ConfigType">Type of the config hierarchy to read from</param>
            <param name="SectionName">Section containing the setting</param>
            <param name="KeyName">Key name to search for. Optional; uses the name of the field if not set.</param>
        </member>
        <member name="T:UnrealBuildTool.ConfigHierarchyType">
            <summary>
            Types of config file hierarchy
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchyType.Game">
            <summary>
            BaseGame.ini, DefaultGame.ini, etc...
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchyType.Engine">
            <summary>
            BaseEngine.ini, DefaultEngine.ini, etc...
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchyType.EditorPerProjectUserSettings">
            <summary>
            BaseEditorPerProjectUserSettings.ini, DefaultEditorPerProjectUserSettings.ini, etc..
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchyType.Encryption">
            <summary>
            BaseEncryption.ini, DefaultEncryption.ini, etc..
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchyType.Crypto">
            <summary>
            BaseCrypto.ini, DefaultCrypto.ini, etc..
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchyType.EditorSettings">
            <summary>
            BaseEditorSettings.ini, DefaultEditorSettings.ini, etc...
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ConfigHierarchySection">
            <summary>
            Stores a set of merged key/value pairs for a config section
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchySection.KeyToValue">
            <summary>
            Map of key names to their values
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchySection.#ctor(System.Collections.Generic.IEnumerable{UnrealBuildTool.ConfigFileSection})">
            <summary>
            Construct a merged config section from the given per-file config sections
            </summary>
            <param name="FileSections">Config sections from individual files</param>
        </member>
        <member name="P:UnrealBuildTool.ConfigHierarchySection.KeyNames">
            <summary>
            Returns a list of key names
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchySection.TryGetValue(System.String,System.String@)">
            <summary>
            Tries to find the value for a given key
            </summary>
            <param name="KeyName">The key name to search for</param>
            <param name="Value">On success, receives the corresponding value</param>
            <returns>True if the key was found, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchySection.TryGetValues(System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Tries to find the values for a given key
            </summary>
            <param name="KeyName">The key name to search for</param>
            <param name="Values">On success, receives a list of the corresponding values</param>
            <returns>True if the key was found, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.ConfigHierarchy">
            <summary>
            Encapsulates a hierarchy of config files, merging sections from them together on request 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchy.Files">
            <summary>
            Array of 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchy.NameToSection">
            <summary>
            Cache of requested config sections
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigHierarchy.NameToSectionLock">
            <summary>
            Lock for NameToSection
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.#ctor(System.Collections.Generic.IEnumerable{UnrealBuildTool.ConfigFile})">
            <summary>
            Construct a config hierarchy from the given files
            </summary>
            <param name="Files">Set of files to include (in order)</param>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.FindSection(System.String)">
            <summary>
            Finds a config section with the given name
            </summary>
            <param name="SectionName">Name of the section to look for</param>
            <returns>The merged config section</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.GetBool(System.String,System.String,System.Boolean@)">
            <summary>
            Legacy function for ease of transition from ConfigCacheIni to ConfigHierarchy. Gets a bool with the given key name.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.GetArray(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Legacy function for ease of transition from ConfigCacheIni to ConfigHierarchy. Gets a string with the given key name, returning an empty string on failure.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Values">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.GetString(System.String,System.String,System.String@)">
            <summary>
            Legacy function for ease of transition from ConfigCacheIni to ConfigHierarchy. Gets a string with the given key name, returning an empty string on failure.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.GetInt32(System.String,System.String,System.Int32@)">
            <summary>
            Legacy function for ease of transition from ConfigCacheIni to ConfigHierarchy. Gets an int with the given key name.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryGetValue(System.String,System.String,System.String@)">
            <summary>
            Gets a single string value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryGetValue(System.String,System.String,System.Boolean@)">
            <summary>
            Gets a single bool value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryGetValue(System.String,System.String,System.Int32@)">
            <summary>
            Gets a single Int32 value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryGetValue(System.String,System.String,System.Guid@)">
            <summary>
            Gets a single GUID value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryGetValue(System.String,System.String,System.Single@)">
            <summary>
            Gets a single-precision floating point value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryGetValue(System.String,System.String,System.Double@)">
            <summary>
            Gets a double-precision floating point value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="KeyName">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryGetValues(System.String,System.String,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Gets all values associated with the specified key
            </summary>
            <param name="SectionName">Section where the key is located</param>
            <param name="KeyName">Key name</param>
            <param name="Values">Copy of the list containing all values associated with the specified key</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryParse(System.String,System.Boolean@)">
            <summary>
            Parse a string as a boolean value
            </summary>
            <param name="Text">The text to parse</param>
            <param name="Value">The parsed value, if successful</param>
            <returns>True if the text was parsed, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryParse(System.String,System.Int32@)">
            <summary>
            Parse a string as an integer value
            </summary>
            <param name="Text">The text to parse</param>
            <param name="Value">The parsed value, if successful</param>
            <returns>True if the text was parsed, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryParse(System.String,System.Guid@)">
            <summary>
            Parse a string as a GUID value
            </summary>
            <param name="Text">The text to parse</param>
            <param name="Value">The parsed value, if successful</param>
            <returns>True if the text was parsed, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryParse(System.String,System.Single@)">
            <summary>
            Parse a string as a single-precision floating point value
            </summary>
            <param name="Text">The text to parse</param>
            <param name="Value">The parsed value, if successful</param>
            <returns>True if the text was parsed, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryParse(System.String,System.Double@)">
            <summary>
            Parse a string as a double-precision floating point value
            </summary>
            <param name="Text">The text to parse</param>
            <param name="Value">The parsed value, if successful</param>
            <returns>True if the text was parsed, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.TryParse(System.String,System.Collections.Generic.Dictionary{System.String,System.String}@)">
            <summary>
            Attempts to parse the given line as a UE4 config object (eg. (Name="Foo",Number=1234)).
            </summary>
            <param name="Line">Line of text to parse</param>
            <param name="Properties">Receives key/value pairs for the config object</param>
            <returns>True if an object was parsed, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.EnumerateConfigFileLocations(UnrealBuildTool.ConfigHierarchyType,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Returns a list of INI filenames for the given project
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.GetIniPlatformName(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Returns the platform name to use as part of platform-specific config files
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigHierarchy.GetIniPlatformParentName(System.String)">
            <summary>
            Returns the ConfigDataDrivenPlatformInfo for the given platform, or null if nothing was found
            </summary>
        </member>
        <member name="T:UnrealBuildTool.CustomBuildSteps">
            <summary>
            Stores custom build steps to be executed by a project or plugin
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CustomBuildSteps.#ctor(Tools.DotNETCommon.JsonObject)">
            <summary>
            Construct a custom build steps object from a Json object.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CustomBuildSteps.TryRead(Tools.DotNETCommon.JsonObject,System.String,UnrealBuildTool.CustomBuildSteps@)">
            <summary>
            Reads a list of build steps from a Json project or plugin descriptor
            </summary>
            <param name="RawObject">The json descriptor object</param>
            <param name="FieldName">Name of the field to read</param>
            <param name="OutBuildSteps">Output variable to store the sorted dictionary that was read</param>
            <returns>True if the field was read (and OutBuildSteps is set), false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.CustomBuildSteps.Write(Tools.DotNETCommon.JsonWriter,System.String)">
            <summary>
            Reads a list of build steps from a Json project or plugin descriptor
            </summary>
            <param name="Writer">Writer to receive json output</param>
            <param name="FieldName">Name of the field to read</param>
            <returns>True if the field was read (and OutBuildSteps is set), false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.CustomBuildSteps.TryGetCommands(UnrealBuildTool.UnrealTargetPlatform,System.String[]@)">
            <summary>
            Tries to get the commands for a given host platform
            </summary>
            <param name="HostPlatform">The host platform to look for</param>
            <param name="OutCommands">Array of commands</param>
            <returns>True if a list of commands was generated</returns>
        </member>
        <member name="T:UnrealBuildTool.EProjectType">
            <summary>
            The project type that support is required for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EProjectType.Unknown">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EProjectType.Any">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EProjectType.Code">
            <summary>
            Support for code projects
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EProjectType.Content">
            <summary>
            Support for deploying content projects
            </summary>
        </member>
        <member name="T:UnrealBuildTool.InstalledPlatformInfo">
            <summary>
            Contains methods to allow querying the available installed platforms
            </summary>
        </member>
        <member name="T:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration">
            <summary>
            Information about a single installed platform configuration
            </summary>
        </member>
        <member name="F:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration.Configuration">
            <summary>
            Build Configuration of this combination
            </summary>
        </member>
        <member name="F:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration.Platform">
            <summary>
            Platform for this combination
            </summary>
        </member>
        <member name="F:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration.PlatformType">
            <summary>
            Type of Platform for this combination
            </summary>
        </member>
        <member name="F:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration.Architecture">
            <summary>
            Architecture for this combination
            </summary>
        </member>
        <member name="F:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration.RequiredFile">
            <summary>
            Location of a file that must exist for this combination to be valid (optional)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration.ProjectType">
            <summary>
            Type of project this configuration can be used for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration.bCanBeDisplayed">
            <summary>
            Whether to display this platform as an option even if it is not valid
            </summary>
        </member>
        <member name="M:UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration.#ctor(UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.TargetType,System.String,System.String,UnrealBuildTool.EProjectType,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="InConfiguration"></param>
            <param name="InPlatform"></param>
            <param name="InPlatformType"></param>
            <param name="InArchitecture"></param>
            <param name="InRequiredFile"></param>
            <param name="InProjectType"></param>
            <param name="bInCanBeDisplayed"></param>
        </member>
        <member name="M:UnrealBuildTool.InstalledPlatformInfo.IsValidConfiguration(UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.EProjectType)">
            <summary>
            Determine if the given configuration is available for any platform
            </summary>
            <param name="Configuration">Configuration type to check</param>
            <param name="ProjectType">The type of project</param>
            <returns>True if supported</returns>
        </member>
        <member name="M:UnrealBuildTool.InstalledPlatformInfo.IsValidPlatform(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.EProjectType)">
            <summary>
            Determine if the given platform is available
            </summary>
            <param name="Platform">Platform to check</param>
            <param name="ProjectType">The type of project</param>
            <returns>True if supported</returns>
        </member>
        <member name="M:UnrealBuildTool.InstalledPlatformInfo.IsValidPlatformAndConfiguration(UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.EProjectType)">
            <summary>
            Determine whether the given platform/configuration/project type combination is supported
            </summary>
            <param name="Configuration">Configuration for the project</param>
            <param name="Platform">Platform for the project</param>
            <param name="ProjectType">Type of the project</param>
            <returns>True if the combination is supported</returns>
        </member>
        <member name="M:UnrealBuildTool.InstalledPlatformInfo.WriteConfigFileEntries(System.Collections.Generic.List{UnrealBuildTool.InstalledPlatformInfo.InstalledPlatformConfiguration},System.Collections.Generic.List{System.String}@)">
            <summary>
            
            </summary>
            <param name="Configs"></param>
            <param name="OutEntries"></param>
        </member>
        <member name="T:UnrealBuildTool.LocalizationTargetDescriptorLoadingPolicy">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalizationTargetDescriptorLoadingPolicy.Never">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalizationTargetDescriptorLoadingPolicy.Always">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalizationTargetDescriptorLoadingPolicy.Editor">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalizationTargetDescriptorLoadingPolicy.Game">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalizationTargetDescriptorLoadingPolicy.PropertyNames">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalizationTargetDescriptorLoadingPolicy.ToolTips">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnrealBuildTool.LocalizationTargetDescriptor">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalizationTargetDescriptor.Name">
            <summary>
            Name of this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalizationTargetDescriptor.LoadingPolicy">
            <summary>
            When should the localization data associated with a target should be loaded?
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LocalizationTargetDescriptor.#ctor(System.String,UnrealBuildTool.LocalizationTargetDescriptorLoadingPolicy)">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of the target</param>
            <param name="InLoadingPolicy">When should the localization data associated with a target should be loaded?</param>
        </member>
        <member name="M:UnrealBuildTool.LocalizationTargetDescriptor.FromJsonObject(Tools.DotNETCommon.JsonObject)">
            <summary>
            Constructs a LocalizationTargetDescriptor from a Json object
            </summary>
            <param name="InObject"></param>
            <returns>The new localization target descriptor</returns>
        </member>
        <member name="M:UnrealBuildTool.LocalizationTargetDescriptor.Write(Tools.DotNETCommon.JsonWriter)">
            <summary>
            Write this target to a JsonWriter
            </summary>
            <param name="Writer">Writer to output to</param>
        </member>
        <member name="M:UnrealBuildTool.LocalizationTargetDescriptor.WriteArray(Tools.DotNETCommon.JsonWriter,System.String,UnrealBuildTool.LocalizationTargetDescriptor[])">
            <summary>
            Write an array of target descriptors
            </summary>
            <param name="Writer">The Json writer to output to</param>
            <param name="Name">Name of the array</param>
            <param name="Targets">Array of targets</param>
        </member>
        <member name="T:UnrealBuildTool.ObsoleteOverrideAttribute">
            <summary>
            Attribute used to denote that a method should no longer be overriden. Used by RulesCompiler.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ObsoleteOverrideAttribute.Message">
            <summary>
            Message to display to the user if the method is overridden.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ObsoleteOverrideAttribute.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Message">Message to display to the user if the method is overridden</param>
        </member>
        <member name="T:UnrealBuildTool.ProgressWriter">
            <summary>
            Class to display an incrementing progress percentage. Handles progress markup and direct console output.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProgressWriter.bWriteMarkup">
            <summary>
            Global setting controlling whether to output markup
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProgressWriter.bWriteToConsole">
            <summary>
            Whether to write messages to the console
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProgressWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="InMessage">The message to display before the progress percentage</param>
            <param name="bInWriteToConsole">Whether to write progress message to the console</param>
        </member>
        <member name="M:UnrealBuildTool.ProgressWriter.Dispose">
            <summary>
            Write the terminating newline
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProgressWriter.LogMessage(UnrealBuildTool.LogEventType,System.String,System.Object[])">
            <summary>
            Write a message to the log, clearing the current progress percentage first
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProgressWriter.Write(System.Int32,System.Int32)">
            <summary>
            Writes the current progress
            </summary>
            <param name="Numerator">Numerator for the progress fraction</param>
            <param name="Denominator">Denominator for the progress fraction</param>
        </member>
        <member name="T:UnrealBuildTool.RestrictedFolder">
            <summary>
            Names of restricted folders. Note: The name of each entry is used to search for/create folders
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RestrictedFolder.CarefullyRedist">
            <summary>
            Can be used by UE4 but not required
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RestrictedFolder.NotForLicensees">
            <summary>
            Epic Employees and Contractors
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RestrictedFolder.NoRedist">
            <summary>
            Epic Employees only
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RestrictedFolder.PS4">
            <summary>
            Playstation 4 source files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RestrictedFolder.XboxOne">
            <summary>
            XboxOne source files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RestrictedFolder.Switch">
            <summary>
            Switch source files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RestrictedFolder.Quail">
            <summary>
            Quail source files
            </summary>
        </member>
        <member name="T:UnrealBuildTool.RestrictedFolders">
            <summary>
            Utility functions for getting restricted folder
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RestrictedFolders.RestrictedFolderNames">
            <summary>
            Keeps a cache of folder substrings and flags
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RestrictedFolders.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RestrictedFolders.FindRestrictedFolders(Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Finds all the restricted folder names relative to a base directory
            </summary>
            <param name="BaseDir">The base directory to check against</param>
            <param name="OtherDir">The file or directory to check</param>
            <returns>Array of restricted folder names</returns>
        </member>
        <member name="T:UnrealBuildTool.RulesAssembly">
            <summary>
            Stores information about a compiled rules assembly and the types it contains
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.CompiledAssembly">
            <summary>
            The compiled assembly
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.Plugins">
            <summary>
            All the plugins included in this assembly
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.ModuleNameToModuleFile">
            <summary>
            Maps module names to their actual xxx.Module.cs file on disk
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.TargetNameToTargetFile">
            <summary>
            Maps target names to their actual xxx.Target.cs file on disk
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.ModuleFileToPluginInfo">
            <summary>
            Mapping from module file to its plugin info.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.ModuleHasSource">
            <summary>
            Cache for whether a module has source code
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.bContainsEngineModules">
            <summary>
            Whether this assembly contains engine modules. Used to set default values for bTreatAsEngineModule.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.bUseBackwardsCompatibleDefaults">
            <summary>
            Whether to use backwards compatible default settings for module and target rules. This is enabled by default for game projects to support a simpler migration path, but
            is disabled for engine modules.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.bInstalled">
            <summary>
            Whether the modules and targets in this assembly are installed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesAssembly.Parent">
            <summary>
            The parent rules assembly that this assembly inherits. Game assemblies inherit the engine assembly, and the engine assembly inherits nothing.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.#ctor(System.Collections.Generic.IReadOnlyList{UnrealBuildTool.PluginInfo},System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.Dictionary{Tools.DotNETCommon.FileReference,UnrealBuildTool.PluginInfo},Tools.DotNETCommon.FileReference,System.Boolean,System.Boolean,System.Boolean,UnrealBuildTool.RulesAssembly)">
            <summary>
            Constructor. Compiles a rules assembly from the given source files.
            </summary>
            <param name="Plugins">All the plugins included in this assembly</param>
            <param name="ModuleFiles">List of module files to compile</param>
            <param name="TargetFiles">List of target files to compile</param>
            <param name="ModuleFileToPluginInfo">Mapping of module file to the plugin that contains it</param>
            <param name="AssemblyFileName">The output path for the compiled assembly</param>
            <param name="bContainsEngineModules">Whether this assembly contains engine modules. Used to initialize the default value for ModuleRules.bTreatAsEngineModule.</param>
            <param name="bUseBackwardsCompatibleDefaults">Whether modules in this assembly should use backwards-compatible defaults.</param>
            <param name="bInstalled">Whether the modules and targets in this assembly are installed, and should be created with the bUsePrecompiled flag set</param> 
            <param name="Parent">The parent rules assembly</param>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.GetPreprocessorDefinitions">
            <summary>
            Finds all the preprocessor definitions that need to be set for the current engine.
            </summary>
            <returns>List of preprocessor definitions that should be set</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.GetAllModuleNames(System.Collections.Generic.List{System.String})">
            <summary>
            Fills a list with all the module names in this assembly (or its parent)
            </summary>
            <param name="ModuleNames">List to receive the module names</param>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.TryGetFileNameFromType(System.Type,Tools.DotNETCommon.FileReference@)">
            <summary>
            Tries to get the filename that declared the given type
            </summary>
            <param name="ExistingType"></param>
            <param name="File"></param>
            <returns>True if the type was found, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.GetModuleFileName(System.String)">
            <summary>
            Gets the source file containing rules for the given module
            </summary>
            <param name="ModuleName">The name of the module</param>
            <returns>The filename containing rules for this module, or an empty string if not found</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.GetModuleRulesType(System.String)">
            <summary>
            Gets the type defining rules for the given module
            </summary>
            <param name="ModuleName">The name of the module</param>
            <returns>The rules type for this module, or null if not found</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.GetModuleRulesTypeInternal(System.String)">
            <summary>
            Gets the type defining rules for the given module within this assembly
            </summary>
            <param name="ModuleName">The name of the module</param>
            <returns>The rules type for this module, or null if not found</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.GetTargetFileName(System.String)">
            <summary>
            Gets the source file containing rules for the given target
            </summary>
            <param name="TargetName">The name of the target</param>
            <returns>The filename containing rules for this target, or an empty string if not found</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.CreateModuleRules(System.String,UnrealBuildTool.ReadOnlyTargetRules,System.String)">
            <summary>
            Creates an instance of a module rules descriptor object for the specified module name
            </summary>
            <param name="ModuleName">Name of the module</param>
            <param name="ReferenceChain">Chain of references leading to this module</param>
            <param name="Target">Information about the target associated with this module</param>
            <returns>Compiled module rule info</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.CreateModuleRules(System.String,UnrealBuildTool.ReadOnlyTargetRules,System.String,Tools.DotNETCommon.FileReference@)">
            <summary>
            Creates an instance of a module rules descriptor object for the specified module name
            </summary>
            <param name="ModuleName">Name of the module</param>
            <param name="Target">Information about the target associated with this module</param>
            <param name="ReferenceChain">Chain of references leading to this module</param>
            <param name="ModuleFileName">The original source file name for the Module.cs file for this module</param>
            <returns>Compiled module rule info</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.IsGameModule(System.String)">
            <summary>
            Determines whether the given module name is a game module (as opposed to an engine module)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.CreateTargetRulesInstance(System.String,UnrealBuildTool.TargetInfo)">
            <summary>
            Construct an instance of the given target rules
            </summary>
            <param name="TypeName">Type name of the target rules</param>
            <param name="TargetInfo">Target configuration information to pass to the constructor</param>
            <returns>Instance of the corresponding TargetRules</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.CreateTargetRules(System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,Tools.DotNETCommon.FileReference,UnrealBuildTool.ReadOnlyBuildVersion)">
            <summary>
            Creates a target rules object for the specified target name.
            </summary>
            <param name="TargetName">Name of the target</param>
            <param name="Platform">The platform that the target is being built for</param>
            <param name="Configuration">The configuration the target is being built for</param>
            <param name="Architecture">The architecture the target is being built for</param>
            <param name="ProjectFile">The project containing the target being built</param>
            <param name="Version">The current build version</param>
            <returns>The build target rules for the specified target</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.CreateTargetRules(System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,Tools.DotNETCommon.FileReference,UnrealBuildTool.ReadOnlyBuildVersion,Tools.DotNETCommon.FileReference@)">
            <summary>
            Creates a target rules object for the specified target name.
            </summary>
            <param name="TargetName">Name of the target</param>
            <param name="Platform">Platform being compiled</param>
            <param name="Configuration">Configuration being compiled</param>
            <param name="Architecture">Architecture being built</param>
            <param name="ProjectFile">Path to the project file for this target</param>
            <param name="Version">The current build version</param>
            <param name="TargetFileName">The original source file name of the Target.cs file for this target</param>
            <returns>The build target rules for the specified target</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.GetTargetNameByType(UnrealBuildTool.TargetType,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,Tools.DotNETCommon.FileReference,UnrealBuildTool.ReadOnlyBuildVersion)">
            <summary>
            Determines a target name based on the type of target we're trying to build
            </summary>
            <param name="Type">The type of target to look for</param>
            <param name="Platform">The platform being built</param>
            <param name="Configuration">The configuration being built</param>
            <param name="Architecture">The architecture being built</param>
            <param name="ProjectFile">Project file for the target being built</param>
            <param name="Version">The current engine version information</param>
            <returns>Name of the target for the given type</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.EnumeratePlugins">
            <summary>
            Enumerates all the plugins that are available
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.EnumeratePluginsInternal">
            <summary>
            Enumerates all the plugins that are available
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.RulesAssembly.TryGetPluginForModule(Tools.DotNETCommon.FileReference,UnrealBuildTool.PluginInfo@)">
            <summary>
            Tries to find the PluginInfo associated with a given module file
            </summary>
            <param name="ModuleFile">The module to search for</param>
            <param name="Plugin">The matching plugin info, or null.</param>
            <returns>True if the module belongs to a plugin</returns>
        </member>
        <member name="T:UnrealBuildTool.ScopedTimer">
            <summary>
            Scoped timer, start is in the constructor, end in Dispose. Best used with using(ScopedTimer Timer = new ScopedTimer()). Suports nesting.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ScopedTimer.#ctor(System.String,UnrealBuildTool.LogEventType)">
            <summary>
            Constructor
            </summary>
            <param name="Name">Name of the block being measured</param>
            <param name="InVerbosity">Verbosity for output messages</param>
        </member>
        <member name="M:UnrealBuildTool.ScopedTimer.Dispose">
            <summary>
            Prints out the timing message
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ISourceFileWorkingSet">
            <summary>
            Defines an interface which allows querying the working set. Files which are in the working set are excluded from unity builds, to improve iterative compile times.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ISourceFileWorkingSet.Contains(Tools.DotNETCommon.FileReference)">
            <summary>
            Checks if the given file is part of the working set
            </summary>
            <param name="File">File to check</param>
            <returns>True if the file is part of the working set, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.EmptySourceFileWorkingSet">
            <summary>
            Implementation of ISourceFileWorkingSet which does not contain any files
            </summary>
        </member>
        <member name="M:UnrealBuildTool.EmptySourceFileWorkingSet.Dispose">
            <summary>
            Dispose of the current instance.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.EmptySourceFileWorkingSet.Contains(Tools.DotNETCommon.FileReference)">
            <summary>
            Checks if the given file is part of the working set
            </summary>
            <param name="File">File to check</param>
            <returns>True if the file is part of the working set, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.PerforceSourceFileWorkingSet">
            <summary>
            Queries the working set for files tracked by Perforce.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PerforceSourceFileWorkingSet.Dispose">
            <summary>
            Dispose of the current instance.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PerforceSourceFileWorkingSet.Contains(Tools.DotNETCommon.FileReference)">
            <summary>
            Checks if the given file is part of the working set
            </summary>
            <param name="File">File to check</param>
            <returns>True if the file is part of the working set, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.GitSourceFileWorkingSet">
            <summary>
            Queries the working set for files tracked by Git.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.GitSourceFileWorkingSet.#ctor(System.String,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Constructor
            </summary>
            <param name="GitPath">Path to the Git executable</param>
            <param name="RootDir">Root directory to run queries from (typically the directory containing the .git folder, to ensure all subfolders can be searched)</param>
        </member>
        <member name="M:UnrealBuildTool.GitSourceFileWorkingSet.TerminateBackgroundProcess">
            <summary>
            Terminates the background process.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.GitSourceFileWorkingSet.WaitForBackgroundProcess">
            <summary>
            Waits for the background to terminate.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.GitSourceFileWorkingSet.Dispose">
            <summary>
            Dispose of this object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.GitSourceFileWorkingSet.Contains(Tools.DotNETCommon.FileReference)">
            <summary>
            Checks if the given file is part of the working set
            </summary>
            <param name="File">File to check</param>
            <returns>True if the file is part of the working set, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.GitSourceFileWorkingSet.OutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Parse output text from Git
            </summary>
        </member>
        <member name="M:UnrealBuildTool.GitSourceFileWorkingSet.ErrorDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Handle error output text from Git
            </summary>
        </member>
        <member name="M:UnrealBuildTool.GitSourceFileWorkingSet.AddPath(System.String)">
            <summary>
            Add a path to the working set
            </summary>
            <param name="Path">Path to be added</param>
        </member>
        <member name="T:UnrealBuildTool.SourceFileWorkingSet">
            <summary>
            Utility class for ISourceFileWorkingSet
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SourceFileWorkingSet.Provider">
            <summary>
            Sets the provider to use for determining the working set
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SourceFileWorkingSet.RepositoryPath">
            <summary>
            Sets the path to use for the repository. Interpreted relative to the UE root directory (ie. folder above the Engine folder) if relative.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SourceFileWorkingSet.GitPath">
            <summary>
            Sets the path to use for the Git executable. Defaults to "git" (assuming it's in the PATH).
            </summary>
        </member>
        <member name="M:UnrealBuildTool.SourceFileWorkingSet.Create(Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Create an ISourceFileWorkingSet instance suitable for the given project or root directory
            </summary>
            <param name="RootDir">The root directory</param>
            <param name="ProjectDir">The current project</param>
            <returns>Working set instance for the given directory</returns>
        </member>
        <member name="M:UnrealBuildTool.SourceFileWorkingSet.TryGetGitRepositoryPath(Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Tries to find the directory containing a git repository
            </summary>
            <param name="RootDir">Root directory containing the engine folder</param>
            <param name="ProjectDir">Directory containing the project</param>
            <param name="RepoDir">On success, receives the path to the repository</param>
            <returns>True if a Git repository was found, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.StartupTraceListener">
            <summary>
            Captures all log output during startup until a log file writer has been created
            </summary>
        </member>
        <member name="M:UnrealBuildTool.StartupTraceListener.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.StartupTraceListener.CopyTo(System.Diagnostics.TraceListener)">
            <summary>
            Copy the contents of the buffered output to another trace listener
            </summary>
            <param name="Other">The trace listener to receive the buffered output</param>
        </member>
        <member name="M:UnrealBuildTool.StartupTraceListener.Write(System.String)">
            <summary>
            Write a message to the buffer
            </summary>
            <param name="Message">The message to write</param>
        </member>
        <member name="M:UnrealBuildTool.StartupTraceListener.WriteLine(System.String)">
            <summary>
            Write a message to the buffer, followed by a newline
            </summary>
            <param name="Message">The message to write</param>
        </member>
        <member name="T:UnrealBuildTool.StreamUtils">
            <summary>
            Extension methods for Stream classes
            </summary>
        </member>
        <member name="M:UnrealBuildTool.StreamUtils.ReadFrom(System.IO.Stream,System.IO.Stream)">
            <summary>
            Read a stream into another, buffering in 4K chunks.
            </summary>
            <param name="output">this</param>
            <param name="input">the Stream to read from</param>
            <returns>same stream for expression chaining.</returns>
        </member>
        <member name="M:UnrealBuildTool.StreamUtils.ReadFrom(System.IO.Stream,System.IO.Stream,System.Int64@)">
            <summary>
            Read a stream into another, buffering in 4K chunks.
            </summary>
            <param name="output">this</param>
            <param name="input">the Stream to read from</param>
            <param name="totalBytesRead">returns bytes read</param>
            <returns>same stream for expression chaining.</returns>
        </member>
        <member name="M:UnrealBuildTool.StreamUtils.ReadIntoMemoryStream(System.IO.Stream)">
            <summary>
            Read stream into a new MemoryStream. Useful for chaining together expressions.
            </summary>
            <param name="input">Stream to read from.</param>
            <returns>memory stream that contains the stream contents.</returns>
        </member>
        <member name="M:UnrealBuildTool.StreamUtils.Write(System.IO.Stream,System.Byte[])">
            <summary>
            Writes the entire contents of a byte array to the stream.
            </summary>
            <param name="stream"></param>
            <param name="arr"></param>
            <returns></returns>
        </member>
        <member name="T:UnrealBuildTool.SupportedConfigurationsAttribute">
            <summary>
            Attribute which can be applied to a TargetRules-dervied class to indicate which configurations it supports
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SupportedConfigurationsAttribute.Configurations">
            <summary>
            Array of supported platforms
            </summary>
        </member>
        <member name="M:UnrealBuildTool.SupportedConfigurationsAttribute.#ctor(UnrealBuildTool.UnrealTargetConfiguration[])">
            <summary>
            Initialize the attribute with a list of configurations
            </summary>
            <param name="Configurations">Variable-length array of configuration arguments</param>
        </member>
        <member name="T:UnrealBuildTool.SupportedPlatformsAttribute">
            <summary>
            Attribute which can be applied to a TargetRules-dervied class to indicate which platforms it supports
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SupportedPlatformsAttribute.Platforms">
            <summary>
            Array of supported platforms
            </summary>
        </member>
        <member name="M:UnrealBuildTool.SupportedPlatformsAttribute.#ctor(UnrealBuildTool.UnrealTargetPlatform[])">
            <summary>
            Initialize the attribute with a list of platforms
            </summary>
            <param name="Platforms">Variable-length array of platform arguments</param>
        </member>
        <member name="M:UnrealBuildTool.SupportedPlatformsAttribute.#ctor(UnrealBuildTool.UnrealPlatformClass)">
            <summary>
            Initialize the attribute with all the platforms in a given category
            </summary>
            <param name="Category">Category of platforms to add</param>
        </member>
        <member name="T:UnrealBuildTool.BuildProductType">
            <summary>
            Type of a build product
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.Executable">
            <summary>
            An executable file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.DynamicLibrary">
            <summary>
            A dynamically loaded module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.StaticLibrary">
            <summary>
            A statically linked library. Not required for the executable to run.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.ImportLibrary">
            <summary>
            An import library. Not required for the executable to run.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.SymbolFile">
            <summary>
            A symbol file. Not required for the executable to run.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.MapFile">
            <summary>
            A map file. Not required for the executable to run.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.RequiredResource">
            <summary>
            A resource file which was generated by the build and is required for the executable to run.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.BuildResource">
            <summary>
            A build resource which was generated by the build, but is not required for the executable to run.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProductType.Package">
            <summary>
            A package which can be deployed on device (eg. *.apk for Android, *.stub for iOS)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.BuildProduct">
            <summary>
            A file that was created as part of the build process
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProduct.Path">
            <summary>
            Path to the file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildProduct.Type">
            <summary>
            Type of the build product.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildProduct.#ctor">
            <summary>
            Private constructor, for serialization.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildProduct.#ctor(Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType)">
            <summary>
            Constructor.
            </summary>
            <param name="InPath">Path to the build product</param>
            <param name="InType">Type of the build product</param>
        </member>
        <member name="M:UnrealBuildTool.BuildProduct.#ctor(UnrealBuildTool.BuildProduct)">
            <summary>
            Copy constructor.
            </summary>
            <param name="Other">Build product to copy settings from</param>
        </member>
        <member name="M:UnrealBuildTool.BuildProduct.ToString">
            <summary>
            Convert this object to a string, for debugging.
            </summary>
            <returns>Path to this build product</returns>
        </member>
        <member name="T:UnrealBuildTool.StagedFileType">
            <summary>
            How a file may be staged
            </summary>
        </member>
        <member name="F:UnrealBuildTool.StagedFileType.UFS">
            <summary>
            Only accessed through Unreal filesystem functions; may be included in a PAK file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.StagedFileType.NonUFS">
            <summary>
            Must be kept as part of the loose filesystem.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.StagedFileType.DebugNonUFS">
            <summary>
            Debug file which must be kept as part of the loose filesystem.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.StagedFileType.SystemNonUFS">
            <summary>
            System file which must be kept as part of the loose filesystem. System files are not subject to being automatic remapping or renaming by the platform layer.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.RuntimeDependency">
            <summary>
            Information about a file which is required by the target at runtime, and must be moved around with it.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RuntimeDependency.Path">
            <summary>
            The file that should be staged. Should use $(EngineDir) and $(ProjectDir) variables as a root, so that the target can be relocated to different machines.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RuntimeDependency.Type">
            <summary>
            How to stage this file.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RuntimeDependency.#ctor">
            <summary>
            Private constructor, for serialization.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RuntimeDependency.#ctor(Tools.DotNETCommon.FileReference,UnrealBuildTool.StagedFileType)">
            <summary>
            Constructor
            </summary>
            <param name="InPath">Path to the runtime dependency</param>
            <param name="InType">How to stage the given path</param>
        </member>
        <member name="M:UnrealBuildTool.RuntimeDependency.#ctor(UnrealBuildTool.RuntimeDependency)">
            <summary>
            Copy constructor
            </summary>
            <param name="InOther">Runtime dependency to copy settings from</param>
        </member>
        <member name="M:UnrealBuildTool.RuntimeDependency.ToString">
            <summary>
            Convert this object to a string for debugging
            </summary>
            <returns>String representation of the object</returns>
        </member>
        <member name="T:UnrealBuildTool.RuntimeDependencyList">
            <summary>
            List of runtime dependencies, with convenience methods for adding new items
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RuntimeDependencyList.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RuntimeDependencyList.#ctor(System.Collections.Generic.IEnumerable{UnrealBuildTool.RuntimeDependency})">
            <summary>
            Copy constructor
            </summary>
            <param name="Other">Sequence of runtime dependencies to initialize with</param>
        </member>
        <member name="M:UnrealBuildTool.RuntimeDependencyList.Add(Tools.DotNETCommon.FileReference,UnrealBuildTool.StagedFileType)">
            <summary>
            Add a runtime dependency to the list
            </summary>
            <param name="InPath">Path to the runtime dependency. May include wildcards.</param>
            <param name="InType">How to stage this file</param>
        </member>
        <member name="T:UnrealBuildTool.ReceiptProperty">
            <summary>
            Arbitrary property name/value which metadata from the build scripts can be passed on to downstream tasks
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReceiptProperty.Name">
            <summary>
            Property name
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReceiptProperty.Value">
            <summary>
            Value of the property
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReceiptProperty.#ctor(System.String,System.String)">
            <summary>
            Construct a property with the given name and value
            </summary>
            <param name="InName">Name of the property</param>
            <param name="InValue">Value of the property</param>
        </member>
        <member name="T:UnrealBuildTool.TargetReceipt">
            <summary>
            Stores a record of a built target, with all metadata that other tools may need to know about the build.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.TargetName">
            <summary>
            The name of this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.Platform">
            <summary>
            Which platform the target is compiled for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.Configuration">
            <summary>
            Which configuration this target is compiled in
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.Version">
            <summary>
            Version information for this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.BuildProducts">
            <summary>
            The build products which are part of this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.RuntimeDependencies">
            <summary>
            All the runtime dependencies that this target relies on
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.PrecompiledBuildDependencies">
            <summary>
            All the files which are required to use precompiled binaries with this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.PrecompiledRuntimeDependencies">
            <summary>
            All the files which are required runtime dependencies for precompiled binaries that are part of this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.TargetReceipt.AdditionalProperties">
            <summary>
            Additional build properties passed through from the module rules
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.#ctor(System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.BuildVersion)">
            <summary>
            Constructor
            </summary>
            <param name="InTargetName">The name of the target being compiled</param>
            <param name="InPlatform">Platform for the target being compiled</param>
            <param name="InConfiguration">Configuration of the target being compiled</param>
            <param name="InVersion">Version information for the target</param>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.#ctor(UnrealBuildTool.TargetReceipt)">
            <summary>
            Copy constructor
            </summary>
            <param name="Other">Receipt to copy from</param>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.AddBuildProduct(Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType)">
            <summary>
            Adds a build product to the receipt. Does not check whether it already exists.
            </summary>
            <param name="Path">Path to the build product.</param>
            <param name="Type">Type of build product.</param>
            <returns>The BuildProduct object that was created</returns>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.Merge(UnrealBuildTool.TargetReceipt)">
            <summary>
            Merges another receipt to this one.
            </summary>
            <param name="Other">Receipt which should be merged</param>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.InsertPathVariables(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Inserts variables to make a file relative to $(EngineDir) or $(ProjectDir)
            </summary>
            <param name="File">The file to insert variables into.</param>
            <param name="EngineDir">Value of the $(EngineDir) variable.</param>
            <param name="ProjectDir">Value of the $(ProjectDir) variable.</param>
            <returns>Converted path for the file.</returns>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.ExpandPathVariables(System.String,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Inserts variables to make a file relative to $(EngineDir) or $(ProjectDir)
            </summary>
            <param name="Path">The path to insert variables into.</param>
            <param name="EngineDir">Value of the $(EngineDir) variable.</param>
            <param name="ProjectDir">Value of the $(ProjectDir) variable.</param>
            <returns>Converted path for the file.</returns>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.GetDefaultPath(Tools.DotNETCommon.DirectoryReference,System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String)">
            <summary>
            Returns the standard path to the build receipt for a given target
            </summary>
            <param name="BaseDir">Base directory for the target being built; either the project directory or engine directory.</param>
            <param name="TargetName">The target being built</param>
            <param name="Platform">The target platform</param>
            <param name="Configuration">The target configuration</param>
            <param name="BuildArchitecture">The architecture being built</param>
            <returns>Path to the receipt for this target</returns>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.GetStageTypeFromBuildProductType(UnrealBuildTool.BuildProduct)">
            <summary>
            Determine whether a BuildProduct Type is NonUFS or DebugNonUFS
            </summary>
            <param name="BuildProduct">The build product to check</param>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.Read(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Read a receipt from disk.
            </summary>
            <param name="Location">Filename to read from</param>
            <param name="EngineDir">Engine directory for expanded variables</param>
            <param name="ProjectDir">Project directory for expanded variables</param>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.TryRead(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.TargetReceipt@)">
            <summary>
            Try to read a receipt from disk, failing gracefully if it can't be read.
            </summary>
            <param name="Location">Filename to read from</param>
            <param name="EngineDir">Engine directory for expanded paths</param>
            <param name="ProjectDir">Project directory for expanded paths</param>
            <param name="Receipt">If successful, the receipt that was read</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.TargetReceipt.Write(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Write the receipt to disk.
            </summary>
            <param name="Location">Output filename</param>
            <param name="EngineDir">Engine directory for expanded paths</param>
            <param name="ProjectDir">Project directory for expanded paths</param>
        </member>
        <member name="T:UnrealBuildTool.UBTMakefile">
            <summary>
            A special Makefile that UBT is able to create in "-gather" mode, then load in "-assemble" mode to accelerate iterative compiling and linking
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UBTMakefile.AllActions">
            <summary>
            Every action in the action graph
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UBTMakefile.PrerequisiteActions">
            <summary>
            List of the actions that need to be run in order to build the targets' final output items
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UBTMakefile.EnvironmentVariables">
            <summary>
            Environment variables that we'll need in order to invoke the platform's compiler and linker
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UBTMakefile.TargetNameToUObjectModules">
            <summary>
            Maps each target to a list of UObject module info structures
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UBTMakefile.Targets">
            <summary>
            List of targets being built
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UBTMakefile.bUseAdaptiveUnityBuild">
            <summary>
            Whether adaptive unity build is enabled for any of these targets
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UBTMakefile.SourceFileWorkingSet">
            <summary>
            Current working set of source files, for when bUseAdaptiveUnityBuild is enabled
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UBTMakefile.CandidateSourceFilesForWorkingSet">
            <summary>
            Set of source files which are included in unity files, but which should invalidate the makefile if modified (for when bUseAdaptiveUnityBuild is enabled)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UBTMakefile.IsValidMakefile">
            <returns> True if this makefile's contents look valid.  Called after loading the file to make sure it is legit.</returns>
        </member>
        <member name="M:UnrealBuildTool.UBTMakefile.SaveUBTMakefile(System.Collections.Generic.List{UnrealBuildTool.TargetDescriptor},UnrealBuildTool.EHotReload,UnrealBuildTool.UBTMakefile)">
            <summary>
            Saves a UBTMakefile to disk
            </summary>
            <param name="TargetDescs">List of targets.  Order is not important</param>
            <param name="HotReload">The hot reload state</param>
            <param name="UBTMakefile">The UBT makefile</param>
        </member>
        <member name="M:UnrealBuildTool.UBTMakefile.LoadUBTMakefile(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,UnrealBuildTool.ISourceFileWorkingSet,System.String@)">
            <summary>
            Loads a UBTMakefile from disk
            </summary>
            <param name="MakefilePath">Path to the makefile to load</param>
            <param name="ProjectFile">Path to the project file</param>
            <param name="ReasonNotLoaded">If the function returns null, this string will contain the reason why</param>
            <param name="WorkingSet">Interface to query which source files are in the working set</param>
            <returns>The loaded makefile, or null if it failed for some reason.  On failure, the 'ReasonNotLoaded' variable will contain information about why</returns>
        </member>
        <member name="M:UnrealBuildTool.UBTMakefile.GetUBTMakefilePath(System.Collections.Generic.List{UnrealBuildTool.TargetDescriptor},UnrealBuildTool.EHotReload)">
            <summary>
            Gets the file path for a UBTMakefile
            </summary>
            <param name="TargetDescs">List of targets.  Order is not important</param>
            <param name="HotReload">The hot reload state.</param>
            <returns>UBTMakefile path</returns>
        </member>
        <member name="M:UnrealBuildTool.UBTMakefile.GetUBTMakefileDirectoryPathForSingleTarget(UnrealBuildTool.TargetDescriptor)">
            <summary>
            Gets the file path for a UBTMakefile for single target.
            </summary>
            <param name="Target">The target.</param>
            <returns>UBTMakefile path</returns>
        </member>
        <member name="M:UnrealBuildTool.UBTMakefile.MakeTargetCollectionName(System.Collections.Generic.List{UnrealBuildTool.TargetDescriptor})">
            <summary>
            Makes up a name for a set of targets that we can use for file or directory names
            </summary>
            <param name="TargetDescs">List of targets.  Order is not important</param>
            <returns>The name to use</returns>
        </member>
        <member name="T:UnrealBuildTool.UEConsoleTraceListener">
            <summary>
            Replacement class for System.Diagnostics.ConsoleTracerListener, which doesn't exist in .NET Core
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEConsoleTraceListener.Writer">
            <summary>
            Destination stream writer
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEConsoleTraceListener.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="bUseStandardError">TRUE if we are writing to the standard error stream, FALSE for standard output</param>
        </member>
        <member name="M:UnrealBuildTool.UEConsoleTraceListener.Write(System.String)">
            <summary>
            Writes a string of text to the output stream
            </summary>
            <param name="message">Message to write</param>
        </member>
        <member name="M:UnrealBuildTool.UEConsoleTraceListener.WriteLine(System.String)">
            <summary>
            Writes a line of text to the output stream
            </summary>
            <param name="message">MEssage to write</param>
        </member>
        <member name="T:UnrealBuildTool.VersionNumber">
            <summary>
            Stores a numeric version consisting of any number of components.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VersionNumber.Components">
            <summary>
            The individual version components
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.#ctor(System.Int32[])">
            <summary>
            Constructor
            </summary>
            <param name="Components">The individual version components. At least one value must be given.</param>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.GetComponent(System.Int32)">
            <summary>
            Returns the component at the given index
            </summary>
            <param name="Idx">The zero-based component index to return</param>
            <returns>The component at the given index</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.Equals(System.Object)">
            <summary>
            Tests two objects for equality. VersionNumber behaves like a value type.
            </summary>
            <param name="Obj">Object to compare against</param>
            <returns>True if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.GetHashCode">
            <summary>
            Returns a hash of the version number.
            </summary>
            <returns>A hash value for the version number.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.op_Equality(UnrealBuildTool.VersionNumber,UnrealBuildTool.VersionNumber)">
            <summary>
            Compares whether two versions are equal.
            </summary>
            <param name="Lhs">The first version number</param>
            <param name="Rhs">The second version number</param>
            <returns>True if the versions are equal.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.op_Inequality(UnrealBuildTool.VersionNumber,UnrealBuildTool.VersionNumber)">
            <summary>
            Compares whether two versions are not equal.
            </summary>
            <param name="Lhs">The first version number</param>
            <param name="Rhs">The second version number</param>
            <returns>True if the versions are not equal.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.op_LessThan(UnrealBuildTool.VersionNumber,UnrealBuildTool.VersionNumber)">
            <summary>
            Compares whether one version is less than another.
            </summary>
            <param name="Lhs">The first version number</param>
            <param name="Rhs">The second version number</param>
            <returns>True if the first version is less than the second.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.op_LessThanOrEqual(UnrealBuildTool.VersionNumber,UnrealBuildTool.VersionNumber)">
            <summary>
            Compares whether one version is less or equal to another.
            </summary>
            <param name="Lhs">The first version number</param>
            <param name="Rhs">The second version number</param>
            <returns>True if the first version is less or equal to the second.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.op_GreaterThan(UnrealBuildTool.VersionNumber,UnrealBuildTool.VersionNumber)">
            <summary>
            Compares whether one version is greater than another.
            </summary>
            <param name="Lhs">The first version number</param>
            <param name="Rhs">The second version number</param>
            <returns>True if the first version is greater than the second.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.op_GreaterThanOrEqual(UnrealBuildTool.VersionNumber,UnrealBuildTool.VersionNumber)">
            <summary>
            Compares whether one version is greater or equal to another.
            </summary>
            <param name="Lhs">The first version number</param>
            <param name="Rhs">The second version number</param>
            <returns>True if the first version is greater or equal to the second.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.CompareTo(UnrealBuildTool.VersionNumber)">
            <summary>
            Comparison function for IComparable
            </summary>
            <param name="Other">Other version number to compare to</param>
            <returns>A negative value if this version is before Other, a positive value if this version is after Other, and zero otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.Compare(UnrealBuildTool.VersionNumber,UnrealBuildTool.VersionNumber)">
            <summary>
            Compares two version numbers and returns an integer indicating their order
            </summary>
            <param name="Lhs">The first version to check</param>
            <param name="Rhs">The second version to check</param>
            <returns>A negative value if Lhs is before Rhs, a positive value if Lhs is after Rhs, and zero otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.Parse(System.String)">
            <summary>
            Parses the version number from a string
            </summary>
            <param name="Text">The string to parse</param>
            <returns>A version number object</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.TryParse(System.String,UnrealBuildTool.VersionNumber@)">
            <summary>
            Parses the version number from a string
            </summary>
            <param name="Text">The string to parse</param>
            <param name="OutNumber">Variable to receive the parsed version number</param>
            <returns>A version number object</returns>
        </member>
        <member name="M:UnrealBuildTool.VersionNumber.ToString">
            <summary>
            Returns a string version number, eg. 1.4
            </summary>
            <returns>The stringized version number</returns>
        </member>
        <member name="T:UnrealBuildTool.XmlConfig">
            <summary>
            Functions for manipulating the XML config cache
            </summary>
        </member>
        <member name="T:UnrealBuildTool.XmlConfig.InputFile">
            <summary>
            An input config file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfig.InputFile.Location">
            <summary>
            Location of the file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfig.InputFile.FolderName">
            <summary>
            Which folder to display the config file under in the generated project files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfig.Values">
            <summary>
            Parsed config values
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfig.CachedSchemaSerializer">
            <summary>
            Cached serializer for the XML schema
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.ReadConfigFiles">
            <summary>
            Initialize the config system with the given types
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.FindConfigurableTypes">
            <summary>
            Find all the configurable types in the current assembly
            </summary>
            <returns>List of configurable types</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.HasXmlConfigFileAttribute(System.Type)">
            <summary>
            Determines whether the given type has a field with an XmlConfigFile attribute
            </summary>
            <param name="Type">The type to check</param>
            <returns>True if the type has a field with the XmlConfigFile attribute</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.GetSchemaLocation">
            <summary>
            Find the location of the XML config schema
            </summary>
            <returns>The location of the schema file</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.FindInputFiles">
            <summary>
            Initialize the list of input files
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.CreateDefaultConfigFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Create a default config file at the given location
            </summary>
            <param name="Location">Location to read from</param>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.ApplyTo(System.Object)">
            <summary>
            Applies config values to the given object
            </summary>
            <param name="TargetObject">The object instance to be configured</param>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.InstanceValue(System.Object,System.Type)">
            <summary>
            Instances a value for assignment to a target object
            </summary>
            <param name="Value">The value to instance</param>
            <param name="ValueType">The type of value</param>
            <returns>New instance of the given value, if necessary</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.TryGetValue(System.Type,System.String,System.Object@)">
            <summary>
            Gets a config value for a single value, without writing it to an instance of that class
            </summary>
            <param name="TargetType">Type to find config values for</param>
            <param name="Name">Name of the field to receive</param>
            <param name="Value">On success, receives the value of the field</param>
            <returns>True if the value was read, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.FindConfigurableFields(System.Collections.Generic.IEnumerable{System.Type},System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.FieldInfo}})">
            <summary>
            Find all the configurable fields in the given types by searching for XmlConfigFile attributes.
            </summary>
            <param name="ConfigTypes">Array of types to search</param>
            <param name="CategoryToFields">Dictionaries populated with category -> name -> field mappings on return</param>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.CreateSchema(System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.FieldInfo}})">
            <summary>
            Creates a schema from attributes in the given types
            </summary>
            <param name="CategoryToFields">Lookup for all field settings</param>
            <returns>New schema instance</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.CreateSchemaFieldElement(System.String,System.Type)">
            <summary>
            Creates an XML schema element for reading a value of the given type
            </summary>
            <param name="Name">Name of the field</param>
            <param name="Type">Type of the field</param>
            <returns>New schema element representing the field</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.WriteSchema(System.Xml.Schema.XmlSchema,Tools.DotNETCommon.FileReference)">
            <summary>
            Writes a schema to the given location. Avoids writing it if the file is identical.
            </summary>
            <param name="Schema">The schema to be written</param>
            <param name="Location">Location to write to</param>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.TryReadFile(Tools.DotNETCommon.FileReference,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.Dictionary{System.String,System.Reflection.FieldInfo}},System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.Dictionary{System.Reflection.FieldInfo,System.Object}},System.Xml.Schema.XmlSchema)">
            <summary>
            Reads an XML config file and merges it to the given cache
            </summary>
            <param name="Location">Location to read from</param>
            <param name="CategoryToFields">Lookup for configurable fields by category</param>
            <param name="TypeToValues">Map of types to fields and their associated values</param>
            <param name="Schema">Schema to validate against</param>
            <returns>True if the file was read successfully</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.ParseValue(System.Type,System.String)">
            <summary>
            Parse the value for a field from its text based representation in an XML file
            </summary>
            <param name="FieldType">The type of field being read</param>
            <param name="Text">Text to parse</param>
            <returns>The object that was parsed</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.IsCacheUpToDate(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference[])">
            <summary>
            Checks that the given cache file exists and is newer than the given input files, and attempts to read it. Verifies that the resulting cache was created
            from the same input files in the same order.
            </summary>
            <param name="CacheFile">Path to the config cache file</param>
            <param name="InputFiles">The expected set of input files in the cache</param>
            <returns>True if the cache was valid and could be read, false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfig.WriteDocumentation(Tools.DotNETCommon.FileReference)">
            <summary>
            Generates documentation files for the available settings, by merging the XML documentation from the compiler.
            </summary>
            <param name="OutputFile">The documentation file to write</param>
        </member>
        <member name="T:UnrealBuildTool.XmlConfigData">
            <summary>
            Stores parsed values from XML config files which can be applied to a configurable type. Can be serialized to disk in binary form as a cache.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigData.SerializationVersion">
            <summary>
            The current cache serialization version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigData.InputFiles">
            <summary>
            List of input files. Stored to allow checking cache validity.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigData.TypeToValues">
            <summary>
            Stores a mapping from type -> field -> value, with all the config values for configurable fields.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XmlConfigData.#ctor(Tools.DotNETCommon.FileReference[],System.Collections.Generic.Dictionary{System.Type,System.Collections.Generic.KeyValuePair{System.Reflection.FieldInfo,System.Object}[]})">
            <summary>
            Constructor
            </summary>
            <param name="InputFiles"></param>
            <param name="TypeToValues"></param>
        </member>
        <member name="M:UnrealBuildTool.XmlConfigData.TryRead(Tools.DotNETCommon.FileReference,System.Collections.Generic.IEnumerable{System.Type},UnrealBuildTool.XmlConfigData@)">
            <summary>
            Attempts to read a previous block of config values from disk
            </summary>
            <param name="Location">The file to read from</param>
            <param name="Types">Array of valid types. Used to resolve serialized type names to concrete types.</param>
            <param name="Data">On success, receives the parsed data</param>
            <returns>True if the data was read and is valid</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfigData.Write(Tools.DotNETCommon.FileReference)">
            <summary>
            Writes the coalesced config hierarchy to disk
            </summary>
            <param name="Location">File to write to</param>
        </member>
        <member name="T:UnrealBuildTool.XmlConfigFile">
            <summary>
            Implementation of XmlDocument which preserves line numbers for its elements
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFile.RootElementName">
            <summary>
            Root element for the XML document
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFile.SchemaNamespaceURI">
            <summary>
            Namespace for the XML schema
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFile.File">
            <summary>
            The file being read
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFile.LineInfo">
            <summary>
            Interface to the LineInfo on the active XmlReader
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFile.bHasErrors">
            <summary>
            Set to true if the reader encounters an error
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XmlConfigFile.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Private constructor. Use XmlConfigFile.TryRead to read an XML config file.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XmlConfigFile.CreateElement(System.String,System.String,System.String)">
            <summary>
            Overrides XmlDocument.CreateElement() to construct ScriptElements rather than XmlElements
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XmlConfigFile.TryRead(Tools.DotNETCommon.FileReference,System.Xml.Schema.XmlSchema,UnrealBuildTool.XmlConfigFile@)">
            <summary>
            Loads a script document from the given file
            </summary>
            <param name="File">The file to load</param>
            <param name="Schema">The schema to validate against</param>
            <param name="OutConfigFile">If successful, the document that was read</param>
            <returns>True if the document could be read, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.XmlConfigFile.ValidationEvent(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Callback for validation errors in the document
            </summary>
            <param name="Sender">Standard argument for ValidationEventHandler</param>
            <param name="Args">Standard argument for ValidationEventHandler</param>
        </member>
        <member name="T:UnrealBuildTool.XmlConfigFileElement">
            <summary>
            Implementation of XmlElement which preserves line numbers
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFileElement.File">
            <summary>
            The file containing this element
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFileElement.LineNumber">
            <summary>
            The line number containing this element
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XmlConfigFileElement.#ctor(Tools.DotNETCommon.FileReference,System.Int32,System.String,System.String,System.String,UnrealBuildTool.XmlConfigFile)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:UnrealBuildTool.XmlConfigFileAttribute">
            <summary>
            Marks a field as being serializable from a config file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFileAttribute.Category">
            <summary>
            The category for this config value. Optional; defaults to the declaring type name.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XmlConfigFileAttribute.Name">
            <summary>
            Name of the key to read. Optional; defaults to the field name.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPluginLanguage.XDoc">
            The merged XML program to run 
        </member>
        <member name="F:UnrealBuildTool.UnrealPluginLanguage.XMLNameSpace">
            XML namespace 
        </member>
        <member name="F:UnrealBuildTool.UnrealPluginLanguage.bGlobalTrace">
            Trace flag to enable debugging 
        </member>
        <member name="F:UnrealBuildTool.UnrealPluginLanguage.ProjectFile">
            Project file reference 
        </member>
        <member name="F:UnrealBuildTool.UnrealPluginLanguage.UPLContext.BoolVariables">
            Variable state 
        </member>
        <member name="F:UnrealBuildTool.UnrealPluginLanguage.UPLContext.bTrace">
            Local context trace 
        </member>
        <member name="T:UnrealBuildTool.ConfigCacheIni_UPL">
            <summary>
            Equivalent of FConfigCacheIni_UPL. Parses ini files.  This version reads ALL sections since ConfigCacheIni_UPL does NOT
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ConfigCacheIni_UPL.IniParsingException">
            <summary>
            Exception when parsing ini files
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ConfigCacheIni_UPL.Command">
            <summary>
            command class for being able to create config caches over and over without needing to read the ini files
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ConfigCacheIni_UPL.IniValues">
            <summary>
            List of values (or a single value)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ConfigCacheIni_UPL.IniSection">
            <summary>
            Ini section (map of keys and values)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCacheIni_UPL.bIsMergingConfigs">
            <summary>
            True if we are loading a hierarchy of config files that should be merged together
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ConfigCacheIni_UPL.Sections">
            <summary>
            All sections parsed from ini file
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Constructor. Parses a single ini file. No Platform settings, no engine hierarchy. Do not use this with ini files that have hierarchy!
            </summary>
            <param name="Filename">The ini file to load</param>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor. Parses ini hierarchy for the specified project.  No Platform settings.
            </summary>
            <param name="BaseIniName">Ini name (Engine, Editor, etc)</param>
            <param name="ProjectDirectory">Project path</param>
            <param name="EngineDirectory"></param>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.#ctor(System.String,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Constructor. Parses ini hierarchy for the specified project.  No Platform settings.
            </summary>
            <param name="BaseIniName">Ini name (Engine, Editor, etc)</param>
            <param name="ProjectDirectory">Project path</param>
            <param name="EngineDirectory"></param>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.#ctor(UnrealBuildTool.UnrealTargetPlatform,System.String,System.String,System.String)">
            <summary>
            Constructor. Parses ini hierarchy for the specified platform and project.
            </summary>
            <param name="ProjectDirectory">Project path</param>
            <param name="Platform">Target platform</param>
            <param name="BaseIniName">Ini name (Engine, Editor, etc)</param>
            <param name="EngineDirectory"></param>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.#ctor(UnrealBuildTool.UnrealTargetPlatform,System.String,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference,System.Boolean,UnrealBuildTool.ConfigCacheIni_UPL)">
            <summary>
            Constructor. Parses ini hierarchy for the specified platform and project.
            </summary>
            <param name="ProjectDirectory">Project path</param>
            <param name="Platform">Target platform</param>
            <param name="BaseIniName">Ini name (Engine, Editor, etc)</param>
            <param name="EngineDirectory"></param>
            <param name="EngineOnly"></param>
            <param name="BaseCache"></param>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.FindSection(System.String)">
            <summary>
            Finds a section in INI
            </summary>
            <param name="SectionName"></param>
            <returns>Found section or null</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetList(System.String,System.String,UnrealBuildTool.ConfigCacheIni_UPL.IniValues@)">
            <summary>
            Finds values associated with the specified key (does not copy the list)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetArray(System.String,System.String,System.Collections.Generic.List{System.String}@)">
            <summary>
            Gets all values associated with the specified key
            </summary>
            <param name="SectionName">Section where the key is located</param>
            <param name="Key">Key name</param>
            <param name="Value">Copy of the list containing all values associated with the specified key</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetString(System.String,System.String,System.String@)">
            <summary>
            Gets a single string value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="Key">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetBool(System.String,System.String,System.Boolean@)">
            <summary>
            Gets a single bool value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="Key">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetInt32(System.String,System.String,System.Int32@)">
            <summary>
            Gets a single Int32 value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="Key">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetGUID(System.String,System.String,System.Guid@)">
            <summary>
            Gets a single GUID value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="Key">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetSingle(System.String,System.String,System.Single@)">
            <summary>
            Gets a single float value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="Key">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetDouble(System.String,System.String,System.Double@)">
            <summary>
            Gets a single double value associated with the specified key.
            </summary>
            <param name="SectionName">Section name</param>
            <param name="Key">Key name</param>
            <param name="Value">Value associated with the specified key. If the key has more than one value, only the first one is returned</param>
            <returns>True if the key exists</returns>
        </member>
        <member name="T:UnrealBuildTool.ConfigCacheIni_UPL.ParseAction">
            <summary>
            List of actions that can be performed on a single line from ini file
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetActionForLine(System.String@)">
            <summary>
            Checks what action should be performed on a single line from ini file
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.ParseIniFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Loads and parses ini file.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.ParseKeyValuePair(System.String,Tools.DotNETCommon.FileReference,System.Int32,System.String@,System.String@)">
            <summary>
            Splits a line into key and value
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.ProcessKeyValuePair(UnrealBuildTool.ConfigCacheIni_UPL.IniSection,System.String,System.String,UnrealBuildTool.ConfigCacheIni_UPL.ParseAction)">
            <summary>
            Processes parsed key/value pair
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.FindOrAddSection(System.String,Tools.DotNETCommon.FileReference,System.Int32)">
            <summary>
            Finds an existing section or adds a new one
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.EnumerateEngineIniFileNames(Tools.DotNETCommon.DirectoryReference,System.String)">
            <summary>
            Returns a list of INI filenames for the engine
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.EnumerateCrossPlatformIniFileNames(Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UnrealTargetPlatform,System.String,System.Boolean)">
            <summary>
            Returns a list of INI filenames for the given project
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ConfigCacheIni_UPL.GetIniPlatformName(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Returns the platform name to use as part of platform-specific config files
            </summary>
        </member>
        <member name="T:UnrealBuildTool.VCMacProjectFileGenerator">
            <summary>
            Visual Studio for Mac project file generator implementation
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCMacProjectFileGenerator.#ctor(Tools.DotNETCommon.FileReference,UnrealBuildTool.WindowsCompiler)">
            <summary>
            Default constructor
            </summary>
            <param name="InOnlyGameProject">The single project to generate project files for, or null</param>
            <param name="InOverrideCompiler">Override the compiler version to use</param>
        </member>
        <member name="M:UnrealBuildTool.VCMacProjectFileGenerator.ShouldGenerateIntelliSenseData">
            True if we should include IntelliSense data in the generated project files when possible
        </member>
        <member name="M:UnrealBuildTool.VCMacProjectFileGenerator.WriteProjectFiles">
            <summary>
            Writes the project files to disk
            </summary>
            <returns>True if successful</returns>
        </member>
        <member name="T:UnrealBuildTool.TVOSExports">
            <summary>
            Public TVOS functions exposed to UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TVOSExports.GetProvisioningData(Tools.DotNETCommon.FileReference,System.Boolean,System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="InProject"></param>
            <param name="Distribution"></param>
            <param name="MobileProvision"></param>
            <param name="SigningCertificate"></param>
            <param name="TeamUUID"></param>
            <param name="bAutomaticSigning"></param>
        </member>
        <member name="M:UnrealBuildTool.TVOSExports.PrepForUATPackageOrDeploy(UnrealBuildTool.UnrealTargetConfiguration,Tools.DotNETCommon.FileReference,System.String,Tools.DotNETCommon.DirectoryReference,System.String,Tools.DotNETCommon.DirectoryReference,System.Boolean,System.String,System.Boolean,System.Boolean,Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="Config"></param>
            <param name="ProjectFile"></param>
            <param name="InProjectName"></param>
            <param name="InProjectDirectory"></param>
            <param name="InExecutablePath"></param>
            <param name="InEngineDir"></param>
            <param name="bForDistribution"></param>
            <param name="CookFlavor"></param>
            <param name="bIsDataDeploy"></param>
            <param name="bCreateStubIPA"></param>
            <param name="BuildReceiptFileName"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.TVOSExports.GeneratePList(Tools.DotNETCommon.FileReference,UnrealBuildTool.UnrealTargetConfiguration,Tools.DotNETCommon.DirectoryReference,System.Boolean,System.String,System.String,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.FileReference,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <param name="Config"></param>
            <param name="ProjectDirectory"></param>
            <param name="bIsUE4Game"></param>
            <param name="GameName"></param>
            <param name="ProjectName"></param>
            <param name="InEngineDir"></param>
            <param name="AppDirectory"></param>
            <param name="BuildReceiptFileName"></param>
            <param name="bSupportsPortrait"></param>
            <param name="bSupportsLandscape"></param>
            <param name="bSkipIcons"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.TVOSProjectGenerator.RegisterPlatformProjectGenerator">
            Register the platform with the UEPlatformProjectGenerator class
        </member>
        <member name="P:UnrealBuildTool.TVOSProjectSettings.RuntimeVersion">
            <summary>
            Which version of the iOS to allow at run time
            </summary>
        </member>
        <member name="P:UnrealBuildTool.TVOSProjectSettings.RuntimeDevices">
            <summary>
            which devices the game is allowed to run on
            </summary>
        </member>
        <member name="M:UnrealBuildTool.TVOSPlatform.SetUpEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the target environment for building
            </summary>
            <param name="Target">Settings for the target being compiled</param>
            <param name="CompileEnvironment">The compile environment for this target</param>
            <param name="LinkEnvironment">The link environment for this target</param>
        </member>
        <member name="M:UnrealBuildTool.TVOSPlatform.CreateToolChain(UnrealBuildTool.CppPlatform,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Creates a toolchain instance for the given platform.
            </summary>
            <param name="CppPlatform">The platform to create a toolchain for</param>
            <param name="Target">The target being built</param>
            <returns>New toolchain instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.TVOSPlatformFactory.RegisterBuildPlatforms(UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Register the platform with the UEBuildPlatform class
            </summary>
        </member>
        <member name="T:UnrealBuildTool.AndroidTargetRules">
            <summary>
            Android-specific target settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.AndroidTargetRules.Architectures">
            <summary>
            Lists Architectures that you want to build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.AndroidTargetRules.GPUArchitectures">
            <summary>
            Lists GPU Architectures that you want to build (mostly used for mobile etc.)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyAndroidTargetRules">
            <summary>
            Read-only wrapper for Android-specific target settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlyAndroidTargetRules.Inner">
            <summary>
            The private mutable settings object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyAndroidTargetRules.#ctor(UnrealBuildTool.AndroidTargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The settings object to wrap</param>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyAndroidTargetRules.Architectures">
            <summary>
            Accessors for fields on the inner TargetRules instance
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidPlatform.ModifyModuleRulesForOtherPlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, where the target is a different host platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidPlatform.ModifyModuleRulesForActivePlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, in a target that's being built for this platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidPlatform.Deploy(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Deploys the given target
            </summary>
            <param name="Target">Information about the target being deployed</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidPlatformSDK.HasAnySDK">
            <summary>
            checks if the sdk is installed or has been synced
            </summary>
            <returns></returns>
        </member>
        <member name="F:UnrealBuildTool.UEDeployAndroid.PossibleApiLevels">
            <summary>
            Internal usage for GetApiLevel
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEDeployAndroid.bPackageDataInsideApk">
            <summary>
            Determines whether we package data inside the APK. Based on and  OR of "-ForcePackageData" being
            false and bPackageDataInsideApk in /Script/AndroidRuntimeSettings.AndroidRuntimeSettings being true
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEDeployAndroid.ParseApiLevel(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Simple function to pipe output asynchronously
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEDeployAndroid.ReadPackageDataInsideApkFromIni(UnrealBuildTool.ConfigHierarchy)">
            <summary>
            Reads the bPackageDataInsideApk from AndroidRuntimeSettings
            </summary>
            <param name="Ini"></param>
        </member>
        <member name="M:UnrealBuildTool.AndroidAARHandler.#ctor">
            <summary>
            Handler for AAR and JAR dependency determination and staging
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidAARHandler.AddRepository(System.String)">
            <summary>
            Add a new respository path to search for AAR and JAR files
            </summary>
            <param name="RepositoryPath">Directory containing the repository</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidAARHandler.AddRepositories(System.String,System.String)">
            <summary>
            Add new respository paths to search for AAR and JAR files (recursive)
            </summary>
            <param name="RepositoryPath">Root directory containing the repository</param>
            <param name="SearchPattern">Search pattern to match</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidAARHandler.AddNewJAR(System.String,System.String,System.String)">
            <summary>
            Adds a new required JAR file and resolves dependencies
            </summary>
            <param name="PackageName">Name of the package the JAR belongs to in repository</param>
            <param name="BaseName">Directory in repository containing the JAR</param>
            <param name="Version">Version of the AAR to use</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidAARHandler.AddNewAAR(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new required AAR file and resolves dependencies
            </summary>
            <param name="PackageName">Name of the package the AAR belongs to in repository</param>
            <param name="BaseName">Directory in repository containing the AAR</param>
            <param name="Version">Version of the AAR to use</param>
            <param name="HandleDependencies">Optionally process POM file for dependencies (default)</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidAARHandler.CopyJARs(System.String)">
            <summary>
            Copies the required JAR files to the provided directory
            </summary>
            <param name="DestinationPath">Destination path for JAR files</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidAARHandler.ExtractAARs(System.String,System.String)">
            <summary>
            Extracts the required AAR files to the provided directory
            </summary>
            <param name="DestinationPath">Destination path for AAR files</param>
            <param name="AppPackageName">Name of the package these AARs are being used with</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidAARHandler.UnzipFiles(System.String,System.String)">
            <summary>
            Extracts the contents of a zip file
            </summary>
            <param name="ZipFileName">Name of the zip file</param>
            <param name="BaseDirectory">Output directory</param>
            <returns>List of files written</returns>
        </member>
        <member name="T:UnrealBuildTool.IAndroidToolChain">
            <summary>
            Interface to allow exposing public methods from the toolchain to other assemblies
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IAndroidToolChain.GetAllArchitectures">
            <summary>
            Finds the list of supported architectures
            </summary>
            <returns>The targeted architectures</returns>
        </member>
        <member name="M:UnrealBuildTool.IAndroidToolChain.GetAllGPUArchitectures">
            <summary>
            Finds the list of supported GPU architectures
            </summary>
            <returns>The targeted GPU architectures</returns>
        </member>
        <member name="M:UnrealBuildTool.IAndroidToolChain.GetNdkApiLevelInt(System.Int32)">
            <summary>
            Finds the list of supported GPU architectures
            </summary>
            <returns>The targeted GPU architectures</returns>
        </member>
        <member name="T:UnrealBuildTool.IAndroidDeploy">
            <summary>
            Interface to allow exposing public methods from the Android deployment context to other assemblies
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IAndroidDeploy.GetPackageDataInsideApk">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.IAndroidDeploy.SetAndroidPluginData(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="Architectures"></param>
            <param name="inPluginExtraData"></param>
        </member>
        <member name="M:UnrealBuildTool.IAndroidDeploy.PrepForUATPackageOrDeploy(Tools.DotNETCommon.FileReference,System.String,Tools.DotNETCommon.DirectoryReference,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <param name="ProjectName"></param>
            <param name="ProjectDirectory"></param>
            <param name="ExecutablePath"></param>
            <param name="EngineDirectory"></param>
            <param name="bForDistribution"></param>
            <param name="CookFlavor"></param>
            <param name="bIsDataDeploy"></param>
            <returns></returns>
        </member>
        <member name="T:UnrealBuildTool.AndroidExports">
            <summary>
            Public Android functions exposed to UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidExports.CreateToolChain(Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidExports.CreateDeploymentHandler(Tools.DotNETCommon.FileReference,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <param name="InForcePackageData"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidExports.ShouldMakeSeparateApks">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidExports.GetUE4Arch(System.String)">
            <summary>
            
            </summary>
            <param name="NDKArch"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidExports.StripSymbols(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="SourceFile"></param>
            <param name="TargetFile"></param>
        </member>
        <member name="M:UnrealBuildTool.AndroidToolChain.CompilerVersionGreaterOrEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if compiler version matches the requirements
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidToolChain.CompilerVersionLessThan(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if compiler version matches the requirements
            </summary>
        </member>
        <member name="T:UnrealBuildTool.AndroidProjectGenerator">
            <summary>
            Base class for platform-specific project generators
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.IsNsightInstalled(UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Check to see if a recent enough version of Nsight is installed.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.RegisterPlatformProjectGenerator">
            <summary>
            Register the platform with the UEPlatformProjectGenerator class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.HasVisualStudioSupport(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Whether this build platform has native support for VisualStudio
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
            <param name="ProjectFileFormat"></param>
            <returns>bool    true if native VisualStudio support (or custom VSI) is available</returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.GetVisualStudioPlatformName(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Return the VisualStudio platform name for this build platform
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
            <returns>string    The name of the platform that VisualStudio recognizes</returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.GetAdditionalVisualStudioPropertyGroups(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom property group lines
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="ProjectFileFormat"></param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.GetVisualStudioPlatformConfigurationType(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom property group lines
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="ProjectFileFormat"></param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.GetVisualStudioPlatformToolsetString(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return the platform toolset string to write into the project configuration
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
            <param name="InProjectFileFormat">The version of Visual Studio to target</param>
            <returns>string    The custom configuration section for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.GetVisualStudioPathsEntries(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.TargetType,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom paths for VisualStudio this platform requires
            This include ReferencePath, LibraryPath, LibraryWPath, IncludePath and ExecutablePath.
            </summary>
            <param name="InPlatform">The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The configuration being built</param>
            <param name="TargetType">The type of target (game or program)</param>
            <param name="TargetRulesPath">Path to the target.cs file</param>
            <param name="ProjectFilePath">Path to the project file</param>
            <param name="NMakeOutputPath"></param>
            <param name="InProjectFileFormat">Format for the generated project files</param>
            <returns>The custom path lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.GetVisualStudioGlobalProperties(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Return any custom property settings. These will be included right after Global properties to make values available to all other imports.
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.GetVisualStudioImportGroupProperties(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Return any custom property settings. These will be included in the ImportGroup section
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.WriteAdditionalPropFile">
            <summary>
            For Additional Project Property file  VSAndroidUnreal.props file that need to be written out.  This is currently used only on Android. 
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.WriteAdditionalProjUserFile(UnrealBuildTool.ProjectFile)">
            <summary>
            For additional Project file *PROJECTNAME*-AndroidRun.androidproj.user that needs to be written out.  This is currently used only on Android. 
            </summary>
            <param name="ProjectFile">ProjectFile object</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidProjectGenerator.WriteAdditionalProjFile(UnrealBuildTool.ProjectFile)">
            <summary>
            For additional Project file *PROJECTNAME*-AndroidRun.androidproj that needs to be written out.  This is currently used only on Android. 
            </summary>
            <param name="ProjectFile">ProjectFile object</param>
        </member>
        <member name="T:UnrealBuildTool.AndroidDebugProjectFile">
            <summary>
            An Android Debug Project
            </summary>
        </member>
        <member name="M:UnrealBuildTool.AndroidDebugProjectFile.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Constructs a new project file object
            </summary>
            <param name="InitFilePath">The path to the project file on disk</param>
        </member>
        <member name="M:UnrealBuildTool.AndroidDebugProjectFile.MakeProjectPlatformAndConfigurationNames(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,System.String@,System.String@)">
            <summary>
            The only valid configuration for these to be run in is Debug|ARM
            </summary>
            <param name="Platform">Actual platform</param>
            <param name="Configuration">Actual configuration</param>
            <param name="TargetConfigurationName">The configuration name from the target rules, or null if we don't have one</param>
            <param name="ProjectPlatformName">Name of platform string to use for Visual Studio project</param>
            <param name="ProjectConfigurationName">Name of configuration string to use for Visual Studio project</param>
        </member>
        <member name="T:UnrealBuildTool.RemoteExports">
            <summary>
            Public Remote toolchain functions exposed to UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RemoteExports.ConvertPath(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.RemoteExports.UnconvertPath(System.String)">
            <summary>
            
            </summary>
            <param name="RemotePath"></param>
            <returns></returns>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.TotalDeepIncludeScanTime">
            <summary>
            How much time was spent scanning for include dependencies for outdated C++ files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.InitialEnvironment">
            <summary>
            The environment at boot time.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.bIsEngineInstalled">
            <summary>
            Whether we're running with engine installed
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.bIsEnterpriseInstalled">
            <summary>
            Whether we're running with enterprise installed
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.bIsProjectInstalled">
            <summary>
            Whether we're running with an installed project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.RootDirectory">
            <summary>
            The full name of the Root UE4 directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EngineDirectory">
            <summary>
            The full name of the Engine directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EngineSourceDirectory">
            <summary>
            The full name of the Engine/Source directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EngineSourceRuntimeDirectory">
            <summary>
            Full path to the Engine/Source/Runtime directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EngineSourceDeveloperDirectory">
            <summary>
            Full path to the Engine/Source/Developer directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EngineSourceEditorDirectory">
            <summary>
            Full path to the Engine/Source/Editor directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EngineSourceProgramsDirectory">
            <summary>
            Full path to the Engine/Source/Programs directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EngineSourceThirdPartyDirectory">
            <summary>
            Full path to the Engine/Source/ThirdParty directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EnterpriseDirectory">
            <summary>
            The full name of the Enterprise directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EnterpriseSourceDirectory">
            <summary>
            The full name of the Enterprise/Source directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EnterprisePluginsDirectory">
            <summary>
            The full name of the Enterprise/Plugins directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.EnterpriseIntermediateDirectory">
            <summary>
            The full name of the Enterprise/Intermediate directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.RemoteIniPath">
            <summary>
            The Remote Ini directory.  This should always be valid when compiling using a remote server.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealBuildTool.AllPlatforms">
            <summary>
            Cached array of all the supported target platforms
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UnrealBuildTool.bPrintDebugInfo">
            <summary>
            Whether to print debug information out to the log
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UnrealBuildTool.bPrintPerformanceInfo">
            <summary>
            Whether to print performance information to the log
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.SetIsEngineInstalled(System.Boolean)">
            <summary>
            Sets the global flag indicating whether the engine is installed
            </summary>
            <param name="bInIsEngineInstalled">Whether the engine is installed or not</param>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.IsEngineInstalled">
            <summary>
            Returns true if UnrealBuildTool is running using installed Engine components
            </summary>
            <returns>True if running using installed Engine components</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.IsEnterpriseInstalled">
            <summary>
            Returns true if UnrealBuildTool is running using installed Enterprise components
            </summary>
            <returns>True if running using installed Enterprise components</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.IsProjectInstalled">
            <summary>
            Returns true if UnrealBuildTool is running using an installed project (ie. a mod kit)
            </summary>
            <returns>True if running using an installed project</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.GetUBTPath">
            <summary>
            Gets the absolute path to the UBT assembly.
            </summary>
            <returns>A string containing the path to the UBT assembly.</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.GetRemoteIniPath">
            <summary>
            The Unreal remote tool ini directory.  This should be valid if compiling using a remote server
            </summary>
            <returns>The directory path</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.IsUnderAnEngineDirectory(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Determines whether a directory is part of the engine
            </summary>
            <param name="InDirectory"></param>
            <returns>true if the directory is under of the engine directories, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.IsUnderAnInstalledDirectory(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Determines whether a directory is part of an installed directory
            </summary>
            <param name="InDirectory"></param>
            <returns>true if the directory is under an installed directory, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.GuardedMain(System.String[])">
            <summary>
            UBT startup order is fairly fragile, and relies on globals that may or may not be safe to use yet.
            This function is for super early startup stuff that should not access Configuration classes (anything loaded by XmlConfg).
            This should be very minimal startup code.
            </summary>
            <param name="Arguments">Cmdline arguments</param>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.GenerateProjectFiles(UnrealBuildTool.ProjectFileGenerator,System.String[])">
            <summary>
            Generates project files.  Can also be used to generate projects "in memory", to allow for building
            targets without even having project files at all.
            </summary>
            <param name="Generator">Project generator to use</param>
            <param name="Arguments">Command-line arguments</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.ValidatePlatforms(System.String[])">
            <summary>
            Validates the various platforms to determine if they are ready for building
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.InvalidateMakefiles(UnrealBuildTool.TargetDescriptor)">
            <summary>
            Invalidates makefiles for given target.
            </summary>
            <param name="Target">Target</param>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.ShouldDoHotReloadFromIDE(UnrealBuildTool.BuildConfiguration,System.String[],UnrealBuildTool.TargetDescriptor)">
            <summary>
            Checks if the editor is currently running and this is a hot-reload
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.ParseCommandLineFlags(System.String[])">
            <summary>
            Parses the passed in command line for build configuration overrides.
            </summary>
            <param name="Arguments">List of arguments to parse</param>
            <returns>List of build target settings</returns>
        </member>
        <member name="T:UnrealBuildTool.UnrealBuildTool.CppIncludeBackgroundThread">
            <summary>
            Helper class to update the C++ dependency cache on a background thread. Captures exceptions and re-throws on the main thread when joined.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.ReplaceHotReloadFilenameSuffix(System.String@,System.Func{System.String,System.String})">
            <summary>
            Replaces a hot reload suffix in a filename.
            </summary>
            <param name="InOutFilename">The filename to replace the suffix in.</param>
            <param name="ModuleNameToSuffix">A function which returns a replacement suffix for a given module name.</param>
            <returns>true is a suffix replacement was made, false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.GetReplacementModuleSuffix(System.Collections.Generic.List{UnrealBuildTool.OnlyModule},System.String)">
            <summary>
            Returns a module suffix from a list of OnlyModules if one exists, otherwise generates a new one and adds it to the list.
            </summary>
            <param name="OnlyModules">A list of modules with suffixes to search and add to if necessary.</param>
            <param name="ModuleName">The module name to find in the list.</param>
            <returns>The existing or new suffix for the module name.</returns>
        </member>
        <member name="M:UnrealBuildTool.UnrealBuildTool.PatchActionHistoryForHotReloadAssembling(UnrealBuildTool.ActionGraph,System.Collections.Generic.List{UnrealBuildTool.OnlyModule},System.Collections.Generic.List{UnrealBuildTool.UEBuildTarget})">
            <summary>
            Patch action history for hot reload when running in assembler mode.  In assembler mode, the suffix on the output file will be
            the same for every invocation on that makefile, but we need a new suffix each time.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.EncryptionAndSigning">
            <summary>
            Helper functions for dealing with encryption and pak signing
            </summary>
        </member>
        <member name="T:UnrealBuildTool.EncryptionAndSigning.SigningKey">
            <summary>
            Wrapper class for a single RSA key
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.SigningKey.Exponent">
            <summary>
            Exponent
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.SigningKey.Modulus">
            <summary>
            Modulus
            </summary>
        </member>
        <member name="T:UnrealBuildTool.EncryptionAndSigning.SigningKeyPair">
            <summary>
            Wrapper class for an RSA public/private key pair
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.SigningKeyPair.PublicKey">
            <summary>
            Public key
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.SigningKeyPair.PrivateKey">
            <summary>
            Private key
            </summary>
        </member>
        <member name="T:UnrealBuildTool.EncryptionAndSigning.EncryptionKey">
            <summary>
            Wrapper class for a 128 bit AES encryption key
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.EncryptionKey.Key">
            <summary>
            128 bit AES key
            </summary>
        </member>
        <member name="T:UnrealBuildTool.EncryptionAndSigning.CryptoSettings">
            <summary>
            Wrapper class for all crypto settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.EncryptionKey">
            <summary>
            AES encyption key
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.SigningKey">
            <summary>
            RSA public/private key
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.bEnablePakSigning">
            <summary>
            Enable pak signature checking
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.bEnablePakIndexEncryption">
            <summary>
            Encrypt the index of the pak file. Stops the pak file being easily accessible by unrealpak
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.bEnablePakIniEncryption">
            <summary>
            Encrypt all ini files in the pak. Good for game data obsfucation
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.bEnablePakUAssetEncryption">
            <summary>
            Encrypt the uasset files in the pak file. After cooking, uasset files only contain package metadata / nametables / export and import tables. Provides good string data obsfucation without
            the downsides of full package encryption, with the security drawbacks of still having some data stored unencrypted 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.bEnablePakFullAssetEncryption">
            <summary>
            Encrypt all assets data files (including exp and ubulk) in the pak file. Likely to be slow, and to cause high data entropy (bad for delta patching)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.bDataCryptoRequired">
            <summary>
            Some platforms have their own data crypto systems, so allow the config settings to totally disable our own crypto
            </summary>
        </member>
        <member name="M:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.IsAnyEncryptionEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.EncryptionAndSigning.CryptoSettings.Save(Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.EncryptionAndSigning.ProcessSigningKeyInputStrings(System.String)">
            <summary>
            Helper class for formatting incoming hex signing key strings
            </summary>
        </member>
        <member name="M:UnrealBuildTool.EncryptionAndSigning.ParseCryptoSettings(Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Parse crypto settings from INI file
            </summary>
        </member>
        <member name="M:UnrealBuildTool.EncryptionAndSigning.ParseHexStringToByteArray(System.String,System.Int32)">
            <summary>
            Take a hex string and parse into an array of bytes
            </summary>
        </member>
        <member name="T:UnrealBuildTool.HashSetExtensions">
            <summary>
            Extension methods for hash sets
            </summary>
        </member>
        <member name="M:UnrealBuildTool.HashSetExtensions.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Convert a sequence to a hashset
            </summary>
            <typeparam name="T">Type of elements in the sequence</typeparam>
            <param name="Sequence">Sequence to convert</param>
            <returns>HashSet constructed from the sequence</returns>
        </member>
        <member name="T:UnrealBuildTool.PVSApplicationSettings">
            <summary>
            Partial representation of PVS-Studio main settings file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PVSApplicationSettings.PathMasks">
            <summary>
            Masks for paths excluded for analysis
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PVSApplicationSettings.UserName">
            <summary>
            Registered username
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PVSApplicationSettings.SerialNumber">
            <summary>
            Registered serial number
            </summary>
        </member>
        <member name="T:UnrealBuildTool.BaseWindowsDeploy">
            <summary>
             Base class to handle deploy of a target for a given platform
            </summary>
        </member>
        <member name="T:UnrealBuildTool.IOSExports">
            <summary>
            Public IOS functions exposed to UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IOSExports.UseRPCUtil">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.IOSExports.GetProvisioningData(Tools.DotNETCommon.FileReference,System.Boolean,System.String@,System.String@,System.String@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="InProject"></param>
            <param name="Distribution"></param>
            <param name="MobileProvision"></param>
            <param name="SigningCertificate"></param>
            <param name="TeamUUID"></param>
            <param name="bAutomaticSigning"></param>
        </member>
        <member name="M:UnrealBuildTool.IOSExports.PrepForUATPackageOrDeploy(UnrealBuildTool.UnrealTargetConfiguration,Tools.DotNETCommon.FileReference,System.String,Tools.DotNETCommon.DirectoryReference,System.String,Tools.DotNETCommon.DirectoryReference,System.Boolean,System.String,System.Boolean,System.Boolean,Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="Config"></param>
            <param name="ProjectFile"></param>
            <param name="InProjectName"></param>
            <param name="InProjectDirectory"></param>
            <param name="InExecutablePath"></param>
            <param name="InEngineDir"></param>
            <param name="bForDistribution"></param>
            <param name="CookFlavor"></param>
            <param name="bIsDataDeploy"></param>
            <param name="bCreateStubIPA"></param>
            <param name="BuildReceiptFileName"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.IOSExports.GeneratePList(Tools.DotNETCommon.FileReference,UnrealBuildTool.UnrealTargetConfiguration,Tools.DotNETCommon.DirectoryReference,System.Boolean,System.String,System.String,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.FileReference,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <param name="Config"></param>
            <param name="ProjectDirectory"></param>
            <param name="bIsUE4Game"></param>
            <param name="GameName"></param>
            <param name="ProjectName"></param>
            <param name="InEngineDir"></param>
            <param name="AppDirectory"></param>
            <param name="BuildReceiptFileName"></param>
            <param name="bSupportsPortrait"></param>
            <param name="bSupportsLandscape"></param>
            <param name="bSkipIcons"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.IOSExports.StripSymbols(UnrealBuildTool.UnrealTargetPlatform,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="PlatformType"></param>
            <param name="SourceFile"></param>
            <param name="TargetFile"></param>
        </member>
        <member name="M:UnrealBuildTool.IOSExports.GenerateAssetCatalog(Tools.DotNETCommon.FileReference,System.String,System.String,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <param name="Executable"></param>
            <param name="StageDirectory"></param>
            <param name="PlatformType"></param>
        </member>
        <member name="M:UnrealBuildTool.IOSExports.SupportsIconCatalog(Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnrealBuildTool.IOSProjectGenerator">
            <summary>
            Base class for platform-specific project generators
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IOSProjectGenerator.RegisterPlatformProjectGenerator">
            <summary>
            Register the platform with the UEPlatformProjectGenerator class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IOSProjectGenerator.HasVisualStudioSupport(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            
            	VisualStudio project generation functions
            	
             <summary>
             Whether this build platform has native support for VisualStudio
             </summary>
             <param name="InPlatform">  The UnrealTargetPlatform being built</param>
             <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
             <param name="ProjectFileFormat"></param>
             <returns>bool    true if native VisualStudio support (or custom VSI) is available</returns>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChainSettings.IOSSDKVersion">
            <summary>
            Which version of the iOS SDK to target at build time
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChainSettings.BuildIOSVersion">
            <summary>
            Which version of the iOS to allow at build time
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChainSettings.ToolchainDir">
            <summary>
            Directory for the developer binaries
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChainSettings.BaseSDKDir">
            <summary>
            Location of the SDKs
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChain.bUseDangerouslyFastMode">
            <summary>
            If this is set, then we don't do any post-compile steps except moving the executable into the proper spot on the Mac
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChain.Settings">
            <summary>
            The lazily constructed settings for the toolchain
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChain.IOSCompiler">
            <summary>
            Which compiler frontend to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChain.IOSLinker">
            <summary>
            Which linker frontend to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChain.IOSArchiver">
            <summary>
            Which library archiver to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSToolChain.RememberedAdditionalFrameworks">
            <summary>
            Additional frameworks stored locally so we have access without LinkEnvironment
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IOSToolChain.ShouldAddDebugFileToReceipt(Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType)">
            <summary>
            Adds a build product and its associated debug file to a receipt.
            </summary>
            <param name="OutputFile">Build product to add</param>
            <param name="OutputType">Type of build product</param>
        </member>
        <member name="M:UnrealBuildTool.IOSToolChain.GenerateDebugInfo(UnrealBuildTool.FileItem,UnrealBuildTool.ActionGraph)">
            <summary>
            Generates debug info for a given executable
            </summary>
            <param name="Executable">FileItem describing the executable to generate debug info for</param>
            <param name="ActionGraph"></param>
        </member>
        <member name="M:UnrealBuildTool.IOSToolChain.GeneratePseudoPDB(UnrealBuildTool.FileItem,UnrealBuildTool.ActionGraph)">
            <summary>
            Generates pseudo pdb info for a given executable
            </summary>
            <param name="Executable">FileItem describing the executable to generate debug info for</param>
            <param name="ActionGraph"></param>
        </member>
        <member name="T:UnrealBuildTool.IOSTargetRules">
            <summary>
            IOS-specific target settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSTargetRules.bSkipCrashlytics">
            <summary>
            Don't generate crashlytics data
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyIOSTargetRules">
            <summary>
            Read-only wrapper for IOS-specific target settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlyIOSTargetRules.Inner">
            <summary>
            The private mutable settings object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyIOSTargetRules.#ctor(UnrealBuildTool.IOSTargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The settings object to wrap</param>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyIOSTargetRules.bSkipCrashlytics">
            <summary>
            Accessors for fields on the inner TargetRules instance
            </summary>
        </member>
        <member name="T:UnrealBuildTool.IOSProjectSettings">
            <summary>
            Stores project-specific IOS settings. Instances of this object are cached by IOSPlatform.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.ProjectFile">
            <summary>
            The cached project file location
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bGeneratedSYMFile">
            <summary>
            Whether to generate a dSYM file or not.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bGeneratedSYMBundle">
            <summary>
            Whether to generate a dSYM bundle or not.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bGenerateCrashReportSymbols">
            <summary>
            Whether to generate a dSYM file or not.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.MinimumIOSVersion">
            <summary>
            The minimum supported version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bSupportsIPhone">
            <summary>
            Whether to support iPhone
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bSupportsIPad">
            <summary>
            Whether to support iPad
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bDevForArmV7">
            <summary>
            Whether to target ArmV7
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bDevForArm64">
            <summary>
            Whether to target Arm64
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bDevForArmV7S">
            <summary>
            Whether to target ArmV7S
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bShipForArmV7">
            <summary>
            Whether to target ArmV7 for shipping configurations
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bShipForArm64">
            <summary>
            Whether to target Arm64 for shipping configurations
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bShipForArmV7S">
            <summary>
            Whether to target ArmV7S for shipping configurations
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.AdditionalShippingLinkerFlags">
            <summary>
            additional linker flags for shipping
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.AdditionalLinkerFlags">
            <summary>
            additional linker flags for non-shipping
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.MobileProvision">
            <summary>
            mobile provision to use for code signing
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.SigningCertificate">
            <summary>
            signing certificate to use for code signing
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bShipForBitcode">
            <summary>
            true if bit code should be embedded
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bNotificationsEnabled">
            <summary>
            true if notifications are enabled
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.BundleIdentifier">
            <summary>
            The bundle identifier
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bAutomaticSigning">
            <summary>
            true if using Xcode managed provisioning, else false
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.TeamID">
            <summary>
            The IOS Team ID
            </summary>
        </member>
        <member name="F:UnrealBuildTool.IOSProjectSettings.bDisableForceInline">
            <summary>
            true to change FORCEINLINE to a regular INLINE.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.IOSProjectSettings.NonShippingArchitectures">
            <summary>
            Returns a list of all the non-shipping architectures which are supported
            </summary>
        </member>
        <member name="P:UnrealBuildTool.IOSProjectSettings.ShippingArchitectures">
            <summary>
            Returns a list of all the shipping architectures which are supported
            </summary>
        </member>
        <member name="P:UnrealBuildTool.IOSProjectSettings.RuntimeVersion">
            <summary>
            Which version of the iOS to allow at run time
            </summary>
        </member>
        <member name="P:UnrealBuildTool.IOSProjectSettings.RuntimeDevices">
            <summary>
            which devices the game is allowed to run on
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IOSProjectSettings.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Constructor
            </summary>
            <param name="ProjectFile">The project file to read settings for</param>
        </member>
        <member name="M:UnrealBuildTool.IOSProjectSettings.#ctor(Tools.DotNETCommon.FileReference,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Protected constructor. Used by TVOSProjectSettings.
            </summary>
            <param name="ProjectFile">The project file to read settings for</param>
            <param name="Platform">The platform to read settings for</param>
        </member>
        <member name="T:UnrealBuildTool.IOSProvisioningData">
            <summary>
            IOS provisioning data
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.IsBuildProduct(System.String,System.String[],System.String[])">
            <summary>
            Determines if the given name is a build product for a target.
            </summary>
            <param name="FileName">The name to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <returns>True if the string matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.GetBinaryExtension(UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extension to use for the given binary type
            </summary>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string    The binary extenstion (ie 'exe' or 'dll')</returns>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.HasDefaultBuildConfig(UnrealBuildTool.UnrealTargetPlatform,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Check for the default configuration
            return true if the project uses the default build config
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.RequiresBuild(UnrealBuildTool.UnrealTargetPlatform,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Check for the build requirement due to platform requirements
            return true if the project requires a build
            </summary>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.ShouldNotBuildEditor(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Whether the editor should be built for this platform or not
            </summary>
            <param name="InPlatform"> The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The UnrealTargetConfiguration being built</param>
            <returns>bool   true if the editor should be built, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.ModifyModuleRulesForOtherPlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, where the target is a different host platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.ConvertPath(System.String)">
            <summary>
            Converts the passed in path from UBT host to compiler native format.
            </summary>
            <param name="OriginalPath">The path to convert</param>
            <returns>The path in native format for the toolchain</returns>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.ShouldCreateDebugInfo(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Whether this platform should create debug information or not
            </summary>
            <param name="Target">The target being built</param>
            <returns>bool    true if debug info should be generated, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.SetUpEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the target environment for building
            </summary>
            <param name="Target">Settings for the target being compiled</param>
            <param name="CompileEnvironment">The compile environment for this target</param>
            <param name="LinkEnvironment">The link environment for this target</param>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.ModifyModuleRulesForActivePlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, in a target that's being built for this platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.CreateToolChain(UnrealBuildTool.CppPlatform,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Creates a toolchain instance for the given platform.
            </summary>
            <param name="CppPlatform">The platform to create a toolchain for</param>
            <param name="Target">The target being built</param>
            <returns>New toolchain instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatform.Deploy(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Deploys the given target
            </summary>
            <param name="Target">Information about the target being deployed</param>
        </member>
        <member name="M:UnrealBuildTool.IOSPlatformFactory.RegisterBuildPlatforms(UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Register the platform with the UEBuildPlatform class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEDeployIOS.VersionUtilities.ReadRunningVersion">
            <summary>
            Reads the GameName.PackageVersionCounter from disk and bumps the minor version number in it
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEDeployIOS.VersionUtilities.PullApartVersion(System.String,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Pulls apart a version string of one of the two following formats:
              "7301.15 11-01 10:28"   (Major.Minor Date Time)
              "7486.0"  (Major.Minor)
            </summary>
            <param name="CFBundleVersion"></param>
            <param name="VersionMajor"></param>
            <param name="VersionMinor"></param>
            <param name="TimeStamp"></param>
        </member>
        <member name="M:UnrealBuildTool.UEDeployIOS.VersionUtilities.CalculateUpdatedMinorVersionString(System.String)">
             <summary>
             Parses the version string (expected to be of the form major.minor or major)
             Also parses the major.minor from the running version file and increments it's minor by 1.
            
             If the running version major matches and the running version minor is newer, then the bundle version is updated.
            
             In either case, the running version is set to the current bundle version number and written back out.
             </summary>
             <returns>The (possibly updated) bundle version</returns>
        </member>
        <member name="M:UnrealBuildTool.UEDeployIOS.VersionUtilities.UpdateBundleVersion(System.String,System.String)">
            <summary>
            Updates the minor version in the CFBundleVersion key of the specified PList if this is a new package.
            Also updates the key EpicAppVersion with the bundle version and the current date/time (no year)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.HTML5ProjectGenerator">
            <summary>
            Base class for platform-specific project generators
            </summary>
        </member>
        <member name="M:UnrealBuildTool.HTML5ProjectGenerator.RegisterPlatformProjectGenerator">
            <summary>
            Register the platform with the UEPlatformProjectGenerator class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.HTML5ProjectGenerator.HasVisualStudioSupport(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            
            	VisualStudio project generation functions
            
             <summary>
             Whether this build platform has native support for VisualStudio
             </summary>
             <param name="InPlatform">  The UnrealTargetPlatform being built</param>
             <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
             <param name="ProjectFileFormat"></param>
             <returns>bool    true if native VisualStudio support (or custom VSI) is available</returns>
        </member>
        <member name="F:UnrealBuildTool.HTML5Platform.HTML5Architecture">
            <summary>
            Architecture to build for.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.HasRequiredSDKsInstalled">
            <summary>
            Whether the required external SDKs are installed for this platform. Could be either a manual install or an AutoSDK.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.IsBuildProduct(System.String,System.String[],System.String[])">
            <summary>
            Determines if the given name is a build product for a target.
            </summary>
            <param name="FileName">The name to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <returns>True if the string matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.GetBinaryExtension(UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extension to use for the given binary type
            </summary>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string    The binary extension (ie 'exe' or 'dll')</returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.GetDebugInfoExtensions(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extensions to use for debug info for the given binary type
            </summary>
            <param name="InTarget">The target being built</param>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string[]    The debug info extensions (i.e. 'pdb')</returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.ShouldCompileMonolithicBinary(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Whether this platform should build a monolithic binary
            </summary>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.ShouldNotBuildEditor(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Whether the editor should be built for this platform or not
            </summary>
            <param name="InPlatform"> The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The UnrealTargetConfiguration being built</param>
            <returns>bool   true if the editor should be built, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.ModifyModuleRulesForOtherPlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, where the target is a different host platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.ModifyModuleRulesForActivePlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, in a target that's being built for this platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.SetUpEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the target environment for building
            </summary>
            <param name="Target">Settings for the target being compiled</param>
            <param name="CompileEnvironment">The compile environment for this target</param>
            <param name="LinkEnvironment">The link environment for this target</param>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.ShouldCreateDebugInfo(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Whether this platform should create debug information or not
            </summary>
            <param name="Target">The target being built</param>
            <returns>true if debug info should be generated, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.AddExtraModules(UnrealBuildTool.ReadOnlyTargetRules,System.Collections.Generic.List{System.String})">
            <summary>
            Setup the binaries for this specific platform.
            </summary>
            <param name="Target">The target being built</param>
            <param name="ExtraModuleNames"></param>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.CreateToolChain(UnrealBuildTool.CppPlatform,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Creates a toolchain instance for the given platform.
            </summary>
            <param name="CppPlatform">The platform to create a toolchain for</param>
            <param name="Target">The target being built</param>
            <returns>New toolchain instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5Platform.Deploy(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Deploys the given target
            </summary>
            <param name="Target">Information about the target being deployed</param>
        </member>
        <member name="M:UnrealBuildTool.HTML5PlatformSDK.HasRequiredManualSDKInternal">
            <summary>
            Whether the required external SDKs are installed for this platform
            </summary>
        </member>
        <member name="M:UnrealBuildTool.HTML5PlatformFactory.RegisterBuildPlatforms(UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Register the platform with the UEBuildPlatform class
            </summary>
        </member>
        <member name="T:UnrealBuildTool.HTML5SDKInfo">
             <summary>
            
             </summary>
        </member>
        <member name="P:UnrealBuildTool.HTML5SDKInfo.EMSCRIPTEN_ROOT">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:UnrealBuildTool.HTML5SDKInfo.EmscriptenCMakeToolChainFile">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:UnrealBuildTool.HTML5SDKInfo.HTML5Intermediatory">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:UnrealBuildTool.HTML5SDKInfo.DOT_EMSCRIPTEN">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:UnrealBuildTool.HTML5SDKInfo.EMSCRIPTEN_CACHE">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5SDKInfo.SetupEmscriptenTemp">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="P:UnrealBuildTool.HTML5SDKInfo.PLATFORM_USER_HOME">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5SDKInfo.SetUpEmscriptenConfigFile(System.Boolean)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5SDKInfo.EmscriptenVersion">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5SDKInfo.EmscriptenPackager">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5SDKInfo.EmscriptenCompiler">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5SDKInfo.Python">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5SDKInfo.IsSDKInstalled">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.HTML5SDKInfo.HeapSize(UnrealBuildTool.ConfigHierarchy,System.String)">
             <summary>
            
             </summary>
             <returns></returns>
        </member>
        <member name="T:UnrealBuildTool.LinuxExports">
            <summary>
            Public Linux functions exposed to UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxExports.StripSymbols(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="SourceFile"></param>
            <param name="TargetFile"></param>
        </member>
        <member name="T:UnrealBuildTool.LinuxProjectGenerator">
            <summary>
            Base class for platform-specific project generators
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxProjectGenerator.RegisterPlatformProjectGenerator">
            <summary>
            Register the platform with the UEPlatformProjectGenerator class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxProjectGenerator.HasVisualStudioSupport(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            
            	VisualStudio project generation functions
            	
             <summary>
             Whether this build platform has native support for VisualStudio
             </summary>
             <param name="InPlatform">  The UnrealTargetPlatform being built</param>
             <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
             <param name="ProjectFileFormat"></param>
             <returns>bool    true if native VisualStudio support (or custom VSI) is available</returns>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.Architecture">
            Flavor of the current build (target triplet)
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.bUseLld">
            Cache to avoid making multiple checks for lld availability/usability 
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.bSuppressPIE">
            Whether the compiler is set up to produce PIE executables by default 
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.PlatformSDK">
            Platform SDK to use 
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.ToolchainInfo">
            Toolchain information to print during the build. 
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.DetermineCompilerMajMinPatchFromVersionString">
            <summary>
            Splits compiler version string into numerical components, leaving unchanged if not known
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.DetermineCompilerVersion">
            <summary>
            Queries compiler for the version
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.CheckDefaultCompilerSettings">
            <summary>
            Checks default compiler settings
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.CompilerVersionGreaterOrEqual(System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if compiler version matches the requirements
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.ArchitectureSpecificSwitches(System.String)">
            <summary>
            Architecture-specific compiler switches
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.GetArPath(System.String)">
            <summary>
            Gets architecture-specific ar paths
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.GetRanlibPath(System.String)">
            <summary>
            Gets architecture-specific ranlib paths
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.GetStripPath(System.String)">
            <summary>
            Gets architecture-specific strip path
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.GetObjcopyPath(System.String)">
            <summary>
            Gets architecture-specific objcopy path
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.EscapeArgument(System.String)">
            <summary>
            Sanitizes a definition argument if needed.
            </summary>
            <param name="definition">A string in the format "foo=bar".</param>
            <returns></returns>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.CompilerVersionString">
            <summary>
            Version string of the current compiler, whether clang or gcc or whatever
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.CompilerVersionMajor">
            <summary>
            Major version of the current compiler, whether clang or gcc or whatever
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.CompilerVersionMinor">
            <summary>
            Minor version of the current compiler, whether clang or gcc or whatever
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.CompilerVersionPatch">
            <summary>
            Patch version of the current compiler, whether clang or gcc or whatever
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.bUseFixdeps">
            <summary>
            Whether to use old, slower way to relink circularly dependent libraries.
            It makes sense to use it when cross-compiling on Windows due to race conditions between actions reading and modifying the libs.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.bHasWipedFixDepsScript">
            <summary>
            Track which scripts need to be deleted before appending to
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.AllBinaries">
            <summary>
            Holds all the binaries for a particular target (except maybe the executable itself).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxToolChain.bHasPrintedBuildDetails">
            <summary>
            Tracks that information about used C++ library is only printed once
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.CanUseLTO(System.String)">
            <summary>
            Checks if we actually can use LTO with this set of tools
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.ExplainWhyCannotUseLTO(System.String)">
            <summary>
            Returns a helpful string for the user
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.CreateArchiveAndIndex(UnrealBuildTool.LinkEnvironment,UnrealBuildTool.ActionGraph)">
            <summary>
            Creates an action to archive all the .o files into single .a file
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxToolChain.ConvertPath(System.String)">
            <summary>
            Converts the passed in path from UBT host to compiler native format.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.LinuxArchitecture">
            Architecture as stored in the ini. 
        </member>
        <member name="F:UnrealBuildTool.LinuxArchitecture.X86_64UnknownLinuxGnu">
            x86_64, most commonly used architecture.
        </member>
        <member name="F:UnrealBuildTool.LinuxArchitecture.ArmUnknownLinuxGnueabihf">
            A.k.a. AArch32, ARM 32-bit with hardware floats 
        </member>
        <member name="F:UnrealBuildTool.LinuxArchitecture.AArch64UnknownLinuxGnueabi">
            AArch64, ARM 64-bit 
        </member>
        <member name="F:UnrealBuildTool.LinuxArchitecture.I686UnknownLinuxGnu">
            i686, Intel 32-bit 
        </member>
        <member name="F:UnrealBuildTool.LinuxPlatform.DefaultArchitecture">
            <summary>
            Linux architecture (compiler target triplet)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxPlatform.SDK">
            <summary>
            SDK in use by the platform
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.#ctor(UnrealBuildTool.LinuxPlatformSDK)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.HasRequiredSDKsInstalled">
            <summary>
            Whether the required external SDKs are installed for this platform. Could be either a manual install or an AutoSDK.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.GetDefaultArchitecture(Tools.DotNETCommon.FileReference)">
            <summary>
            Find the default architecture for the given project
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.GetFolderNameForArchitecture(System.String)">
            <summary>
            Get name for architecture-specific directories (can be shorter than architecture name itself)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.RequiresArchitectureSuffix">
            <summary>
            Allows the platform to override whether the architecture name should be appended to the name of binaries.
            </summary>
            <returns>True if the architecture name should be appended to the binary</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.IsBuildProduct(System.String,System.String[],System.String[])">
            <summary>
            Determines if the given name is a build product for a target.
            </summary>
            <param name="FileName">The name to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <returns>True if the string matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.GetBinaryExtension(UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extension to use for the given binary type
            </summary>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string    The binary extension (i.e. 'exe' or 'dll')</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.GetDebugInfoExtensions(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extensions to use for debug info for the given binary type
            </summary>
            <param name="InTarget">Rules for the target being built</param>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string[]    The debug info extensions (i.e. 'pdb')</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.ModifyModuleRulesForOtherPlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, where the target is a different host platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.ConvertPath(System.String)">
            <summary>
            Converts the passed in path from UBT host to compiler native format.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.ModifyModuleRulesForActivePlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, in a target that's being built for this platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.SetUpEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the target environment for building
            </summary>
            <param name="Target">Settings for the target being compiled</param>
            <param name="CompileEnvironment">The compile environment for this target</param>
            <param name="LinkEnvironment">The link environment for this target</param>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.ShouldCreateDebugInfo(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Whether this platform should create debug information or not
            </summary>
            <param name="Target">The target being built</param>
            <returns>bool    true if debug info should be generated, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.CreateToolChain(UnrealBuildTool.CppPlatform,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Creates a toolchain instance for the given platform.
            </summary>
            <param name="CppPlatform">The platform to create a toolchain for</param>
            <param name="Target">The target being built</param>
            <returns>New toolchain instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatform.Deploy(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Deploys the given target
            </summary>
            <param name="Target">Information about the target being deployed</param>
        </member>
        <member name="F:UnrealBuildTool.LinuxPlatformSDK.ExpectedSDKVersion">
            <summary>
            This is the SDK version we support
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxPlatformSDK.TargetPlatformName">
            <summary>
            Platform name (embeds architecture for now)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxPlatformSDK.bVerboseCompiler">
            <summary>
            Whether to compile with the verbose flag
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinuxPlatformSDK.bVerboseLinker">
            <summary>
            Whether to link with the verbose flag
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.PlatformSupportsAutoSDKs">
            <summary>
            Whether platform supports switching SDKs during runtime
            </summary>
            <returns>true if supports</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.GetSDKTargetPlatformName">
            <summary>
            Returns platform-specific name used in SDK repository
            </summary>
            <returns>path to SDK Repository</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.GetRequiredSDKString">
            <summary>
            Returns SDK string as required by the platform
            </summary>
            <returns>Valid SDK string</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.GetInTreeSDKRoot">
            <summary>
            Returns the in-tree root for the Linux Toolchain for this host platform.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.CanUseSystemCompiler">
            <summary>
            Whether a host can use its system sdk for this platform
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.GetSDKLocation">
            <summary>
            Returns the root SDK path for all architectures
            WARNING: Do not cache this value - it may be changed after sourcing OutputEnvVars.txt
            </summary>
            <returns>Valid SDK string</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.GetBaseLinuxPathForArchitecture(System.String)">
            <summary>
            Returns the SDK path for a specific architecture
            WARNING: Do not cache this value - it may be changed after sourcing OutputEnvVars.txt
            </summary>
            <returns>Valid SDK string</returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.IsValidClangPath(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Whether the path contains a valid clang version
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformSDK.HasRequiredManualSDKInternal">
            <summary>
            Whether the required external SDKs are installed for this platform
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinuxPlatformFactory.RegisterBuildPlatforms(UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Register the platform with the UEBuildPlatform class
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ILuminDeploy">
            <summary>
            Interface to allow exposing public methods from the Android deployment context to other assemblies
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ILuminDeploy.SetLuminPluginData(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            
            </summary>
            <param name="Architectures"></param>
            <param name="inPluginExtraData"></param>
        </member>
        <member name="M:UnrealBuildTool.ILuminDeploy.InitUPL(System.String,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            
            </summary>
            <param name="ProjectName"></param>
            <param name="ProjectDirectory"></param>
            <param name="Configuration"></param>
        </member>
        <member name="M:UnrealBuildTool.ILuminDeploy.StageFiles">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ILuminDeploy.PrepForUATPackageOrDeploy(Tools.DotNETCommon.FileReference,System.String,Tools.DotNETCommon.DirectoryReference,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <param name="ProjectName"></param>
            <param name="ProjectDirectory"></param>
            <param name="ExecutablePath"></param>
            <param name="EngineDirectory"></param>
            <param name="bForDistribution"></param>
            <param name="CookFlavor"></param>
            <param name="bIsDataDeploy"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.ILuminDeploy.GetPackageName(System.String)">
            <summary>
            
            </summary>
            <param name="ProjectName"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.ILuminDeploy.GetIconModelStagingPath">
            <summary>
            Directory path in the MPK where the icon model assets will be staged.
            </summary>
            <returns>Directory path relative to root of MPK</returns>
        </member>
        <member name="M:UnrealBuildTool.ILuminDeploy.GetIconPortalStagingPath">
            <summary>
            Directory path in the MPK where the icon portal assets will be staged.
            </summary>
            <returns>Directory path relative to root of MPK</returns>
        </member>
        <member name="T:UnrealBuildTool.LuminExports">
            <summary>
            Public Android functions exposed to UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LuminExports.CreateToolChain(Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.LuminExports.CreateDeploymentHandler(Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.LuminExports.StripSymbols(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference)">
            <summary>
            
            </summary>
            <param name="SourceFile"></param>
            <param name="TargetFile"></param>
        </member>
        <member name="T:UnrealBuildTool.LuminProjectGenerator">
            <summary>
            Base class for platform-specific project generators
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LuminProjectGenerator.RegisterPlatformProjectGenerator">
            <summary>
            Register the platform with the UEPlatformProjectGenerator class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LuminProjectGenerator.HasVisualStudioSupport(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Whether this build platform has native support for VisualStudio
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
            <param name="ProjectFileFormat"> Which version of VS</param>
            <returns>bool    true if native VisualStudio support (or custom VSI) is available</returns>
        </member>
        <member name="M:UnrealBuildTool.LuminProjectGenerator.GetVisualStudioPlatformToolsetString(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return the platform toolset string to write into the project configuration
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
            <param name="InProjectFileFormat"> The verison of VS</param> 
            <returns>string    The custom configuration section for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.LuminProjectGenerator.GetVisualStudioPathsEntries(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.TargetType,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom paths for VisualStudio this platform requires
            This include ReferencePath, LibraryPath, LibraryWPath, IncludePath and ExecutablePath.
            </summary>
            <param name="InPlatform">The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The configuration being built</param>
            <param name="TargetType">The type of target (game or program)</param>
            <param name="TargetRulesPath">Path to the target.cs file</param>
            <param name="ProjectFilePath">Path to the project file</param>
            <param name="NMakeOutputPath"></param>
            <param name="InProjectFileFormat">Format for the generated project files</param>
            <returns>The custom path lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="T:UnrealBuildTool.LuminTargetRules">
            <summary>
            Lumin-specific target settings
            </summary>	
        </member>
        <member name="F:UnrealBuildTool.LuminTargetRules.GPUArchitectures">
            <summary>
            Lists GPU Architectures that you want to build (mostly used for mobile etc.)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyLuminTargetRules">
            <summary>
            Read-only wrapper for Android-specific target settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlyLuminTargetRules.Inner">
            <summary>
            The private mutable settings object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyLuminTargetRules.#ctor(UnrealBuildTool.LuminTargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The settings object to wrap</param>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyLuminTargetRules.GPUArchitectures">
            <summary>
            Accessors for fields on the inner TargetRules instance
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LuminPlatform.ModifyModuleRulesForOtherPlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, where the target is a different host platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.LuminPlatform.ModifyModuleRulesForActivePlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, in a target that's being built for this platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.LuminPlatform.Deploy(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Deploys the given target
            </summary>
            <param name="Target">Information about the target being deployed</param>
        </member>
        <member name="F:UnrealBuildTool.LuminPlatformSDK.ExpectedSDKVersion">
            <summary>
            This is the SDK version we support
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LuminPlatformSDK.HasAnySDK">
            <summary>
            checks if the sdk is installed or has been synced, sets environment variable
            </summary>
            <returns></returns>
        </member>
        <member name="T:UnrealBuildTool.UEBuildDeploy">
            <summary>
            Base class to handle deploy of a target for a given platform
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildDeploy.PrepTargetForDeployment(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Prepare the target for deployment
            </summary>
            <param name="InTarget"> The target for deployment</param>
            <returns>bool   true if successful, false if not</returns>
        </member>
        <member name="T:UnrealBuildTool.UEBuildBinaryType">
            <summary>
            All binary types generated by UBT
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinaryType.Executable">
            <summary>
            An executable
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinaryType.DynamicLinkLibrary">
            <summary>
            A dynamic library (.dll, .dylib, or .so)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinaryType.StaticLibrary">
            <summary>
            A static library (.lib or .a)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinaryType.Object">
            <summary>
            An object file (.obj or .o)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinaryType.PrecompiledHeader">
            <summary>
            A precompiled header (.pch or .gch)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEBuildBinary">
            <summary>
            A binary built by UBT.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.Type">
            <summary>
            The type of binary to build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.OutputFilePaths">
            <summary>
            The output file path. This must be set before a binary can be built using it.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildBinary.OutputFilePath">
            <summary>
            Returns the OutputFilePath if there is only one entry in OutputFilePaths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.OriginalOutputFilePaths">
            <summary>
            Original output filepath. This is the original binary name before hot-reload suffix has been appended to it.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildBinary.OriginalOutputFilePath">
            <summary>
            Returns the OriginalOutputFilePath if there is only one entry in OriginalOutputFilePaths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.IntermediateDirectory">
            <summary>
            The intermediate directory for this binary. Modules should create separate intermediate directories below this. Must be set before a binary can be built using it.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.bAllowExports">
            <summary>
            If true, build exports lib
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.bCreateImportLibrarySeparately">
            <summary>
            If true, create a separate import library
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.bBuildAdditionalConsoleApp">
            <summary>
            If true, creates an additional console application. Hack for Windows, where it's not possible to conditionally inherit a parent's console Window depending on how
            the application is invoked; you have to link the same executable with a different subsystem setting.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.bUsePrecompiled">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.PrimaryModule">
            <summary>
            The primary module that this binary was constructed for. For executables, this is typically the launch module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.Modules">
            <summary>
            List of modules to link together into this executable
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildBinary.DependentLinkLibraries">
            <summary>
            Cached list of dependent link libraries.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.#ctor(UnrealBuildTool.UEBuildBinaryType,System.Collections.Generic.IEnumerable{Tools.DotNETCommon.FileReference},Tools.DotNETCommon.DirectoryReference,System.Boolean,UnrealBuildTool.UEBuildModuleCPP,System.Boolean)">
            <summary>
            Create an instance of the class with the given configuration data
            </summary>
            <param name="Type"></param>
            <param name="OutputFilePaths"></param>
            <param name="IntermediateDirectory"></param>
            <param name="bAllowExports"></param>
            <param name="PrimaryModule"></param>
            <param name="bUsePrecompiled"></param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.CreateAllDependentModules(UnrealBuildTool.UEBuildModule.CreateModuleDelegate)">
            <summary>
            Creates all the modules referenced by this target.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.Build(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEToolChain,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment,System.Collections.Generic.List{UnrealBuildTool.PrecompiledHeaderTemplate},UnrealBuildTool.ISourceFileWorkingSet,UnrealBuildTool.ActionGraph)">
            <summary>
            Builds the binary.
            </summary>
            <param name="Target">Rules for the target being built</param>
            <param name="ToolChain">The toolchain which to use for building</param>
            <param name="CompileEnvironment">The environment to compile the binary in</param>
            <param name="LinkEnvironment">The environment to link the binary in</param>
            <param name="SharedPCHs">List of templates for shared PCHs</param>
            <param name="WorkingSet">The working set of source files</param>
            <param name="ActionGraph">Graph to add build actions to</param>
            <returns>Set of built products</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.SetupDependentLinkEnvironment(UnrealBuildTool.LinkEnvironment)">
            <summary>
            Called to allow the binary to modify the link environment of a different binary containing 
            a module that depends on a module in this binary.
            </summary>
            <param name="DependentLinkEnvironment">The link environment of the dependency</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.FindOnlyModule(System.Collections.Generic.List{UnrealBuildTool.OnlyModule})">
            <summary>
            Called to allow the binary to to determine if it matches the Only module "short module name".
            </summary>
            <param name="OnlyModules"></param>
            <returns>The OnlyModule if found, null if not</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.FindGameModules">
            <summary>
            Called to allow the binary to find game modules.
            </summary>
            <returns>The OnlyModule if found, null if not</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.GetAllDependencyModules(System.Boolean,System.Boolean)">
            <summary>
            Generates a list of all modules referenced by this binary
            </summary>
            <param name="bIncludeDynamicallyLoaded">True if dynamically loaded modules (and all of their dependent modules) should be included.</param>
            <param name="bForceCircular">True if circular dependencies should be process</param>
            <returns>List of all referenced modules</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.FindModuleReferences(System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildModule,UnrealBuildTool.UEBuildModule})">
            <summary>
            Generates a list of all modules referenced by this binary
            </summary>
            <param name="ReferencedBy">Map of module to the module that referenced it</param>
            <returns>List of all referenced modules</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.SetCreateImportLibrarySeparately(System.Boolean)">
            <summary>
            Sets whether to create a separate import library to resolve circular dependencies for this binary
            </summary>
            <param name="bInCreateImportLibrarySeparately">True to create a separate import library</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.AddModule(UnrealBuildTool.UEBuildModule)">
            <summary>
            Adds a module to the binary.
            </summary>
            <param name="Module">The module to add</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.GetBuildProducts(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEToolChain,System.Collections.Generic.Dictionary{Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType},System.Boolean)">
            <summary>
            Gets all build products produced by this binary
            </summary>
            <param name="Target">The target being built</param>
            <param name="ToolChain">The platform toolchain</param>
            <param name="BuildProducts">Mapping of produced build product to type</param>
            <param name="bCreateDebugInfo">Whether debug info is enabled for this binary</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.AddBuildProductAndDebugFiles(Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType,System.String[],System.Collections.Generic.Dictionary{Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType},UnrealBuildTool.UEToolChain,System.Boolean)">
            <summary>
            Adds a build product and its associated debug file to a receipt.
            </summary>
            <param name="OutputFile">Build product to add</param>
            <param name="OutputType">The type of built product</param>
            <param name="DebugExtensions">Extensions for the matching debug file (may be null).</param>
            <param name="BuildProducts">Map of build products to their type</param>
            <param name="ToolChain">The toolchain used to build these binaries</param>
            <param name="bCreateDebugInfo">Whether creating debug info is enabled</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.GatherAdditionalResources(System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnrealBuildTool.UEBuildBundleResource})">
            <summary>
            Enumerates resources which the toolchain may need may produced additional build products from. Some platforms (eg. Mac, Linux) can link directly 
            against .so/.dylibs, but they are also copied to the output folder by the toolchain.
            </summary>
            <param name="Libraries">List to which libraries required by this module are added</param>
            <param name="BundleResources">List of bundle resources required by this module</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.GetAdditionalConsoleAppPath(Tools.DotNETCommon.FileReference)">
            <summary>
            Helper function to get the console app BinaryName-Cmd.exe filename based on the binary filename.
            </summary>
            <param name="BinaryPath">Full path to the binary exe.</param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.CheckRestrictedFolders(Tools.DotNETCommon.DirectoryReference,System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildModule,System.Collections.Generic.Dictionary{UnrealBuildTool.RestrictedFolder,Tools.DotNETCommon.DirectoryReference}})">
            <summary>
            Checks whether the binary output paths are appropriate for the distribution
            level of its direct module dependencies
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.ExportJson(Tools.DotNETCommon.JsonWriter)">
            <summary>
            Write information about this binary to a JSON file
            </summary>
            <param name="Writer">Writer for this binary's data</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildBinary.ToString">
            <summary>
            ToString implementation
            </summary>
            <returns>Returns the OutputFilePath for this binary</returns>
        </member>
        <member name="T:UnrealBuildTool.UEBuildModule">
            <summary>
            A unit of code compilation and linking.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.Name">
            <summary>
            The name that uniquely identifies the module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.Type">
            <summary>
            The type of module being built. Used to switch between debug/development and precompiled/source configurations.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.Rules">
            <summary>
            The rules for this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.ModuleDirectory">
            <summary>
            Path to the module directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.IsRedistributableOverride">
            <summary>
            Is this module allowed to be redistributed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.RulesFile">
            <summary>
            The name of the .Build.cs file this module was created from, if any
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.Binary">
            <summary>
            The binary the module will be linked into for the current target.  Only set after UEBuildBinary.BindModules is called.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.ModuleApiDefine">
            <summary>
            The name of the _API define for this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicDefinitions">
            <summary>
            Set of all the public definitions
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicIncludePaths">
            <summary>
            Set of all public include paths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.LegacyPublicIncludePaths">
            <summary>
            Nested public include paths which used to be added automatically, but are now only added for modules with bNestedPublicIncludePaths set.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PrivateIncludePaths">
            <summary>
            Set of all private include paths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicSystemIncludePaths">
            <summary>
            Set of all system include paths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicLibraryPaths">
            <summary>
            Set of all public library paths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicAdditionalLibraries">
            <summary>
            Set of all additional libraries
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicFrameworks">
            <summary>
            Set of additional frameworks
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicWeakFrameworks">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicAdditionalFrameworks">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicAdditionalShadowFiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicAdditionalBundleResources">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicIncludePathModules">
            <summary>
            Names of modules with header files that this module's public interface needs access to.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicDependencyModules">
            <summary>
            Names of modules that this module's public interface depends on.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PublicDelayLoadDLLs">
            <summary>
            Names of DLLs that this module should delay load
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PrivateIncludePathModules">
            <summary>
            Names of modules with header files that this module's private implementation needs access to.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.PrivateDependencyModules">
            <summary>
            Names of modules that this module's private implementation depends on.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.DynamicallyLoadedModules">
            <summary>
            Extra modules this module may require at run time
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.RuntimeDependencies">
            <summary>
            Files which this module depends on at runtime.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildModule.WhitelistRestrictedFolders">
            <summary>
            Set of all whitelisted restricted folder references
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.#ctor(System.String,UnrealBuildTool.UHTModuleType,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.ModuleRules,Tools.DotNETCommon.FileReference,System.Collections.Generic.List{UnrealBuildTool.RuntimeDependency})">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of the module</param>
            <param name="InType">Type of the module, for UHT</param>
            <param name="InModuleDirectory">Base directory for the module</param>
            <param name="InRules">Rules for this module</param>
            <param name="InRulesFile">Path to the rules file</param>
            <param name="InRuntimeDependencies">List of runtime dependencies</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.GetDependencies(System.Boolean,System.Boolean)">
            <summary>
            Returns a list of this module's dependencies.
            </summary>
            <returns>An enumerable containing the dependencies of the module.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.GetPublicFrameworks">
            <summary>
            Returns a list of this module's frameworks.
            </summary>
            <returns>A List containing the frameworks this module requires.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.GetDirectDependencyModules">
            <summary>
            Returns a list of this module's immediate dependencies.
            </summary>
            <returns>An enumerable containing the dependencies of the module.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.CreateDirectoryHashSet(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts an optional string list parameter to a well-defined hash set.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.HashSetFromOptionalEnumerableStringParameter(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts an optional string list parameter to a well-defined hash set.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.HasCircularDependencyOn(System.String)">
            <summary>
            Determines whether this module has a circular dependency on the given module
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.GatherAdditionalResources(System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnrealBuildTool.UEBuildBundleResource})">
            <summary>
            Enumerates additional build products which may be produced by this module. Some platforms (eg. Mac, Linux) can link directly against .so/.dylibs, but they 
            are also copied to the output folder by the toolchain.
            </summary>
            <param name="Libraries">List to which libraries required by this module are added</param>
            <param name="BundleResources">List of bundle resources required by this module</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.FindRestrictedFolderReferences(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Determines the distribution level of a module based on its directory and includes.
            </summary>
            <param name="ProjectDir">The project directory, if available</param>
            <returns>Map of the restricted folder types to the first found instance</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.GetReferencedDirectories(System.Collections.Generic.HashSet{Tools.DotNETCommon.DirectoryReference})">
            <summary>
            Finds all the directories that this folder references when building
            </summary>
            <param name="Directories">Set of directories to add to</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.FindModulesInPrivateCompileEnvironment(System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildModule,System.Boolean})">
            <summary>
            Find all the modules which affect the private compile environment.
            </summary>
            <param name="ModuleToIncludePathsOnlyFlag"></param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.FindModulesInPublicCompileEnvironment(System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildModule,System.Boolean})">
            <summary>
            Find all the modules which affect the public compile environment. 
            </summary>
            <param name="ModuleToIncludePathsOnlyFlag"></param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.FindIncludePathModulesInPublicCompileEnvironment(System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildModule,System.Boolean})">
            <summary>
            Find all the modules which affect the public compile environment. Searches through 
            </summary>
            <param name="ModuleToIncludePathsOnlyFlag"></param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.AddModuleToCompileEnvironment(UnrealBuildTool.UEBuildBinary,System.Collections.Generic.HashSet{Tools.DotNETCommon.DirectoryReference},System.Collections.Generic.HashSet{Tools.DotNETCommon.DirectoryReference},System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnrealBuildTool.UEBuildFramework},System.Boolean)">
            <summary>
            Sets up the environment for compiling any module that includes the public interface of this module.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.DoesPathContainVCMacro(System.String)">
            <summary>
            Checks if path contains a VC macro
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.SetupPrivateCompileEnvironment(System.Collections.Generic.HashSet{Tools.DotNETCommon.DirectoryReference},System.Collections.Generic.HashSet{Tools.DotNETCommon.DirectoryReference},System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnrealBuildTool.UEBuildFramework},System.Boolean)">
            <summary>
            Sets up the environment for compiling this module.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.SetupPublicLinkEnvironment(UnrealBuildTool.UEBuildBinary,System.Collections.Generic.List{Tools.DotNETCommon.DirectoryReference},System.Collections.Generic.List{System.String},System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnrealBuildTool.UEBuildFramework},System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnrealBuildTool.UEBuildBundleResource},System.Collections.Generic.List{System.String},System.Collections.Generic.List{UnrealBuildTool.UEBuildBinary},System.Collections.Generic.HashSet{UnrealBuildTool.UEBuildModule})">
            <summary>
            Sets up the environment for linking any module that includes the public interface of this module.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.SetupPrivateLinkEnvironment(UnrealBuildTool.UEBuildBinary,UnrealBuildTool.LinkEnvironment,System.Collections.Generic.List{UnrealBuildTool.UEBuildBinary},System.Collections.Generic.HashSet{UnrealBuildTool.UEBuildModule})">
            <summary>
            Sets up the environment for linking this module.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.Compile(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEToolChain,UnrealBuildTool.CppCompileEnvironment,System.Collections.Generic.List{UnrealBuildTool.PrecompiledHeaderTemplate},UnrealBuildTool.ISourceFileWorkingSet,UnrealBuildTool.ActionGraph)">
            <summary>
            Compiles the module, and returns a list of files output by the compiler.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.GetUnboundReferences">
            <summary>
            Finds the modules referenced by this module which have not yet been bound to a binary
            </summary>
            <returns>List of unbound modules</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.GetAllDependencyModules(System.Collections.Generic.List{UnrealBuildTool.UEBuildModule},System.Collections.Generic.HashSet{UnrealBuildTool.UEBuildModule},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets all of the modules referenced by this module
            </summary>
            <param name="ReferencedModules">Hash of all referenced modules with their addition index.</param>
            <param name="IgnoreReferencedModules">Hashset used to ignore modules which are already added to the list</param>
            <param name="bIncludeDynamicallyLoaded">True if dynamically loaded modules (and all of their dependent modules) should be included.</param>
            <param name="bForceCircular">True if circular dependencies should be processed</param>
            <param name="bOnlyDirectDependencies">True to return only this module's direct dependencies</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.RecursivelyAddPrecompiledModules(System.Collections.Generic.List{UnrealBuildTool.UEBuildModule})">
            <summary>
            Gets all of the modules precompiled along with this module
            </summary>
            <param name="Modules">Set of all the precompiled modules</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.RecursivelyCreateModules(UnrealBuildTool.UEBuildModule.CreateModuleDelegate,System.String)">
            <summary>
            Creates all the modules required for this target
            </summary>
            <param name="CreateModule">Delegate to create a module with a given name</param>
            <param name="ReferenceChain">Chain of references before reaching this module</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.ExportJson(Tools.DotNETCommon.JsonWriter)">
            <summary>
            Write information about this binary to a JSON file
            </summary>
            <param name="Writer">Writer for this binary's data</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.ExportJsonModuleArray(Tools.DotNETCommon.JsonWriter,System.String,System.Collections.Generic.IEnumerable{UnrealBuildTool.UEBuildModule})">
            <summary>
            Write an array of module names to a JSON writer
            </summary>
            <param name="Writer">Writer for the array data</param>
            <param name="ArrayName">Name of the array property</param>
            <param name="Modules">Sequence of modules to write. May be null.</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildModule.ExportJsonStringArray(Tools.DotNETCommon.JsonWriter,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Write an array of strings to a JSON writer
            </summary>
            <param name="Writer">Writer for the array data</param>
            <param name="ArrayName">Name of the array property</param>
            <param name="Strings">Sequence of strings to write. May be null.</param>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlatform.Platform">
            <summary>
            The corresponding target platform enum
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlatform.DefaultCppPlatform">
            <summary>
            The default C++ target platform to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlatform.CachedPlatformFolderNames">
            <summary>
            All the platform folder names
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlatform.CachedIncludedFolderNames">
            <summary>
            Cached copy of the list of folders to include for this platform
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildPlatform.CachedExcludedFolderNames">
            <summary>
            Cached copy of the list of folders to exclude for this platform
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.#ctor(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.CppPlatform)">
            <summary>
            Constructor.
            </summary>
            <param name="InPlatform">The enum value for this platform</param>
            <param name="InDefaultCPPPlatform">The default C++ platform for this platform</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetPlatformFolderNames">
            <summary>
            Gets an array of all platform folder names
            </summary>
            <returns>Array of platform folders</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetIncludedFolderNames">
            <summary>
            Finds a list of folder names to include when building for this platform
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetExcludedFolderNames">
            <summary>
            Finds a list of folder names to exclude when building for this platform
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.HasRequiredSDKsInstalled">
            <summary>
            Whether the required external SDKs are installed for this platform. Could be either a manual install or an AutoSDK.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetRequiredVisualStudioVersion">
            <summary>
            Whether this platform requires specific Visual Studio version.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetRegisteredPlatforms">
            <summary>
            Gets all the registered platforms
            </summary>
            <returns>Sequence of registered platforms</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetDefaultArchitecture(Tools.DotNETCommon.FileReference)">
            <summary>
            Get the default architecture for a project. This may be overriden on the command line to UBT.
            </summary>
            <param name="ProjectFile">Optional project to read settings from </param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetFolderNameForArchitecture(System.String)">
            <summary>
            Get name for architecture-specific directories (can be shorter than architecture name itself)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.FindBuildProductsToClean(Tools.DotNETCommon.DirectoryReference,System.String[],System.String[],System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.List{Tools.DotNETCommon.DirectoryReference})">
            <summary>
            Searches a directory tree for build products to be cleaned.
            </summary>
            <param name="BaseDir">The directory to search</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <param name="FilesToClean">List to receive a list of files to be cleaned</param>
            <param name="DirectoriesToClean">List to receive a list of directories to be cleaned</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.FindAdditionalBuildProductsToClean(UnrealBuildTool.ReadOnlyTargetRules,System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.List{Tools.DotNETCommon.DirectoryReference})">
            <summary>
            Enumerates any additional directories needed to clean this target
            </summary>
            <param name="Target">The target to clean</param>
            <param name="FilesToDelete">Receives a list of files to be removed</param>
            <param name="DirectoriesToDelete">Receives a list of directories to be removed</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsDefaultBuildProduct(System.String,System.String[],System.String[])">
            <summary>
            Determines if a filename is a default UBT build product
            </summary>
            <param name="FileName">The name to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <returns>True if the substring matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsBuildProduct(System.String,System.String[],System.String[])">
            <summary>
            Determines if the given name is a build product for a target.
            </summary>
            <param name="FileName">The name to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <returns>True if the string matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsBuildProductName(System.String,System.String[],System.String[],System.String)">
            <summary>
            Determines if a string is in the canonical name of a UE build product, with a specific extension (eg. "UE4Editor-Win64-Debug.exe" or "UE4Editor-ModuleName-Win64-Debug.dll"). 
            </summary>
            <param name="FileName">The file name to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <param name="Extension">The extension to check for</param>
            <returns>True if the string matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsBuildProductName(System.String,System.Int32,System.Int32,System.String[],System.String[],System.String)">
            <summary>
            Determines if a substring is in the canonical name of a UE build product, with a specific extension (eg. "UE4Editor-Win64-Debug.exe" or "UE4Editor-ModuleName-Win64-Debug.dll"). 
            </summary>
            <param name="FileName">The name to check</param>
            <param name="Index">Index of the first character to be checked</param>
            <param name="Count">Number of characters of the substring to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <param name="Extension">The extension to check for</param>
            <returns>True if the substring matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsBuildProductName(System.String,System.Int32,System.Int32,System.String[],System.String[])">
            <summary>
            Determines if a substring is in the canonical name of a UE build product, excluding extension or other decoration (eg. "UE4Editor-Win64-Debug" or "UE4Editor-ModuleName-Win64-Debug"). 
            </summary>
            <param name="FileName">The name to check</param>
            <param name="Index">Index of the first character to be checked</param>
            <param name="Count">Number of characters of the substring to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <returns>True if the substring matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.PostCodeGeneration(UnrealBuildTool.UHTManifest)">
            <summary>
            Called immediately after UnrealHeaderTool is executed to generated code for all UObjects modules.  Only is called if UnrealHeaderTool was actually run in this session.
            </summary>
            <param name="Manifest">List of UObject modules we generated code for.</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ConvertPath(System.String)">
            <summary>
            Converts the passed in path from UBT host to compiler native format.
            </summary>
            <param name="OriginalPath">The path to convert</param>
            <returns>The path in native format for the toolchain</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetBundleDirectory(UnrealBuildTool.ReadOnlyTargetRules,System.Collections.Generic.List{Tools.DotNETCommon.FileReference})">
            <summary>
            Get the bundle directory for the shared link environment
            </summary>
            <param name="Rules">The target rules</param>
            <param name="OutputFiles">List of executable output files</param>
            <returns>Path to the bundle directory</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ConvertStringToPlatform(System.String)">
            <summary>
            Attempt to convert a string to an UnrealTargetPlatform enum entry
            </summary>
            <returns>UnrealTargetPlatform.Unknown on failure (the platform didn't match the enum)</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsPlatformAvailable(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Determines whether a given platform is available
            </summary>
            <param name="Platform">The platform to check for</param>
            <returns>True if it's available, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.RegisterBuildPlatform(UnrealBuildTool.UEBuildPlatform)">
            <summary>
            Register the given platforms UEBuildPlatform instance
            </summary>
            <param name="InBuildPlatform"> The UEBuildPlatform instance to use for the InPlatform</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.RegisterPlatformWithGroup(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealPlatformGroup)">
            <summary>
            Assign a platform as a member of the given group
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetPlatformsInGroup(UnrealBuildTool.UnrealPlatformGroup)">
            <summary>
            Retrieve the list of platforms in this group (if any)
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetPlatformGroups(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Enumerates all the platform groups for a given platform
            </summary>
            <param name="Platform">The platform to look for</param>
            <returns>List of platform groups that this platform is a member of</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetBuildPlatform(UnrealBuildTool.UnrealTargetPlatform,System.Boolean)">
            <summary>
            Retrieve the IUEBuildPlatform instance for the given TargetPlatform
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="bInAllowFailure"> If true, do not throw an exception and return null</param>
            <returns>UEBuildPlatform  The instance of the build platform</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.CPPTargetPlatformToUnrealTargetPlatform(UnrealBuildTool.CppPlatform)">
            <summary>
            Gets the UnrealTargetPlatform matching a given CPPTargetPlatform
            </summary>
            <param name="InCPPPlatform">The compile platform</param>
            <returns>The target platform</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetBuildPlatformForCPPTargetPlatform(UnrealBuildTool.CppPlatform,System.Boolean)">
            <summary>
            Retrieve the IUEBuildPlatform instance for the given CPPTargetPlatform
            </summary>
            <param name="InPlatform">  The CPPTargetPlatform being built</param>
            <param name="bInAllowFailure"> If true, do not throw an exception and return null</param>
            <returns>UEBuildPlatform  The instance of the build platform</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.PlatformModifyHostModuleRules(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Allow all registered build platforms to modify the newly created module
            passed in for the given platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetPathVarDelimiter">
            <summary>
            Returns the delimiter used to separate paths in the PATH environment variable for the platform we are executing on.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetPlatformValidationName">
            <summary>
            Returns the name that should be returned in the output when doing -validateplatforms
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.CanUseXGE">
            <summary>
            If this platform can be compiled with XGE
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.CanUseParallelExecutor">
            <summary>
            If this platform can be compiled with the parallel executor
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.CanUseDistcc">
            <summary>
            If this platform can be compiled with DMUCS/Distcc
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.CanUseSNDBS">
            <summary>
            If this platform can be compiled with SN-DBS
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ResetTarget(UnrealBuildTool.TargetRules)">
            <summary>
            Set all the platform-specific defaults for a new target
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ValidateTarget(UnrealBuildTool.TargetRules)">
            <summary>
            Validate a target's settings
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.PlatformRequiresMonolithicBuilds(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Return whether the given platform requires a monolithic build
            </summary>
            <param name="InPlatform">The platform of interest</param>
            <param name="InConfiguration">The configuration of interest</param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetBinaryExtension(UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extension to use for the given binary type
            </summary>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string    The binary extension (i.e. 'exe' or 'dll')</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetDebugInfoExtensions(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extensions to use for debug info for the given binary type
            </summary>
            <param name="InTarget">Options for the target being built</param>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string[]    The debug info extensions (i.e. 'pdb')</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ShouldNotBuildEditor(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Whether the editor should be built for this platform or not
            </summary>
            <param name="InPlatform"> The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The UnrealTargetConfiguration being built</param>
            <returns>bool   true if the editor should be built, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.BuildRequiresCookedData(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Whether this build should support ONLY cooked data or not
            </summary>
            <param name="InPlatform"> The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The UnrealTargetConfiguration being built</param>
            <returns>bool   true if the editor should be built, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.UseAbsolutePathsInUnityFiles">
            <summary>
            Whether this platform requires the use of absolute paths in Unity files. The compiler will try to combine paths in
            each #include directive with the standard include paths, and unity files in intermediate directories can result in the
            maximum path length being exceeded on Windows. On the other hand, remote compilation requires relative paths so
            dependency checking works correctly on the local machine as well as on the remote machine.
            </summary>
            <returns>bool true if it is required, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ShouldCompileMonolithicBinary(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Whether this platform should build a monolithic binary
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ModifyModuleRulesForOtherPlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, where the target is a different host platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.RequiresArchitectureSuffix">
            <summary>
            Allows the platform to override whether the architecture name should be appended to the name of binaries.
            </summary>
            <returns>True if the architecture name should be appended to the binary</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.FinalizeBinaryPaths(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            For platforms that need to output multiple files per binary (ie Android "fat" binaries)
            this will emit multiple paths. By default, it simply makes an array from the input
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.HasUniqueBinaries">
            <summary>
            Return whether this platform has uniquely named binaries across multiple games
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsBuildRequired">
            <summary>
            Return whether we wish to have this platform's binaries in our builds
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsCISRequired">
            <summary>
            Return whether we wish to have this platform's binaries in our CIS tests
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.RequiresDeployPrepAfterCompile">
            <summary>
            Whether the build platform requires deployment prep
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.GetConfigurations(UnrealBuildTool.UnrealTargetPlatform,System.Boolean)">
            <summary>
            Return all valid configurations for this platform
            Typically, this is always Debug, Development, and Shipping - but Test is a likely future addition for some platforms
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.HasDefaultBuildConfig(UnrealBuildTool.UnrealTargetPlatform,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Check for the default configuration
            return true if the project uses the default build config
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.RequiresBuild(UnrealBuildTool.UnrealTargetPlatform,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Check for whether we require a build for platform reasons
            return true if the project requires a build
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.AddExtraModules(UnrealBuildTool.ReadOnlyTargetRules,System.Collections.Generic.List{System.String})">
            <summary>
            Get a list of extra modules the platform requires.
            This is to allow undisclosed platforms to add modules they need without exposing information about the platform.
            </summary>
            <param name="Target">The target being build</param>
            <param name="ExtraModuleNames">List of extra modules the platform needs to add to the target</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ModifyModuleRulesForActivePlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, in a target that's being built for this platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.SetUpEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the target environment for building
            </summary>
            <param name="Target">Settings for the target being compiled</param>
            <param name="CompileEnvironment">The compile environment for this target</param>
            <param name="LinkEnvironment">The link environment for this target</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.SetUpConfigurationEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the configuration environment for building
            </summary>
            <param name="Target">The target being built</param>
            <param name="GlobalCompileEnvironment">The global compile environment</param>
            <param name="GlobalLinkEnvironment">The global link environment</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.IsPlatformInGroup(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealPlatformGroup)">
            <summary>
            Checks if platform is part of a given platform group
            </summary>
            <param name="Platform">The platform to check</param>
            <param name="PlatformGroup">The platform group to check</param>
            <returns>True if platform is part of a platform group</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.ShouldCreateDebugInfo(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Whether this platform should create debug information or not
            </summary>
            <param name="Target">The target being built</param>
            <returns>bool    true if debug info should be generated, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.CreateToolChain(UnrealBuildTool.CppPlatform,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Creates a toolchain instance for the given platform. There should be a single toolchain instance per-target, as their may be
            state data and configuration cached between calls.
            </summary>
            <param name="CppPlatform">The platform to create a toolchain for</param>
            <param name="Target">The target being built</param>
            <returns>New toolchain instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.CreateTempToolChainForProject(Tools.DotNETCommon.FileReference)">
            <summary>
            Creates a temp toolchain instance for the given project - will not be used to compile with, and is only needed on some platforms
            </summary>
            <param name="ProjectFile">The project to make the toolchain for</param>
            <returns>New toolchain instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildPlatform.Deploy(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Deploys the given target
            </summary>
            <param name="Target">Information about the target being deployed</param>
        </member>
        <member name="T:UnrealBuildTool.UnrealTargetPlatform">
            <summary>
            The platform we're building for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Unknown">
            <summary>
            Unknown target platform
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Win32">
            <summary>
            32-bit Windows
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Win64">
            <summary>
            64-bit Windows
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Mac">
            <summary>
            Mac
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.XboxOne">
            <summary>
            XboxOne
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.PS4">
            <summary>
            Playstation 4
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.IOS">
            <summary>
            iOS
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Android">
            <summary>
            Android
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.HTML5">
            <summary>
            HTML5
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Linux">
            <summary>
            Linux
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.AllDesktop">
            <summary>
            All desktop platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.TVOS">
            <summary>
            TVOS
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Switch">
            <summary>
            Nintendo Switch
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Quail">
            <summary>
            NDA'd platform Quail
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetPlatform.Lumin">
            <summary>
            Confidential platform
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UnrealPlatformGroup">
            <summary>
            Platform groups
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformGroup.Windows">
            <summary>
            this group is just to lump Win32 and Win64 into Windows directories, removing the special Windows logic in MakeListOfUnsupportedPlatforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformGroup.Microsoft">
            <summary>
            Microsoft platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformGroup.Apple">
            <summary>
            Apple platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformGroup.IOS">
            <summary>
            making IOS a group allows TVOS to compile IOS code
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformGroup.Unix">
            <summary>
            Unix platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformGroup.Android">
            <summary>
            Android platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformGroup.Sony">
            <summary>
            Sony platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformGroup.AllDesktop">
            <summary>
            Target all desktop platforms (Win64, Mac, Linux) simultaneously
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UnrealPlatformClass">
            <summary>
            The class of platform. See Utils.GetPlatformsInClass().
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformClass.All">
            <summary>
            All platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformClass.Desktop">
            <summary>
            All desktop platforms (Win32, Win64, Mac, Linux)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformClass.Editor">
            <summary>
            All platforms which support the editor (Win64, Mac, Linux)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealPlatformClass.Server">
            <summary>
            Platforms which support running servers (Win32, Win64, Mac, Linux)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UnrealTargetConfiguration">
            <summary>
            The type of configuration a target can be built for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetConfiguration.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetConfiguration.Debug">
            <summary>
            Debug configuration
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetConfiguration.DebugGame">
            <summary>
            DebugGame configuration; equivalent to development, but with optimization disabled for game modules
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetConfiguration.Development">
            <summary>
            Development configuration
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetConfiguration.Shipping">
            <summary>
            Shipping configuration
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UnrealTargetConfiguration.Test">
            <summary>
            Test configuration
            </summary>
        </member>
        <member name="T:UnrealBuildTool.BuildManifest">
            <summary>
            A container for a binary files (dll, exe) with its associated debug info.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildManifest.BuildProducts">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildManifest.LibraryBuildProducts">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildManifest.DeployTargetFiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildManifest.PostBuildScripts">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildManifest.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildManifest.AddBuildProduct(System.String)">
            <summary>
            
            </summary>
            <param name="FileName"></param>
        </member>
        <member name="M:UnrealBuildTool.BuildManifest.AddBuildProduct(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="FileName"></param>
            <param name="DebugInfoExtension"></param>
        </member>
        <member name="M:UnrealBuildTool.BuildManifest.AddLibraryBuildProduct(System.String)">
            <summary>
            
            </summary>
            <param name="FileName"></param>
        </member>
        <member name="F:UnrealBuildTool.OnlyModule.OnlyModuleName">
            <summary>
            If building only a single module, this is the module name to build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.OnlyModule.OnlyModuleSuffix">
            <summary>
            When building only a single module, the optional suffix for the module file name
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEBuildTarget">
            <summary>
            A target that can be built
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.CreateTarget(UnrealBuildTool.TargetDescriptor,System.String[],System.Boolean,UnrealBuildTool.ReadOnlyBuildVersion)">
            <summary>
            Creates a target object for the specified target name.
            </summary>
            <param name="Desc">Information about the target</param>
            <param name="Arguments">Command line arguments</param>
            <param name="bCompilingSingleFile">Whether we're compiling a single file</param>
            <param name="Version">The current build version</param>
            <returns>The build target object for the specified build rules source file</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.ValidateSharedEnvironment(UnrealBuildTool.RulesAssembly,System.String,UnrealBuildTool.TargetRules)">
            <summary>
            Validates that the build environment matches the shared build environment, by comparing the TargetRules instance to the vanilla target rules for the current target type.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.Rules">
            <summary>
            The target rules
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.RulesAssembly">
            <summary>
            The rules assembly to use when searching for modules
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.ProjectFile">
            <summary>
            The project file for this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.ProjectDescriptor">
            <summary>
            The project descriptor for this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.TargetType">
            <summary>
            Type of target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.AppName">
            <summary>
            The name of the application the target is part of. For targets with bUseSharedBuildEnvironment = true, this is typically the name of the base application, eg. UE4Editor for any game editor.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.TargetName">
            <summary>
            The name of the target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.bUseSharedBuildEnvironment">
            <summary>
            Whether the target uses the shared build environment. If false, AppName==TargetName and all binaries should be written to the project directory.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.Platform">
            <summary>
            Platform as defined by the VCProject and passed via the command line. Not the same as internal config names.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.Configuration">
            <summary>
            Target as defined by the VCProject and passed via the command line. Not necessarily the same as internal name.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.Architecture">
            <summary>
            The architecture this target is being built for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.PlatformIntermediateFolder">
            <summary>
            Relative path for platform-specific intermediates (eg. Intermediate/Build/Win64)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.ProjectDirectory">
            <summary>
            Root directory for the active project. Typically contains the .uproject file, or the engine root.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.ProjectIntermediateDirectory">
            <summary>
            Default directory for intermediate files. Typically underneath ProjectDirectory.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.EngineIntermediateDirectory">
            <summary>
            Directory for engine intermediates. For an agnostic editor/game executable, this will be under the engine directory. For monolithic executables this will be the same as the project intermediate directory.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.OutputPaths">
            <summary>
            Output paths of final executable.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildTarget.OutputPath">
            <summary>
            Returns the OutputPath is there is only one entry in OutputPaths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.VersionFile">
            <summary>
            Path to the file that contains the version for this target. Writing this file allows a target to read its version information at runtime.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.bPrecompile">
            <summary>
            Whether to build target modules that can be reused for future builds
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.bUsePrecompiled">
            <summary>
            Whether to use precompiled engine modules
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.bHasProjectScriptPlugin">
            <summary>
            Identifies whether the project contains a script plugin. This will cause UHT to be rebuilt, even in installed builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.BuildPlugins">
            <summary>
            All plugins which are built for this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.EnabledPlugins">
            <summary>
            All plugin dependencies for this target. This differs from the list of plugins that is built for Launcher, where we build everything, but link in only the enabled plugins.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.ForeignPlugin">
            <summary>
            Specifies the path to a specific plugin to compile.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.Binaries">
            <summary>
            All application binaries; may include binaries not built by this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.PrecompileOnlyBinaries">
            <summary>
            Binaries which are precompiled for modular targets, but are not build products that the target specifically depends on
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.PrecompileOnlyModules">
            <summary>
            Modules which are precompiled for monolithic targets, but are not build products that the target specifically depends on
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.OnlyModules">
            <summary>
            If building only a specific set of modules, these are the modules to build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.NonFilteredModules">
            <summary>
            Kept to determine the correct module parsing order when filtering modules.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.bCompileMonolithic">
            <summary>
            true if target should be compiled in monolithic mode, false if not
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.Modules">
            <summary>
            Used to keep track of all modules by name.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.FlatModuleCsData">
            <summary>
            Used to map names of modules to their .Build.cs filename
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildTarget.Receipt">
            <summary>
            The receipt for this target, which contains a record of this build.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.UEBuildTarget.ReceiptFileName">
            <summary>
            Filename for the receipt for this target.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.FileReferenceToModuleManifestPairs">
            <summary>
            Module manifests to be written to each output folder
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.ForceReceiptFileName">
            <summary>
            Force output of the receipt to an additional filename
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.TargetRulesFile">
            <summary>
            The name of the .Target.cs file, if the target was created with one
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.PreBuildStepScripts">
            <summary>
            List of scripts to run before building
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.PostBuildStepScripts">
            <summary>
            List of scripts to run after building
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEBuildTarget.DeployTargetFile">
            <summary>
            File containing information needed to deploy this target
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GetAllModuleBuildCsFilenames">
            <summary>
            A list of the module filenames which were used to build this target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GetAllModuleFolders">
            <summary>
            A list of the module filenames which were used to build this target.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.ShouldCompileMonolithic">
            <summary>
            Whether this target should be compiled in monolithic mode
            </summary>
            <returns>true if it should, false if it shouldn't</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.#ctor(UnrealBuildTool.TargetDescriptor,UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.RulesAssembly,Tools.DotNETCommon.FileReference)">
            <summary>
            Constructor.
            </summary>
            <param name="InDesc">Target descriptor</param>
            <param name="InRules">The target rules, as created by RulesCompiler.</param>
            <param name="InRulesAssembly">The chain of rules assemblies that this target was created with</param>
            <param name="InTargetCsFilename">The name of the target </param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GetAppNameForTargetType(UnrealBuildTool.TargetType)">
            <summary>
            Gets the app name for a given target type
            </summary>
            <param name="Type">The target type</param>
            <returns>The app name for this target type</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.Clean(System.Boolean)">
            <summary>
            Cleans build products and intermediates for the target. This deletes files which are named consistently with the target being built
            (e.g. UE4Editor-Foo-Win64-Debug.dll) rather than an actual record of previous build products.
            </summary>
            <param name="bIncludeUnrealHeaderTool">Whether to clean UnrealHeaderTool as well</param>
            <returns>Whether the clean succeeded</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GetExternalFileList(System.Collections.Generic.HashSet{UnrealBuildTool.UEBuildModule},System.Collections.Generic.HashSet{Tools.DotNETCommon.FileReference})">
            <summary>
            Create a list of all the externally referenced files
            </summary>
            <param name="Modules">All the modules to include files for</param>
            <param name="Files">Set of referenced files</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GenerateManifest(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType}})">
            <summary>
            Generates a public manifest file for writing out
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.PrepareReceipts(UnrealBuildTool.UEToolChain,System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType}},System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType}},UnrealBuildTool.EHotReload)">
            <summary>
            Prepare all the receipts this target (all the .target and .modules files). See the VersionManifest class for an explanation of what these files are.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.AddRuntimeDependenciesFromDir(Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.StagedFileType)">
            <summary>
            Add the contents of a directory as runtime dependencies
            </summary>
            <param name="BaseDir">The base directory to enumerate files from</param>
            <param name="Type">How the file should be staged</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.TryRecycleVersionManifests(System.Collections.Generic.HashSet{Tools.DotNETCommon.FileReference})">
            <summary>
            Try to recycle the build id from existing version manifests in the engine directory rather than generating a new one, if no engine binaries are being modified.
            This allows sharing engine binaries when switching between projects and switching between UE4 and a game-specific project. Note that different targets may require
            additional engine modules to be built, so we don't prohibit files being added or removed.
            </summary>
            <param name="OutputFiles">List of files being modified by this build</param>
            <returns>True if the existing version manifests will remain valid during this build, false if they are invalidated</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.InvalidateVersionManifests">
            <summary>
            Delete all the existing version manifests
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.PatchModuleManifestsForHotReloadAssembling(System.Collections.Generic.List{UnrealBuildTool.OnlyModule})">
            <summary>
            Patches the manifests with the new module suffixes from the OnlyModules list.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.WriteReceipts">
            <summary>
            Writes out the version manifest
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.IsFileInstalled(Tools.DotNETCommon.FileReference)">
            <summary>
            Checks whether the given file is under an installed directory, and should not be overridden
            </summary>
            <param name="File">File to test</param>
            <returns>True if the file is part of the installed distribution, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GatherDependencyModules(System.Collections.Generic.List{UnrealBuildTool.UEBuildBinary})">
            <summary>
            Gathers dependency modules for given binaries list.
            </summary>
            <param name="Binaries">Binaries list.</param>
            <returns>Dependency modules set.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.Build(UnrealBuildTool.BuildConfiguration,UnrealBuildTool.CPPHeaders,System.Collections.Generic.List{UnrealBuildTool.FileItem},System.Collections.Generic.List{UnrealBuildTool.UHTModuleInfo},UnrealBuildTool.ISourceFileWorkingSet,UnrealBuildTool.ActionGraph,UnrealBuildTool.EHotReload,System.Boolean)">
            <summary>
            Builds the target, appending list of output files and returns building result.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.CreateToolchain(UnrealBuildTool.CppPlatform)">
            <summary>
            Creates a toolchain for the current target. May be overridden by the target rules.
            </summary>
            <returns>New toolchain instance</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.CleanStaleModules">
            <summary>
            Cleans any stale modules that have changed moved output folder.
            
            On Windows, the loader reads imported DLLs from the first location it finds them. If modules are moved from one place to another, we have to be sure to clean up the old versions 
            so that they're not loaded accidentally causing unintuitive import errors.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.IsWhitelistedEnginePluginReference(System.String,System.String)">
            <summary>
            Check whether a reference from an engine module to a plugin module is allowed. Temporary hack until these can be fixed up propertly.
            </summary>
            <param name="EngineModuleName">Name of the engine module.</param>
            <param name="PluginModuleName">Name of the plugin module.</param>
            <returns>True if the reference is whitelisted.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.ExportJson(System.String)">
            <summary>
            Export the definition of this target to a JSON file
            </summary>
            <param name="FileName">File to write to</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.CheckForEULAViolation">
            <summary>
            Check for EULA violation dependency issues.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.IsRedistributable(UnrealBuildTool.UEBuildModule)">
            <summary>
            Tells if this module can be redistributed.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.PreBuildSetup(UnrealBuildTool.UEToolChain)">
            <summary>
            Setup target before build. This method finds dependencies, sets up global environment etc.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.SetupCustomBuildSteps">
            <summary>
            Writes scripts for all the custom build steps
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.AddCustomBuildSteps(UnrealBuildTool.CustomBuildSteps,UnrealBuildTool.UEBuildPlugin,System.Collections.Generic.List{System.Tuple{System.String[],UnrealBuildTool.UEBuildPlugin}})">
            <summary>
            Adds custom build steps from the given JSON object to the list of command batches
            </summary>
            <param name="BuildSteps">The custom build steps</param>
            <param name="Plugin">The plugin to associate with these commands</param>
            <param name="CommandBatches">List to receive the command batches</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.WriteCustomBuildStepScripts(UnrealBuildTool.UnrealTargetPlatform,Tools.DotNETCommon.DirectoryReference,System.String,System.Collections.Generic.List{System.Tuple{System.String[],UnrealBuildTool.UEBuildPlugin}})">
            <summary>
            Write scripts containing the custom build steps for the given host platform
            </summary>
            <param name="HostPlatform">The current host platform</param>
            <param name="Directory">The output directory for the scripts</param>
            <param name="FilePrefix">Bare prefix for all the created script files</param>
            <param name="CommandBatches">List of custom build steps, and their matching PluginInfo (if appropriate)</param>
            <returns>List of created script files</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.ExecuteCustomPreBuildSteps">
            <summary>
            Executes the custom pre-build steps
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.ExecuteCustomPostBuildSteps">
            <summary>
            Executes the custom post-build steps
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.FindSharedPCHs(System.Collections.Generic.List{UnrealBuildTool.UEBuildBinary},UnrealBuildTool.CppCompileEnvironment)">
            <summary>
            Determines which modules can be used to create shared PCHs
            </summary>
            <returns>List of shared PCH modules, in order of preference</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.AddExtraModules">
            <summary>
            When building a target, this is called to add any additional modules that should be compiled along
            with the main target.  If you override this in a derived class, remember to call the base implementation!
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.AddModulesToPrecompile">
            <summary>
            Adds all the precompiled modules into the target. Precompiled modules are compiled alongside the target, but not linked into it unless directly referenced.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GetBaseOutputDirectory(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.PluginInfo)">
            <summary>
            Finds the base output directory for build products of the given module
            </summary>
            <param name="ModuleName">Name of the module</param>
            <param name="ModuleRules">The rules object created for this module</param>
            <param name="Plugin">The plugin that this module belongs to</param>
            <returns>The base output directory for compiled object files for this module</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GetModuleIntermediateDirectory(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.PluginInfo)">
            <summary>
            Finds the base output directory for a module
            </summary>
            <param name="ModuleName">Name of the module</param>
            <param name="ModuleRules">The rules object created for this module</param>
            <param name="Plugin">The plugin that this module belongs to</param>
            <returns>The output directory for compiled object files for this module</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.CreateDynamicLibraryForModule(UnrealBuildTool.UEBuildModuleCPP)">
            <summary>
            Adds a dynamic library for the given module. Does not check whether a binary already exists, or whether a binary should be created for this build configuration.
            </summary>
            <param name="Module">The module to create a binary for</param>
            <returns>The new binary. This has not been added to the target.</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.MakeBinaryFileName(System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Makes a filename (without path) for a compiled binary (e.g. "Core-Win64-Debug.lib") */
            </summary>
            <param name="BinaryName">The name of this binary</param>
            <param name="Platform">The platform being built for</param>
            <param name="Configuration">The configuration being built</param>
            <param name="Architecture">The target architecture being built</param>
            <param name="UndecoratedConfiguration">The target configuration which doesn't require a platform and configuration suffix. Development by default.</param>
            <param name="BinaryType">Type of binary</param>
            <returns>Name of the binary</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.MakeBinaryPaths(Tools.DotNETCommon.DirectoryReference,System.String,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.UEBuildBinaryType,System.String,UnrealBuildTool.UnrealTargetConfiguration,System.Boolean,System.String,Tools.DotNETCommon.FileReference,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Determine the output path for a target's executable
            </summary>
            <param name="BaseDirectory">The base directory for the executable; typically either the engine directory or project directory.</param>
            <param name="BinaryName">Name of the binary</param>
            <param name="Platform">Target platform to build for</param>
            <param name="Configuration">Target configuration being built</param>
            <param name="Architecture">Architecture being built</param>
            <param name="BinaryType">The type of binary we're compiling</param>
            <param name="UndecoratedConfiguration">The configuration which doesn't have a "-{Platform}-{Configuration}" suffix added to the binary</param>
            <param name="bIncludesGameModules">Whether this executable contains game modules</param>
            <param name="ExeSubFolder">Subfolder for executables. May be null.</param>
            <param name="ProjectFile">The project file containing the target being built</param>
            <param name="Rules">Rules for the target being built</param>
            <returns>List of executable paths for this target</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.SetupPlugins">
            <summary>
            Sets up the plugins for this target
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.AddPlugin(UnrealBuildTool.PluginReferenceDescriptor,System.String,Tools.DotNETCommon.FileSystemName[],System.Collections.Generic.Dictionary{System.String,UnrealBuildTool.UEBuildPlugin},System.Collections.Generic.Dictionary{System.String,UnrealBuildTool.PluginInfo})">
            <summary>
            Creates a plugin instance from a reference to it
            </summary>
            <param name="Reference">Reference to the plugin</param>
            <param name="ReferenceChain">Textual representation of the chain of references, for error reporting</param>
            <param name="ExcludeFolders">Array of folder names to be excluded</param>
            <param name="NameToInstance">Map from plugin name to instance of it</param>
            <param name="NameToInfo">Map from plugin name to information</param>
            <returns>Instance of the plugin, or null if it should not be used</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.ShouldExcludePlugin(UnrealBuildTool.PluginInfo,Tools.DotNETCommon.FileSystemName[])">
            <summary>
            Checks whether a plugin path contains a platform directory fragment
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.SetupBinaries">
            <summary>
            Sets up the binaries for the target.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.SetupGlobalEnvironment(UnrealBuildTool.UEToolChain,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Sets up the global compile and link environment for the target.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.CreateModuleRulesAndSetDefaults(System.String,System.String,Tools.DotNETCommon.FileReference@)">
            <summary>
            Create a rules object for the given module, and set any default values for this target
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.RemoveTrailingSlashes(System.Collections.Generic.List{System.String})">
            <summary>
            Utility function to remove trailing slashes from a list of paths
            </summary>
            <param name="Paths">List of paths to process</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.FindOrCreateModuleByName(System.String,System.String)">
            <summary>
            Finds a module given its name.  Throws an exception if the module couldn't be found.
            </summary>
            <param name="ModuleName">Name of the module</param>
            <param name="ReferenceChain">Chain of references causing this module to be instantiated, for display in error messages</param>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.FindOrCreateCppModuleByName(System.String,System.String)">
            <summary>
            Constructs a new C++ module
            </summary>
            <param name="ModuleName">Name of the module</param>
            <param name="ReferenceChain">Chain of references causing this module to be instantiated, for display in error messages</param>
            <returns>New C++ module</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.NormalizeIncludePath(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Normalize an include path to be relative to the engine source directory
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GetModuleByName(System.String)">
            <summary>
            Finds a module given its name.  Throws an exception if the module couldn't be found.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.CombinePathList(Tools.DotNETCommon.DirectoryReference,System.Collections.Generic.List{System.String})">
            <summary>
            Combines a list of paths with a base path.
            </summary>
            <param name="BasePath">Base path to combine with. May be null or empty.</param>
            <param name="PathList">List of input paths to combine with. May be null.</param>
            <returns>List of paths relative The build module object for the specified build rules source file</returns>
        </member>
        <member name="M:UnrealBuildTool.UEBuildTarget.GetCPlusPlusFilesToBuild(System.Collections.Generic.List{Tools.DotNETCommon.FileReference},Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Given a list of source files for a module, filters them into a list of files that should actually be included in a build
            </summary>
            <param name="SourceFiles">Original list of files, which may contain non-source</param>
            <param name="SourceFilesBaseDirectory">Directory that the source files are in</param>
            <param name="TargetPlatform">The platform we're going to compile for</param>
            <returns>The list of source files to actually compile</returns>
        </member>
        <member name="T:UnrealBuildTool.ActionType">
            <summary>
            Enumerates build action types.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.Action">
            <summary>
            A build action.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.ActionType">
            
             Preparation and Assembly (serialized)
             
            <summary>
            The type of this action (for debugging purposes).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.PrerequisiteItems">
            <summary>
            Every file this action depends on.  These files need to exist and be up to date in order for this action to even be considered
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.ProducedItems">
            <summary>
            The files that this action produces after completing
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.WorkingDirectory">
            <summary>
            Directory from which to execute the program to create produced items
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bPrintDebugInfo">
            <summary>
            True if we should log extra information when we run a program to create produced items
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.CommandPath">
            <summary>
            The command to run to create produced items
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.CommandArguments">
            <summary>
            Command-line parameters to pass to the program
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.CommandDescription">
            <summary>
            Optional friendly description of the type of command being performed, for example "Compile" or "Link".  Displayed by some executors.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.StatusDescription">
            <summary>
            Human-readable description of this action that may be displayed as status while invoking the action.  This is often the name of the file being compiled, or an executable file name being linked.  Displayed by some executors.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bCanExecuteRemotely">
            <summary>
            True if this action is allowed to be run on a remote machine when a distributed build system is being used, such as XGE
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bCanExecuteRemotelyWithSNDBS">
            <summary>
            True if this action is allowed to be run on a remote machine with SNDBS. Files with #import directives must be compiled locally. Also requires bCanExecuteRemotely = true.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bIsGCCCompiler">
            <summary>
            True if this action is using the GCC compiler.  Some build systems may be able to optimize for this case.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bIsUsingPCH">
            <summary>
            Whether the action is using a pre-compiled header to speed it up.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bShouldDeleteProducedItems">
            <summary>
            Whether the files in ProducedItems should be deleted before executing this action, when the action is outdated
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bShouldOutputStatusDescription">
            <summary>
            Whether we should log this action, whether executed locally or remotely.  This is useful for actions that take time
            but invoke tools without any console output.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bUseIncrementalLinking">
            <summary>
            Whether this action includes incremental linking.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.bProducesImportLibrary">
            <summary>
            True if any libraries produced by this action should be considered 'import libraries'
            </summary>
        </member>
        <member name="T:UnrealBuildTool.Action.BlockingActionHandler">
            <summary>
            Callback used to perform a special action instead of a generic command line
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.UniqueId">
            
             Preparation only (not serialized)
            
            <summary>
            Unique action identifier.  Used for displaying helpful info about detected cycles in the graph.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.NumTotalDependentActions">
            <summary>
            Total number of actions depending on this one.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.RelativeCost">
            <summary>
            Relative cost of producing items for this action.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.StartTime">
            
             Assembly only (not serialized)
            
            <summary>
            Start time of action, optionally set by executor.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Action.EndTime">
            <summary>
            End time of action, optionally set by executor.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Action.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable: Called when serialized to report additional properties that should be saved
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Action.Compare(UnrealBuildTool.Action,UnrealBuildTool.Action)">
            <summary>
            Compares two actions based on total number of dependent items, descending.
            </summary>
            <param name="A">Action to compare</param>
            <param name="B">Action to compare</param>
        </member>
        <member name="P:UnrealBuildTool.Action.Duration">
            <summary>
            Returns the amount of time that this action is or has been executing in.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionGraph.NextUniqueId">
            <summary>
            Unique Id given to all actions added to this graph
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionGraph.AllActions">
            <summary>
            List of all the actions
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.GetActionsToExecute(UnrealBuildTool.BuildConfiguration,UnrealBuildTool.Action[],System.Collections.Generic.List{UnrealBuildTool.UEBuildTarget},System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildTarget,UnrealBuildTool.CPPHeaders},System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildTarget,System.Collections.Generic.List{UnrealBuildTool.FileItem}}@)">
            <summary>
            Builds a list of actions that need to be executed to produce the specified output items.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.ExecuteActions(UnrealBuildTool.BuildConfiguration,System.Collections.Generic.List{UnrealBuildTool.Action},System.Boolean,System.String@,System.String,UnrealBuildTool.EHotReload)">
            <summary>
            Executes a list of actions.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.LinkActionsAndItems">
            <summary>
            Links actions with their prerequisite and produced items into an action graph.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.DeleteStaleHotReloadDLLs">
            <summary>
            Finds and deletes stale hot reload DLLs.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.SortActionList">
            <summary>
            Sorts the action list for improved parallelism with local execution.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.DetectActionGraphCycles">
            <summary>
            Checks for cycles in the action graph.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.GatherPrerequisiteActions(UnrealBuildTool.FileItem,System.Collections.Generic.HashSet{UnrealBuildTool.Action}@)">
            <summary>
            Determines the full set of actions that must be built to produce an item.
            </summary>
            <param name="OutputItem">- The item to be built.</param>
            <param name="PrerequisiteActions">- The actions that must be built and the root action are</param>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.IsActionOutdated(UnrealBuildTool.BuildConfiguration,UnrealBuildTool.UEBuildTarget,UnrealBuildTool.CPPHeaders,UnrealBuildTool.Action,System.Boolean,System.Boolean,System.Collections.Generic.Dictionary{UnrealBuildTool.Action,System.Boolean},UnrealBuildTool.ActionHistory,System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildTarget,System.Collections.Generic.List{UnrealBuildTool.FileItem}})">
            <summary>
            Determines whether an action is outdated based on the modification times for its prerequisite
            and produced items.
            </summary>
            <param name="BuildConfiguration">Build configuration options</param>
            <param name="Target"></param>
            <param name="Headers"></param>
            <param name="RootAction">- The action being considered.</param>
            <param name="bIsAssemblingBuild"></param>
            <param name="bNeedsFullCPPIncludeRescan"></param>
            <param name="OutdatedActionDictionary">-</param>
            <param name="ActionHistory"></param>
            <param name="TargetToOutdatedPrerequisitesMap"></param>
            <returns>true if outdated</returns>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.GatherAllOutdatedActions(UnrealBuildTool.BuildConfiguration,UnrealBuildTool.UEBuildTarget,UnrealBuildTool.CPPHeaders,System.Boolean,System.Boolean,UnrealBuildTool.ActionHistory,System.Collections.Generic.Dictionary{UnrealBuildTool.Action,System.Boolean}@,System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildTarget,System.Collections.Generic.List{UnrealBuildTool.FileItem}})">
            <summary>
            Builds a dictionary containing the actions from AllActions that are outdated by calling
            IsActionOutdated.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.DeleteOutdatedProducedItems(System.Collections.Generic.Dictionary{UnrealBuildTool.Action,System.Boolean},System.Boolean)">
            <summary>
            Deletes all the items produced by actions in the provided outdated action dictionary.
            </summary>
            <param name="OutdatedActionDictionary">Dictionary of outdated actions</param>
            <param name="bShouldDeleteAllFiles"> Whether to delete all files associated with outdated items or just ones required</param>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.CreateDirectoriesForProducedItems(System.Collections.Generic.Dictionary{UnrealBuildTool.Action,System.Boolean})">
            <summary>
            Creates directories for all the items produced by actions in the provided outdated action
            dictionary.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.IsCPPImplementationFile(UnrealBuildTool.FileItem)">
            <summary>
            Checks if the specified file is a C++ source implementation file (e.g., .cpp)
            </summary>
            <param name="FileItem">The file to check</param>
            <returns>True if this is a C++ source file</returns>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.IsCPPIncludeFile(UnrealBuildTool.FileItem)">
            <summary>
            Checks if the specified file is a C++ source header file (e.g., .h or .inl)
            </summary>
            <param name="FileItem">The file to check</param>
            <returns>True if this is a C++ source file</returns>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.IsCPPResourceFile(UnrealBuildTool.FileItem)">
            <summary>
            Checks if the specified file is a C++ resource file (e.g., .rc)
            </summary>
            <param name="FileItem">The file to check</param>
            <returns>True if this is a C++ source file</returns>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.IsCPPFile(UnrealBuildTool.FileItem)">
            <summary>
            Checks if the specified file is a C++ source file
            </summary>
            <param name="FileItem">The file to check</param>
            <returns>True if this is a C++ source file</returns>
        </member>
        <member name="T:UnrealBuildTool.ActionGraph.ActionGraphVisualizationType">
            <summary>
            Types of action graph visualizations that we can emit
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionGraph.SaveActionGraphVisualization(UnrealBuildTool.CPPHeaders,System.String,System.String,UnrealBuildTool.ActionGraph.ActionGraphVisualizationType,System.Collections.Generic.List{UnrealBuildTool.Action},System.Boolean)">
            <summary>
            Saves the action graph (and include dependency network) to a graph gile
            </summary>
            <param name="Headers">Cached header data for this target</param>
            <param name="Filename">File name to emit</param>
            <param name="Description">Description to be stored in graph metadata</param>
            <param name="VisualizationType">Type of graph to create</param>
            <param name="Actions">All actions</param>
            <param name="IncludeCompileActions">True if we should include compile actions.  If disabled, only the static link actions will be shown, which is useful to see module relationships</param>
        </member>
        <member name="T:UnrealBuildTool.ActionHistory">
            <summary>
            Caches include dependency information to speed up preprocessing on subsequent runs.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionHistory.FilePath">
            <summary>
            Path to store the cache data to.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionHistory.ProducedItemToPreviousActionCommandLine">
            <summary>
            The command lines used to produce files, keyed by the absolute file paths.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionHistory.bIsDirty">
            <summary>
            Whether the dependency cache is dirty and needs to be saved.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionHistory.GeneratePathForTarget(UnrealBuildTool.UEBuildTarget)">
            <summary>
            Generates a full path to action history file for the specified target.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.BuildException">
            <summary>
            Base class for exceptions thrown by UBT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="Message">The error message to display.</param>
        </member>
        <member name="M:UnrealBuildTool.BuildException.#ctor(System.Exception,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="InnerException">An inner exception to wrap</param>
            <param name="Message">The error message to display.</param>
        </member>
        <member name="M:UnrealBuildTool.BuildException.#ctor(System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="Format">Formatting string for the error message</param>
            <param name="Arguments">Arguments for the formatting string</param>
        </member>
        <member name="M:UnrealBuildTool.BuildException.#ctor(System.Exception,System.String,System.Object[])">
            <summary>
            Constructor which wraps another exception
            </summary>
            <param name="InnerException">The inner exception being wrapped</param>
            <param name="Format">Format for the message string</param>
            <param name="Arguments">Format arguments</param>
        </member>
        <member name="M:UnrealBuildTool.BuildException.ToString">
            <summary>
            Returns the string representing the exception. Our build exceptions do not show the callstack since they are used to report known error conditions.
            </summary>
            <returns>Message for the exception</returns>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bIgnoreOutdatedImportLibraries">
            <summary>
            Whether to ignore import library files that are out of date when building targets.  Set this to true to improve iteration time.
            By default we don't bother relinking targets if only a dependent .lib has changed, as chances are that
            the import library wasn't actually different unless a dependent header file of this target was also changed,
            in which case the target would be rebuilt automatically.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bUseActionHistory">
            <summary>
            Whether to generate command line dependencies for compile actions when requested
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bPrintDebugInfo">
            <summary>
            Whether debug info should be written to the console.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.LogFileName">
            <summary>
            Specifies the file to use for logging
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bPrintPerformanceInfo">
            <summary>
            Prints performance diagnostics about include dependencies and other bits
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bLogDetailedActionStats">
            <summary>
            Whether to log detailed action stats. This forces local execution.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bAllowXGE">
            <summary>
            Whether XGE may be used.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bXGEExport">
            <summary>
            Whether we should just export the XGE XML and pretend it succeeded
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bAllowSNDBS">
            <summary>
            Whether SN-DBS may be used.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bShouldDeleteAllOutdatedProducedItems">
            <summary>
            Whether or not to delete outdated produced items.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.JsonExportFile">
            <summary>
            Whether we should export a JSON file containing detailed target information.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bSkipBuild">
            <summary>
            Skip building; just do setup and terminate.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bUseIncludeDependencyResolveCache">
            <summary>
            Whether the dependency cache includes pre-resolved include locations so UBT doesn't have to re-resolve each include location just to check the timestamp.
            This is technically not fully correct because the dependency cache is global and each module could have a different set of include paths that could cause headers
            to resolve files differently. In practice this is not the case, and significantly speeds up UBT when nothing is to be done.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bTestIncludeDependencyResolveCache">
            <summary>
            Used to test the dependency resolve cache. This will verify the resolve cache has no conflicts by resolving every time and checking against any previous resolve attempts.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bUseUBTMakefiles">
             <summary>
             Enables support for very fast iterative builds by caching target data.  Turning this on causes Unreal Build Tool to emit
             'UBT Makefiles' for targets when they're built the first time.  Subsequent builds will load these Makefiles and begin
             outdatedness checking and build invocation very quickly.  The caveat is that if source files are added or removed to
             the project, UBT will need to gather information about those in order for your build to complete successfully.  Currently,
             you must run the project file generator after adding/removing source files to tell UBT to re-gather this information.
             
             Events that can invalidate the 'UBT Makefile':  
            		- Adding/removing .cpp files
            		- Adding/removing .h files with UObjects
            		- Adding new UObject types to a file that didn't previously have any
            		- Changing global build settings (most settings in this file qualify.)
            		- Changed code that affects how Unreal Header Tool works
            	
            	You can force regeneration of the 'UBT Makefile' by passing the '-gather' argument, or simply regenerating project files
            
            	This also enables the fast include file dependency scanning and caching system that allows Unreal Build Tool to detect out 
             of date dependencies very quickly.  When enabled, a deep C++ include graph does not have to be generated, and instead
             we only scan and cache indirect includes for after a dependent build product was already found to be out of date.  During the
             next build, we'll load those cached indirect includes and check for outdatedness.
             </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bAllowDistcc">
            <summary>
            Whether DMUCS/Distcc may be used.
            Distcc requires some setup - so by default disable it so we don't break local or remote building
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bAllowParallelExecutor">
            <summary>
            Whether to allow using parallel executor on Windows.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.SingleFileToCompile">
            <summary>
            If specified, we will only build this particular source file, ignore all other outputs.  Useful for testing non-Unity builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bIgnoreJunk">
            <summary>
            Whether to skip checking for files identified by the junk manifest
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bGenerateManifest">
            <summary>
            Whether to generate a manifest file that contains the files to add to Perforce
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bCleanProject">
            <summary>
            Whether to 'clean' the given project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.DeployTargetFile">
            <summary>
            If we are just running the deployment step, specifies the path to the given deployment settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bForceHeaderGeneration">
            <summary>
            If true, force header regeneration. Intended for the build machine
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bDoNotBuildUHT">
            <summary>
            If true, do not build UHT, assume it is already built
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bFailIfGeneratedCodeChanges">
            <summary>
            If true, fail if any of the generated header files is out of date.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bAllowHotReloadFromIDE">
            <summary>
            True if hot-reload from IDE is allowed
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bForceDebugUnrealHeaderTool">
            <summary>
            If true, the Debug version of UnrealHeaderTool will be build and run instead of the Development version.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.CompilerArgumentForUnrealHeaderTool">
            <summary>
            Compiler arguments to be forwarded to UnrealHeaderTool
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildConfiguration.bSkipLinkingWhenNothingToCompile">
            <summary>
            When true, the targets won't execute their link actions if there was nothing to compile
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildConfiguration.#ctor">
            <summary>
            Default constructor. Reads settings from the XmlConfig files.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.BuildHostPlatform">
            <summary>
            Host platform abstraction
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.GetRuntimePlatform">
            <summary>
            Returns the name of platform UBT is running on. Internal use only. If you need access this this enum, use BuildHostPlatform.Current.Platform */
            </summary>
        </member>
        <member name="P:UnrealBuildTool.BuildHostPlatform.Current">
            <summary>
            Host platform singleton.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.BuildHostPlatform.Platform">
            <summary>
            Gets the current host platform type.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.GetDllApiVersion(System.String)">
            <summary>
            Checks the API version of a dynamic library
            </summary>
            <param name="Filename">Filename of the library</param>
            <returns>API version of -1 if not found.</returns>
        </member>
        <member name="T:UnrealBuildTool.BuildHostPlatform.ProcessInfo">
            <summary>
            Class that holds information about a running process
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildHostPlatform.ProcessInfo.PID">
            <summary>
            Process ID
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildHostPlatform.ProcessInfo.Name">
            <summary>
            Name of the process
            </summary>
        </member>
        <member name="F:UnrealBuildTool.BuildHostPlatform.ProcessInfo.Filename">
            <summary>
            Filename of the process binary
            </summary>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.ProcessInfo.#ctor(System.Int32,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="InPID">The process ID</param>
            <param name="InName">The process name</param>
            <param name="InFilename">The process filename</param>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.ProcessInfo.#ctor(System.Diagnostics.Process)">
            <summary>
            Constructor
            </summary>
            <param name="Proc">Process to take information from</param>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.ProcessInfo.ToString">
            <summary>
            Format as a string for debugging
            </summary>
            <returns>String containing process info</returns>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.GetProcesses">
            <summary>
            Gets all currently running processes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.GetProcessByName(System.String)">
            <summary>
            Gets a process by name.
            </summary>
            <param name="Name">Name of the process to get information for.</param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.GetProcessesByName(System.String)">
            <summary>
            Gets processes by name.
            </summary>
            <param name="Name">Name of the process to get information for.</param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.GetProcessModules(System.Int32,System.String)">
            <summary>
            Gets the filenames of all modules associated with a process
            </summary>
            <param name="PID">Process ID</param>
            <param name="Filename">Filename of the binary associated with the process.</param>
            <returns>An array of all module filenames associated with the process. Can be empty of the process is no longer running.</returns>
        </member>
        <member name="M:UnrealBuildTool.BuildHostPlatform.GetDefaultProjectFileFormats(System.Collections.Generic.List{UnrealBuildTool.ProjectFileFormat})">
            <summary>
            Determines the default project file formats for this platform
            </summary>
            <returns>Sequence of project file formats</returns>
        </member>
        <member name="M:UnrealBuildTool.MacBuildHostPlatform.GetProcesses">
            <summary>
            Currently Mono returns incomplete process names in Process.GetProcesses() so we need to parse 'ps' output.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.MacBuildHostPlatform.GetProcessModules(System.Int32,System.String)">
            <summary>
            Currently Mono returns incomplete list of modules for Process.Modules so we need to parse vmmap output.
            </summary>
            <param name="PID"></param>
            <param name="Filename"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxBuildHostPlatform.GetProcesses">
            <summary>
            Currently Mono returns incomplete process names in Process.GetProcesses() so we need to use /proc
            (also, Mono locks up during process traversal sometimes, trying to open /dev/snd/pcm*)
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.LinuxBuildHostPlatform.GetProcessModules(System.Int32,System.String)">
            <summary>
            Currently Mono returns incomplete list of modules for Process.Modules so we need to parse /proc/PID/maps.
            (also, Mono locks up during process traversal sometimes, trying to open /dev/snd/pcm*)
            </summary>
            <param name="PID"></param>
            <param name="Filename"></param>
            <returns></returns>
        </member>
        <member name="T:UnrealBuildTool.FlatCPPIncludeDependencyInfo">
            <summary>
            Stores an ordered list of header files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FlatCPPIncludeDependencyInfo.PCHName">
            The PCH header this file is dependent on.
        </member>
        <member name="F:UnrealBuildTool.FlatCPPIncludeDependencyInfo.Includes">
            List of files this file includes, excluding headers that were included from a PCH.
        </member>
        <member name="F:UnrealBuildTool.FlatCPPIncludeDependencyInfo.IncludeFileItems">
            Transient cached list of FileItems for all of the includes for a specific files.  This just saves a bunch of string
            hash lookups as we locate FileItems for files that we've already requested dependencies for
        </member>
        <member name="T:UnrealBuildTool.FlatCPPIncludeDependencyCache">
            <summary>
            For a given target, caches all of the C++ source files and the files they are including
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FlatCPPIncludeDependencyCache.FileVersion">
            <summary>
            The version number for binary serialization
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FlatCPPIncludeDependencyCache.FileSignature">
            <summary>
            The file signature for binary serialization
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FlatCPPIncludeDependencyCache.BackingFile">
            File name of this cache, should be unique for every includes context (e.g. target)
        </member>
        <member name="F:UnrealBuildTool.FlatCPPIncludeDependencyCache.bIsDirty">
            True if the cache needs to be saved
        </member>
        <member name="F:UnrealBuildTool.FlatCPPIncludeDependencyCache.DependencyMap">
            Dependency lists, keyed (case-insensitively) on file's absolute path.
        </member>
        <member name="M:UnrealBuildTool.FlatCPPIncludeDependencyCache.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Constructs a fresh cache, storing the file name that it should be saved as later on
            </summary>
            <param name="BackingFile">File name for this cache, usually unique per context (e.g. target)</param>
        </member>
        <member name="M:UnrealBuildTool.FlatCPPIncludeDependencyCache.TryRead(Tools.DotNETCommon.FileReference,UnrealBuildTool.FlatCPPIncludeDependencyCache@)">
            <summary>
            Loads the cache from disk
            </summary>
            <param name="BackingFile">The file to read from</param>
            <param name="Cache">The loaded cache</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.FlatCPPIncludeDependencyCache.Save">
            <summary>
            Saves out the cache
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FlatCPPIncludeDependencyCache.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the dependency cache to a binary writer
            </summary>
            <param name="Writer">Writer to output to</param>
        </member>
        <member name="M:UnrealBuildTool.FlatCPPIncludeDependencyCache.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize the dependency cache from a binary reader
            </summary>
            <param name="Reader">Reader for the cache data</param>
            <returns>New dependency cache object</returns>
        </member>
        <member name="M:UnrealBuildTool.FlatCPPIncludeDependencyCache.SetDependenciesForFile(Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,System.Collections.Generic.List{Tools.DotNETCommon.FileReference})">
            <summary>
            Sets the new dependencies for the specified file
            </summary>
            <param name="AbsoluteFilePath">File to set</param>
            <param name="PCHName">The PCH for this file</param>
            <param name="Dependencies">List of source dependencies</param>
        </member>
        <member name="M:UnrealBuildTool.FlatCPPIncludeDependencyCache.GetDependenciesForFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Gets everything that this file includes from our cache (direct and indirect!)
            </summary>
            <param name="AbsoluteFilePath">Path to the file</param>
            <returns>The list of includes</returns>
        </member>
        <member name="M:UnrealBuildTool.FlatCPPIncludeDependencyCache.GetDependencyCachePathForTarget(UnrealBuildTool.UEBuildTarget)">
            <summary>
            Gets the dependency cache path and filename for the specified target.
            </summary>
            <param name="Target">Current build target</param>
            <returns>Cache Path</returns>
        </member>
        <member name="F:UnrealBuildTool.Distcc.bAllowDistccLocalFallback">
            <summary>
            When enabled allows DMUCS/Distcc to fallback to local compilation when remote compiling fails. Defaults to true as separation of pre-process and compile stages can introduce non-fatal errors.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Distcc.bVerboseDistccOutput">
            <summary>
            When true enable verbose distcc output to aid debugging.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Distcc.DistccExecutablesPath">
            <summary>
            Path to the Distcc and DMUCS executables.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Distcc.DMUCSCoordinator">
            <summary>
            DMUCS coordinator hostname or IP address.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Distcc.DMUCSDistProp">
            <summary>
            The DMUCS distinguishing property value to request for compile hosts.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleHostType">
            <summary>
            The type of host that can load a module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.Default">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.Runtime">
            <summary>
            Any target using the UE4 runtime
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.RuntimeNoCommandlet">
            <summary>
            Any target except for commandlet
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.RuntimeAndProgram">
            <summary>
            Any target or program
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.CookedOnly">
            <summary>
            Loaded only in cooked builds
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.Developer">
            <summary>
            Loaded only when the engine has support for developer tools enabled
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.Editor">
            <summary>
            Loaded only by the editor
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.EditorNoCommandlet">
            <summary>
            Loaded only by the editor, except when running commandlets
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.Program">
            <summary>
            Loaded only by programs
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.ServerOnly">
            <summary>
            Loaded only by servers
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleHostType.ClientOnly">
            <summary>
            Loaded only by clients
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleLoadingPhase">
            <summary>
            Indicates when the engine should attempt to load this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleLoadingPhase.Default">
            <summary>
            Loaded at the default loading point during startup (during engine init, after game modules are loaded.)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleLoadingPhase.PostDefault">
            <summary>
            Right after the default phase
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleLoadingPhase.PreDefault">
            <summary>
            Right before the default phase
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleLoadingPhase.PostConfigInit">
            <summary>
            Loaded before the engine is fully initialized, immediately after the config system has been initialized.  Necessary only for very low-level hooks
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleLoadingPhase.PreEarlyLoadingScreen">
            <summary>
            After PostConfigInit and before coreUobject initialized. used for early boot loading screens before the uobjects are initialized
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleLoadingPhase.PreLoadingScreen">
            <summary>
            Loaded before the engine is fully initialized for modules that need to hook into the loading screen before it triggers
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleLoadingPhase.PostEngineInit">
            <summary>
            After the engine has been initialized
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleLoadingPhase.None">
            <summary>
            Do not automatically load this module
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ModuleDescriptor">
            <summary>
            Class containing information about a code module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.Name">
            <summary>
            Name of this module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.Type">
            <summary>
            Usage type of module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.LoadingPhase">
            <summary>
            When should the module be loaded during the startup sequence?  This is sort of an advanced setting.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.WhitelistPlatforms">
            <summary>
            List of allowed platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.BlacklistPlatforms">
            <summary>
            List of disallowed platforms
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.WhitelistTargets">
            <summary>
            List of allowed targets
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.BlacklistTargets">
            <summary>
            List of disallowed targets
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.WhitelistTargetConfigurations">
            <summary>
            List of allowed target configurations
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.BlacklistTargetConfigurations">
            <summary>
            List of disallowed target configurations
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ModuleDescriptor.AdditionalDependencies">
            <summary>
            List of additional dependencies for building this module.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ModuleDescriptor.#ctor(System.String,UnrealBuildTool.ModuleHostType)">
            <summary>
            Constructor
            </summary>
            <param name="InName">Name of the module</param>
            <param name="InType">Type of target that can host this module</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleDescriptor.FromJsonObject(Tools.DotNETCommon.JsonObject)">
            <summary>
            Constructs a ModuleDescriptor from a Json object
            </summary>
            <param name="InObject"></param>
            <returns>The new module descriptor</returns>
        </member>
        <member name="M:UnrealBuildTool.ModuleDescriptor.Write(Tools.DotNETCommon.JsonWriter)">
            <summary>
            Write this module to a JsonWriter
            </summary>
            <param name="Writer">Writer to output to</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleDescriptor.WriteArray(Tools.DotNETCommon.JsonWriter,System.String,UnrealBuildTool.ModuleDescriptor[])">
            <summary>
            Write an array of module descriptors
            </summary>
            <param name="Writer">The Json writer to output to</param>
            <param name="Name">Name of the array</param>
            <param name="Modules">Array of modules</param>
        </member>
        <member name="M:UnrealBuildTool.ModuleDescriptor.IsCompiledInConfiguration(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.TargetType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the given plugin module is part of the current build.
            </summary>
            <param name="Platform">The platform being compiled for</param>
            <param name="TargetConfiguration">The target configuration being compiled for</param>
            <param name="TargetType">The type of the target being compiled</param>
            <param name="bBuildDeveloperTools">Whether the configuration includes developer tools (typically UEBuildConfiguration.bBuildDeveloperTools for UBT callers)</param>
            <param name="bBuildEditor">Whether the configuration includes the editor (typically UEBuildConfiguration.bBuildEditor for UBT callers)</param>
            <param name="bBuildRequiresCookedData">Whether the configuration requires cooked content (typically UEBuildConfiguration.bBuildRequiresCookedData for UBT callers)</param>
        </member>
        <member name="T:UnrealBuildTool.PluginDescriptorVersion">
            <summary>
            The version format for .uplugin files. This rarely changes now; plugin descriptors should maintain backwards compatibility automatically.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptorVersion.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptorVersion.Initial">
            <summary>
            Initial version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptorVersion.NameHash">
            <summary>
            Adding SampleNameHash
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptorVersion.ProjectPluginUnification">
            <summary>
            Unifying plugin/project files (since abandoned, but backwards compatibility maintained)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptorVersion.LatestPlusOne">
            <summary>
            This needs to be the last line, so we can calculate the value of Latest below
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptorVersion.Latest">
            <summary>
            The latest plugin descriptor version
            </summary>
        </member>
        <member name="T:UnrealBuildTool.PluginDescriptor">
            <summary>
            In-memory representation of a .uplugin file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.FileVersion">
            <summary>
            Descriptor version number
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.Version">
            <summary>
            Version number for the plugin.  The version number must increase with every version of the plugin, so that the system 
            can determine whether one version of a plugin is newer than another, or to enforce other requirements.  This version
            number is not displayed in front-facing UI.  Use the VersionName for that.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.VersionName">
            <summary>
            Name of the version for this plugin.  This is the front-facing part of the version number.  It doesn't need to match
            the version number numerically, but should be updated when the version number is increased accordingly.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.FriendlyName">
            <summary>
            Friendly name of the plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.Description">
            <summary>
            Description of the plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.Category">
            <summary>
            The name of the category this plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.CreatedBy">
            <summary>
            The company or individual who created this plugin.  This is an optional field that may be displayed in the user interface.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.CreatedByURL">
            <summary>
            Hyperlink URL string for the company or individual who created this plugin.  This is optional.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.DocsURL">
            <summary>
            Documentation URL string.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.MarketplaceURL">
            <summary>
            Marketplace URL for this plugin. This URL will be embedded into projects that enable this plugin, so we can redirect to the marketplace if a user doesn't have it installed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.SupportURL">
            <summary>
            Support URL/email for this plugin.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.EngineVersion">
            <summary>
            Sets the version of the engine that this plugin is compatible with.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.SupportedTargetPlatforms">
            <summary>
            List of platforms supported by this plugin. This list will be copied to any plugin reference from a project file, to allow filtering entire plugins from staged builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.Modules">
            <summary>
            List of all modules associated with this plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.LocalizationTargets">
            <summary>
            List of all localization targets associated with this plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.bEnabledByDefault">
            <summary>
            Whether this plugin should be enabled by default for all projects
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.bCanContainContent">
            <summary>
            Can this plugin contain content?
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.bIsBetaVersion">
            <summary>
            Marks the plugin as beta in the UI
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.bCanBeUsedWithUnrealHeaderTool">
            <summary>
            Whether this plugin can be used by UnrealHeaderTool
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.bInstalled">
            <summary>
            Set for plugins which are installed
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.bRequiresBuildPlatform">
            <summary>
            For plugins that are under a platform folder (eg. /PS4/), determines whether compiling the plugin requires the build platform and/or SDK to be available
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.PreBuildSteps">
            <summary>
            Set of pre-build steps to execute, keyed by host platform name.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.PostBuildSteps">
            <summary>
            Set of post-build steps to execute, keyed by host platform name.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginDescriptor.Plugins">
            <summary>
            Additional plugins that this plugin depends on
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PluginDescriptor.#ctor">
            <summary>
            Private constructor. This object should not be created directly; read it from disk using FromFile() instead.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PluginDescriptor.#ctor(Tools.DotNETCommon.JsonObject)">
            <summary>
            Reads a plugin descriptor from a json object
            </summary>
            <param name="RawObject">The object to read from</param>
            <returns>New plugin descriptor</returns>
        </member>
        <member name="M:UnrealBuildTool.PluginDescriptor.FromFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Creates a plugin descriptor from a file on disk
            </summary>
            <param name="FileName">The filename to read</param>
            <returns>New plugin descriptor</returns>
        </member>
        <member name="M:UnrealBuildTool.PluginDescriptor.Save(System.String)">
            <summary>
            Saves the descriptor to disk
            </summary>
            <param name="FileName">The filename to write to</param>
        </member>
        <member name="M:UnrealBuildTool.PluginDescriptor.Write(Tools.DotNETCommon.JsonWriter)">
            <summary>
            Writes the plugin descriptor to an existing Json writer
            </summary>
            <param name="Writer">The writer to receive plugin data</param>
        </member>
        <member name="M:UnrealBuildTool.PluginDescriptor.SupportsTargetPlatform(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Determines if this reference enables the plugin for a given platform
            </summary>
            <param name="Platform">The platform to check</param>
            <returns>True if the plugin should be enabled</returns>
        </member>
        <member name="T:UnrealBuildTool.ProjectDescriptorVersion">
            <summary>
            The version format for .uproject files. This rarely changes now; project descriptors should maintain backwards compatibility automatically.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptorVersion.Invalid">
            <summary>
            Invalid
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptorVersion.Initial">
            <summary>
            Initial version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptorVersion.NameHash">
            <summary>
            Adding SampleNameHash
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptorVersion.ProjectPluginUnification">
            <summary>
            Unifying plugin/project files (since abandoned, but backwards compatibility maintained)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptorVersion.LatestPlusOne">
            <summary>
            This needs to be the last line, so we can calculate the value of Latest below
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptorVersion.Latest">
            <summary>
            The latest plugin descriptor version
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ProjectDescriptor">
            <summary>
            In-memory representation of a .uproject file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.FileVersion">
            <summary>
            Descriptor version number.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.EngineAssociation">
            <summary>
            The engine to open this project with.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.Category">
            <summary>
            Category to show under the project browser
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.Description">
            <summary>
            Description to show in the project browser
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.Modules">
            <summary>
            List of all modules associated with this project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.Plugins">
            <summary>
            List of plugins for this project (may be enabled/disabled)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.AdditionalPluginDirectories">
            <summary>
            List of additional plugin directories to scan for available plugins
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.TargetPlatforms">
            <summary>
            Array of platforms that this project is targeting
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.EpicSampleNameHash">
            <summary>
            A hash that is used to determine if the project was forked from a sample
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.PreBuildSteps">
            <summary>
            Steps to execute before building targets in this project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.PostBuildSteps">
            <summary>
            Steps to execute before building targets in this project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ProjectDescriptor.IsEnterpriseProject">
            <summary>
            Indicates if this project is an Enterprise project
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectDescriptor.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ProjectDescriptor.#ctor(Tools.DotNETCommon.JsonObject)">
            <summary>
            Constructor
            </summary>
            <param name="RawObject">Raw JSON object to parse</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectDescriptor.FromFile(Tools.DotNETCommon.FileReference)">
            <summary>
            Creates a plugin descriptor from a file on disk
            </summary>
            <param name="FileName">The filename to read</param>
            <returns>New plugin descriptor</returns>
        </member>
        <member name="M:UnrealBuildTool.ProjectDescriptor.Save(System.String)">
            <summary>
            Saves the descriptor to disk
            </summary>
            <param name="FileName">The filename to write to</param>
        </member>
        <member name="M:UnrealBuildTool.ProjectDescriptor.Write(Tools.DotNETCommon.JsonWriter)">
            <summary>
            Writes the plugin descriptor to an existing Json writer
            </summary>
            <param name="Writer">The writer to receive plugin data</param>
        </member>
        <member name="F:UnrealBuildTool.SNDBS.ProcessorCountMultiplier">
            <summary>
            Processor count multiplier for local execution. Can be below 1 to reserve CPU for other tasks.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SNDBS.MaxProcessorCount">
            <summary>
            Maximum processor count for local execution. 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SNDBS.MaxActionsToExecuteInParallel">
            <summary>
            The number of actions to execute in parallel is trying to keep the CPU busy enough in presence of I/O stalls.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.SNDBS.JobNumber">
            <summary>
            Unique id for new jobs
            </summary>
        </member>
        <member name="M:UnrealBuildTool.SNDBS.ActionDebugOutput(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Used when debugging Actions outputs all action return values to debug out
            </summary>
            <param name="sender"> Sending object</param>
            <param name="e">  Event arguments (In this case, the line of string output)</param>
        </member>
        <member name="T:UnrealBuildTool.CppIncludePaths">
            <summary>
            For C++ source file items, this structure is used to cache data that will be used for include dependency scanning
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppIncludePaths.UserIncludePaths">
            <summary>
            Ordered list of include paths for the module
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppIncludePaths.SystemIncludePaths">
            <summary>
            The include paths where changes to contained files won't cause dependent C++ source files to
            be recompiled, unless BuildConfiguration.bCheckSystemHeadersForModification==true.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppIncludePaths.bCheckSystemHeadersForModification">
            <summary>
            Whether headers in system paths should be checked for modification when determining outdated actions.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CppIncludePaths.IncludeFileSearchDictionary">
            <summary>
            Contains a mapping from filename to the full path of the header in this environment.  This is used to optimized include path lookups at runtime for any given single module.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CppIncludePaths.#ctor">
            <summary>
            Construct an empty set of include paths
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CppIncludePaths.#ctor(UnrealBuildTool.CppIncludePaths)">
            <summary>
            Copy constructor
            </summary>
            <param name="Other">Duplicate another instance's settings</param>
        </member>
        <member name="M:UnrealBuildTool.CppIncludePaths.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialize the include paths from the given context
            </summary>
            <param name="Info">Serialization info</param>
            <param name="Context">Serialization context</param>
        </member>
        <member name="M:UnrealBuildTool.CppIncludePaths.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize this instance
            </summary>
            <param name="Info">Serialization info</param>
            <param name="Context">Serialization context</param>
        </member>
        <member name="M:UnrealBuildTool.CppIncludePaths.GetPathsToSearch(Tools.DotNETCommon.FileReference)">
            <summary>
            Given a C++ source file, returns a list of include paths we should search to resolve #includes for this path
            </summary>
            <param name="SourceFile">C++ source file we're going to check #includes for.</param>
            <returns>Ordered list of paths to search</returns>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.ProjectFile">
            <summary>
            The project that we're caching headers for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.DependencyCacheFile">
            <summary>
            Path to the dependency cache for this target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.IncludeDependencyCache">
            <summary>
            Contains a cache of include dependencies (direct and indirect), one for each target we're building.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.FlatCPPIncludeDependencyCache">
            <summary>
            Contains a cache of include dependencies (direct and indirect), one for each target we're building.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.TotalFindIncludedFileCalls">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.IncludePathSearchAttempts">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.ExhaustiveIncludedFilesMap">
            <summary>
            A cache of the list of other files that are directly or indirectly included by a C++ file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.OnlyCachedIncludedFilesMap">
            <summary>
            A cache of all files included by a C++ file, but only has files that we knew about from a previous session, loaded from a cache at startup
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.bUseUBTMakefiles">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.bUseFlatCPPIncludeDependencyCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.bUseIncludeDependencyResolveCache">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.bTestIncludeDependencyResolveCache">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CPPHeaders.FindIncludedFile(Tools.DotNETCommon.FileReference,System.String,UnrealBuildTool.CppIncludePaths)">
            <summary>
            Finds the header file that is referred to by a partial include filename.
            </summary>
            <param name="FromFile">The file containing the include directory</param>
            <param name="RelativeIncludePath">path relative to the project</param>
            <param name="IncludePaths">Include paths to search</param>
        </member>
        <member name="M:UnrealBuildTool.CPPHeaders.FindAndCacheIncludedFiles(UnrealBuildTool.FileItem,UnrealBuildTool.CppIncludePaths,System.Boolean)">
            <summary>
            Add all the files included by a source file to a set, using a cache.
            </summary>
            <param name="SourceFile">The file to check.</param>
            <param name="IncludePaths">Include paths to search.</param>
            <param name="bOnlyCachedDependencies">Whether to just return cached dependencies, or update the cache with new results.</param>
        </member>
        <member name="M:UnrealBuildTool.CPPHeaders.FindAndCacheIncludedFilesInner(UnrealBuildTool.FileItem,System.Collections.Generic.HashSet{UnrealBuildTool.FileItem},UnrealBuildTool.CppIncludePaths,System.Boolean,System.Collections.Generic.HashSet{UnrealBuildTool.FileItem})">
            <summary>
            Add all the files included by a source file to a set, using a cache.
            </summary>
            <param name="SourceFile">The file to check.</param>
            <param name="IncludedFiles">Set of included files to add to</param>
            <param name="IncludePaths">Include paths to search.</param>
            <param name="bOnlyCachedDependencies">Whether to just return cached dependencies, or update the cache with new results.</param>
            <param name="VisitedFiles">Set of files that have already been visited. Used to prevent infinite loops between circularly dependent headers.</param>
        </member>
        <member name="M:UnrealBuildTool.CPPHeaders.GetDirectlyIncludedFiles(UnrealBuildTool.FileItem,UnrealBuildTool.CppIncludePaths,System.Boolean)">
            <summary>
            Get a set of directly included files from the given source file, resolving their include paths to FileItem instances.
            </summary>
            <param name="SourceFile">The file to check.</param>
            <param name="IncludePaths">Include paths to search.</param>
            <param name="bOnlyCachedDependencies">Whether to just return cached dependencies, or update the cache with new results.</param>
            <returns>Set of files that are included</returns>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.CPPHeaderRegex">
            <summary>
            Regex that matches #include statements.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.CPPHeaders.UObjectRegex">
            <summary>
            Regex that matches C++ code with UObject declarations which we will need to generated code for.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CPPHeaders.GetDirectIncludeDependencies(UnrealBuildTool.FileItem,System.Boolean)">
            <summary>
            Finds the names of files directly included by the given C++ file, and also whether the file contains any UObjects
            </summary>
        </member>
        <member name="M:UnrealBuildTool.CPPHeaders.CollectHeaders(Tools.DotNETCommon.FileReference,UnrealBuildTool.FileItem,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Collects all header files included in a CPPFile
            </summary>
            <param name="ProjectFile"></param>
            <param name="CPPFile"></param>
            <param name="FileToRead"></param>
            <param name="FileContents"></param>
            <param name="InstalledFolder"></param>
            <param name="StartIndex"></param>
            <param name="EndIndex"></param>
        </member>
        <member name="F:UnrealBuildTool.DependencyInclude.IncludeName">
            <summary>
            These are direct include paths and cannot be resolved to an actual file on disk without using the proper list of include directories for this file's module 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyInclude.HasAttemptedResolve">
            <summary>
            Whether we've attempted to resolve this include (may be set even if IncludeResolvedNameIfSuccessful = null, in cases where it couldn't be found)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyInclude.IncludeResolvedNameIfSuccessful">
            <summary>
            This is the fully resolved name, and a bool for whether we've attempted the resolve but failed. We can't really store this globally, but we're going to see how well it works.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.DependencyInclude.#ctor(System.String)">
            <summary>
            Public ctor that initializes the include name (the resolved name won't be determined until later)
            </summary>
            <param name="InIncludeName"></param>
        </member>
        <member name="T:UnrealBuildTool.DependencyCache">
            <summary>
            Caches include dependency information to speed up preprocessing on subsequent runs.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyCache.FileVersion">
            <summary>
            The version number for binary serialization
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyCache.FileSignature">
            <summary>
            The file signature for binary serialization
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyCache.BackingFile">
            <summary>
            Path to store the cache data to.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyCache.CreationTimeUtc">
            <summary>
            The time the cache was created. Used to invalidate entries.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyCache.UpdateTimeUtc">
            <summary>
            The time the cache was last updated. Stored as the creation date when saved. Not serialized.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyCache.DependencyMap">
            <summary>
            Dependency lists, keyed on file's absolute path.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyCache.FileExistsInfo">
            <summary>
            A mapping of whether various files exist. Not serialized.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DependencyCache.bIsDirty">
            <summary>
            Whether the dependency cache is dirty and needs to be saved. Not serialized.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.Create(Tools.DotNETCommon.FileReference)">
            <summary>
            Creates and deserializes the dependency cache at the passed in location
            </summary>
            <param name="CacheFile">Name of the cache file to deserialize</param>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.Load(Tools.DotNETCommon.FileReference)">
            <summary>
            Loads the cache from the passed in file.
            </summary>
            <param name="CacheFile">File to deserialize from</param>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.Serialize(System.IO.BinaryWriter)">
            <summary>
            Serializes the dependency cache to a binary writer
            </summary>
            <param name="Writer">Writer to output to</param>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.Deserialize(System.IO.BinaryReader)">
            <summary>
            Deserialize the dependency cache from a binary reader
            </summary>
            <param name="Reader">Reader for the cache data</param>
            <returns>New dependency cache object</returns>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Constructor
            </summary>
            <param name="InBackingFile">File associated with this cache</param>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.Save">
            <summary>
            Saves the dependency cache to disk using the update time as the creation time.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.GetCachedDependencyInfo(UnrealBuildTool.FileItem)">
            <summary>
            Returns the direct dependencies of the specified FileItem if it exists in the cache and they are not stale.
            </summary>
            <param name="File">File  File to try to find dependencies in cache</param>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.SetDependencyInfo(UnrealBuildTool.FileItem,System.Collections.Generic.List{UnrealBuildTool.DependencyInclude})">
            <summary>
            Update cache with dependencies for the passed in file.
            </summary>
            <param name="File">  File to update dependencies for</param>
            <param name="Info">List of dependencies to cache for passed in file</param>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.CreateFileExistsInfo">
            <summary>
            Creates and pre-allocates a map for storing information about the physical presence of files on disk.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.ResetUnresolvedDependencies">
            <summary>
            Resets unresolved dependency include files so that the compile environment can attempt to re-resolve them.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.CacheResolvedIncludeFullPath(UnrealBuildTool.FileItem,System.Int32,Tools.DotNETCommon.FileReference,System.Boolean,System.Boolean)">
            <summary>
            Caches the fully resolved path of the include.
            TODO: This method should be more tightly coupled with the Resolve step itself so we don't have to reach into the cache externally
            using internal details like the list index.
            </summary>
            <param name="File">The file whose include is being resolved</param>
            <param name="DirectlyIncludedFileNameIndex">Index in the resolve list to quickly find the include in question in the existing cache.</param>
            <param name="DirectlyIncludedFileNameFullPath">Full path name of the resolve include.</param>
            <param name="bUseIncludeDependencyResolveCache"></param>
            <param name="bTestIncludeDependencyResolveCache"></param>
        </member>
        <member name="M:UnrealBuildTool.DependencyCache.GetDependencyCachePathForTarget(Tools.DotNETCommon.FileReference,UnrealBuildTool.UnrealTargetPlatform,System.String)">
            <summary>
            Gets the dependency cache path and filename for the specified target.
            </summary>
            <param name="ProjectFile">The project directory</param>
            <param name="Platform">The platform for the target being compiled</param>
            <param name="TargetName">Name of the target being compiled</param>
            <returns>Cache Path</returns>
        </member>
        <member name="T:UnrealBuildTool.DynamicCompilation">
            <summary>
            Methods for dynamically compiling C# source files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.DynamicCompilation.UBTExecutableFileInfo">
            File information for UnrealBuildTool.exe, cached at program start
        </member>
        <member name="M:UnrealBuildTool.DynamicCompilation.CompileAndLoadAssembly(Tools.DotNETCommon.FileReference,System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Boolean,System.Boolean)">
            <summary>
            Dynamically compiles an assembly for the specified source file and loads that assembly into the application's
            current domain.  If an assembly has already been compiled and is not out of date, then it will be loaded and
            no compilation is necessary.
            </summary>
            <param name="OutputAssemblyPath">Full path to the assembly to be created</param>
            <param name="SourceFileNames">List of source file name</param>
            <param name="ReferencedAssembies"></param>
            <param name="PreprocessorDefines"></param>
            <param name="DoNotCompile"></param>
            <param name="TreatWarningsAsErrors"></param>
            <returns>The assembly that was loaded</returns>
        </member>
        <member name="F:UnrealBuildTool.ECompilationResult.Succeeded">
            <summary>
            Compilation succeeded
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ECompilationResult.Canceled">
            <summary>
            Build was canceled, this is used on the engine side only
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ECompilationResult.UpToDate">
            <summary>
            All targets were up to date, used only with -canskiplink
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ECompilationResult.CrashOrAssert">
            <summary>
            The process has most likely crashed. This is what UE returns in case of an assert
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ECompilationResult.FailedDueToHeaderChange">
            <summary>
            Compilation failed because generated code changed which was not supported
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ECompilationResult.OtherCompilationError">
            <summary>
            Compilation failed due to compilation errors
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ECompilationResult.Unsupported">
            <summary>
            Compilation is not supported in the current build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ECompilationResult.Unknown">
            <summary>
            Unknown error
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UHTModuleType">
            <summary>
            Type of module. Mirrored in UHT as EBuildModuleType.
            This should be sorted by the order in which we expect modules to be built.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UHTModuleInfo">
            <summary>
            Information about a module that needs to be passed to UnrealHeaderTool for code generation
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.ModuleName">
            <summary>
            Module name
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.ModuleRulesFile">
            <summary>
            Path to the module rules file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.ModuleDirectory">
            <summary>
            Module base directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.ModuleType">
            <summary>
            Module type
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.PublicUObjectClassesHeaders">
            <summary>
            Public UObject headers found in the Classes directory (legacy)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.PublicUObjectHeaders">
            <summary>
            Public headers with UObjects
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.PrivateUObjectHeaders">
            <summary>
            Private headers with UObjects
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.PCH">
            <summary>
            Module PCH absolute path
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.GeneratedCPPFilenameBase">
            <summary>
            Base (i.e. extensionless) path+filename of the .gen files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UHTModuleInfo.GeneratedCodeVersion">
            <summary>
            Version of code generated by UHT
            </summary>
        </member>
        <member name="T:UnrealBuildTool.EGeneratedCodeVersion">
            <summary>
            This MUST be kept in sync with EGeneratedBodyVersion enum and 
            ToGeneratedBodyVersion function in UHT defined in GeneratedCodeVersion.h.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EGeneratedCodeVersion.None">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EGeneratedCodeVersion.V1">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EGeneratedCodeVersion.V2">
            <summary>
            
            </summary>
        </member>
        <member name="F:UnrealBuildTool.EGeneratedCodeVersion.VLatest">
            <summary>
            
            </summary>
        </member>
        <member name="T:UnrealBuildTool.ExternalExecution">
            <summary>
            This handles all running of the UnrealHeaderTool
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.CreateUHTModuleInfo(System.Collections.Generic.IEnumerable{Tools.DotNETCommon.FileReference},System.String,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.UHTModuleType,UnrealBuildTool.EGeneratedCodeVersion)">
            <summary>
            Generates a UHTModuleInfo for a particular named module under a directory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.StableTopologicalSort(System.Collections.Generic.List{UnrealBuildTool.UEBuildModuleCPP})">
            <summary>
            Returns a copy of Nodes sorted by dependency.  Independent or circularly-dependent nodes should
            remain in their same relative order within the original Nodes sequence.
            </summary>
            <param name="NodeList">The list of nodes to sort.</param>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.IsDependency(UnrealBuildTool.UEBuildModuleCPP,UnrealBuildTool.UEBuildModuleCPP,System.Collections.Generic.Dictionary{UnrealBuildTool.UEBuildModule,System.Collections.Generic.HashSet{UnrealBuildTool.UEBuildModule}})">
            <summary>
            Tests whether one module has a dependency on another
            </summary>
            <param name="FromModule">The module to test</param>
            <param name="ToModule">The module to look for a dependency</param>
            <param name="Cache">Cache mapping module to all its dependencies</param>
            <returns>True if ToModule is a dependency of FromModule, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.GetHeaderToolReceiptFile(UnrealBuildTool.BuildConfiguration)">
            <summary>
            Gets the path to the receipt for UHT
            </summary>
            <returns>Path to the UHT receipt</returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.GetHeaderToolPath(UnrealBuildTool.BuildConfiguration)">
            <summary>
            Gets UnrealHeaderTool.exe path. Does not care if UnrealheaderTool was build as a monolithic exe or not.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.GetHeaderToolTimestamp(UnrealBuildTool.BuildConfiguration,System.DateTime@)">
            <summary>
            Gets the latest write time of any of the UnrealHeaderTool binaries (including DLLs and Plugins) or DateTime.MaxValue if UnrealHeaderTool does not exist
            </summary>
            <returns>
            Latest timestamp of UHT binaries or DateTime.MaxValue if UnrealHeaderTool is out of date and needs to be rebuilt.
            </returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.CheckBinariesExist(UnrealBuildTool.TargetReceipt)">
            <summary>
            Checks if all the files in a receipt are present and that all the DLLs are at the same version
            </summary>
            <returns>
            True if all the files are valid.
            </returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.CheckDynamicLibaryVersionsMatch(UnrealBuildTool.TargetReceipt)">
            <summary>
            Checks if all the files in a receipt have the same version
            </summary>
            <returns>
            True if all the files are valid.
            </returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.GetTimestampFromBinaries(UnrealBuildTool.TargetReceipt)">
            <summary>
            Checks if all the files in a receipt are present and that all the DLLs are at the same version
            </summary>
            <returns>
            True if all the files are valid.
            </returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.GetCoreGeneratedTimestamp(System.String,System.String)">
            <summary>
            Gets the timestamp of CoreUObject.gen.cpp file.
            </summary>
            <returns>Last write time of CoreUObject.gen.cpp or DateTime.MaxValue if it doesn't exist.</returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.AreGeneratedCodeFilesOutOfDate(UnrealBuildTool.BuildConfiguration,System.Collections.Generic.List{UnrealBuildTool.UHTModuleInfo},System.DateTime,System.Boolean,UnrealBuildTool.EHotReload,System.Boolean,System.Boolean)">
            <summary>
            Checks the class header files and determines if generated UObject code files are out of date in comparison.
            </summary>
            <param name="BuildConfiguration">Build configuration</param>
            <param name="UObjectModules">Modules that we generate headers for</param>
            <param name="HeaderToolTimestamp">Timestamp for UHT</param>
            <param name="bUsePrecompiled">Whether to use precompiled engine modules</param>
            <param name="HotReload">The hot reload state</param>
            <param name="bIsGatheringBuild"></param>
            <param name="bIsAssemblingBuild"></param>
            <returns>True if the code files are out of date</returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.AreExternalDependenciesOutOfDate(Tools.DotNETCommon.FileReference)">
            <summary>
            Determines if any external dependencies for generated code is out of date
            </summary>
            <param name="ExternalDependenciesFile">Path to the external dependencies file</param>
            <returns>True if any external dependencies are out of date</returns>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.UpdateDirectoryTimestamps(System.Collections.Generic.List{UnrealBuildTool.UHTModuleInfo},System.Boolean)">
            <summary>
            Updates the intermediate include directory timestamps of all the passed in UObject modules
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.RunExternalDotNETExecutable(System.String,System.String)">
            <summary>
            Run an external exe (and capture the output), given the exe path and the commandline.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.RunExternalNativeExecutable(System.String,System.String)">
            <summary>
            Run an external native executable (and capture the output), given the executable path and the commandline.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.PrintProcessOutputAsync(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Simple function to pipe output asynchronously
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ExternalExecution.ExecuteHeaderToolIfNecessary(UnrealBuildTool.BuildConfiguration,UnrealBuildTool.UEBuildTarget,UnrealBuildTool.CppCompileEnvironment,System.Collections.Generic.List{UnrealBuildTool.UHTModuleInfo},Tools.DotNETCommon.FileReference,UnrealBuildTool.ECompilationResult@,UnrealBuildTool.EHotReload,System.Boolean,System.Boolean)">
            <summary>
            Builds and runs the header tool and touches the header directories.
            Performs any early outs if headers need no changes, given the UObject modules, tool path, game name, and configuration
            </summary>
        </member>
        <member name="T:UnrealBuildTool.FileItem">
            <summary>
            Represents a file on disk that is used as an input or output of a build action.
            FileItems are created by calling FileItem.GetItemByFileReference, which creates a single FileItem for each unique file path.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.ProducingAction">
            
             Preparation and Assembly (serialized)
             
            <summary>
            The action that produces the file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.Location">
            <summary>
            The file reference
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.bNeedsHotReloadNumbersDLLCleanUp">
            <summary>
            True if any DLLs produced by this
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.bIsRemoteFile">
            <summary>
            Whether or not this is a remote file, in which case we can't access it directly
            </summary>
        </member>
        <member name="P:UnrealBuildTool.FileItem.AbsolutePath">
            <summary>
            Accessor for the absolute path to the file
            </summary>
        </member>
        <member name="P:UnrealBuildTool.FileItem.CachedIncludePaths">
            <summary>
            For C++ file items, this stores cached information about the include paths needed in order to include header files from these C++ files.  This is part of UBT's dependency caching optimizations.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.PrecompiledHeaderIncludeFilename">
            
             Preparation only (not serialized)
             
            <summary>
            The PCH file that this file will use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.Info">
            
             Transients (not serialized)
            
            <summary>
            The information about the file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.IsDirectory">
            <summary>
            This is true if this item is actually a directory. Consideration for Mac application bundles. Note that Info will be null if true!
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.RelativeCost">
            <summary>
            Relative cost of action associated with producing this file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem._LastWriteTime">
            <summary>
            The last write time of the file.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem._bExists">
            <summary>
            Whether the file exists.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem._Length">
            <summary>
            Size of the file if it exists, otherwise -1
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.TotalFileItemCount">
            
             Statics
            
            <summary>
            Used for performance debugging
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.UniqueSourceFileMap">
            <summary>
            A case-insensitive dictionary that's used to map each unique file name to a single FileItem object.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.FileItem.DelayedRemoteLookupFiles">
            <summary>
            A list of remote file items that have been created but haven't needed the remote info yet, so we can gang up many into one request
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.ClearCaches">
            <summary>
            Clears the FileItem caches.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.ClearCachedIncludePaths">
            <summary>
            Clears the cached include paths on every file item
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.LookupOutstandingFiles">
            <summary>
            Resolve any outstanding remote file info lookups
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.GetItemByPath(System.String)">
            <returns>The FileItem that represents the given file path.</returns>
        </member>
        <member name="M:UnrealBuildTool.FileItem.GetItemByFileReference(Tools.DotNETCommon.FileReference)">
            <returns>The FileItem that represents the given a full file path.</returns>
        </member>
        <member name="M:UnrealBuildTool.FileItem.GetRemoteItemByPath(System.String,UnrealBuildTool.UnrealTargetPlatform)">
            <returns>The remote FileItem that represents the given file path.</returns>
        </member>
        <member name="M:UnrealBuildTool.FileItem.GetExistingItemByPath(System.String)">
            <summary>
            If the given file path identifies a file that already exists, returns the FileItem that represents it.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.GetExistingItemByFileReference(Tools.DotNETCommon.FileReference)">
            <summary>
            If the given file path identifies a file that already exists, returns the FileItem that represents it.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.GetEncodingForString(System.String)">
            <summary>
            Determines the appropriate encoding for a string: either ASCII or UTF-8.
            </summary>
            <param name="Str">The string to test.</param>
            <returns>Either System.Text.Encoding.ASCII or System.Text.Encoding.UTF8, depending on whether or not the string contains non-ASCII characters.</returns>
        </member>
        <member name="M:UnrealBuildTool.FileItem.CreateIntermediateTextFile(Tools.DotNETCommon.FileReference,System.String)">
            <summary>
            Creates a text file with the given contents.  If the contents of the text file aren't changed, it won't write the new contents to
            the file to avoid causing an action to be considered outdated.
            </summary>
            <param name="AbsolutePath">Path to the intermediate file to create</param>
            <param name="Contents">Contents of the new file</param>
            <returns>File item for the newly created file</returns>
        </member>
        <member name="M:UnrealBuildTool.FileItem.CreateIntermediateTextFile(Tools.DotNETCommon.FileReference,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a text file with the given contents.  If the contents of the text file aren't changed, it won't write the new contents to
            the file to avoid causing an action to be considered outdated.
            </summary>
            <param name="AbsolutePath">Path to the intermediate file to create</param>
            <param name="Contents">Contents of the new file</param>
            <returns>File item for the newly created file</returns>
        </member>
        <member name="M:UnrealBuildTool.FileItem.Delete">
            <summary>
            Deletes the file.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.#ctor(Tools.DotNETCommon.FileReference)">
            <summary>
            Initialization constructor.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable: Constructor called when this object is deserialized
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable: Called when serialized to report additional properties that should be saved
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.ResetFileInfo">
            <summary>
            (Re-)set file information for this FileItem
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.ResetInfos">
            <summary>
            Reset file information on all cached FileItems.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.FileItem.#ctor(Tools.DotNETCommon.FileReference,System.Boolean,UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Initialization constructor for optionally remote files.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.JunkDeleter.DeleteJunk">
            <summary>
            Loads JunkManifest.txt file and removes all junk files/folders defined in it.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.JunkDeleter.LoadJunkManifest">
            <summary>
            Loads JunkManifest.txt file.
            </summary>
            <returns>Junk manifest file contents.</returns>
        </member>
        <member name="M:UnrealBuildTool.JunkDeleter.DeleteAllJunk(System.Collections.Generic.List{System.String})">
            <summary>
            Goes through each entry from the junk manifest and deletes it.
            </summary>
            <param name="JunkManifest">JunkManifest.txt entries.</param>
        </member>
        <member name="M:UnrealBuildTool.JunkDeleter.DeleteDirectory(System.String)">
            <summary>
            Deletes a directory recursively gracefully handling all exceptions.
            </summary>
            <param name="DirectoryPath">Path.</param>
        </member>
        <member name="M:UnrealBuildTool.JunkDeleter.DeleteFile(System.String)">
            <summary>
            Deletes a file gracefully handling all exceptions.
            </summary>
            <param name="Filename">Filename.</param>
        </member>
        <member name="T:UnrealBuildTool.LinkEnvironment">
            <summary>
            Encapsulates the environment that is used to link object files.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.Platform">
            <summary>
            The platform to be compiled/linked for.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.Configuration">
            <summary>
            The configuration to be compiled/linked for.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.Architecture">
            <summary>
            The architecture that is being compiled/linked (empty string by default)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.BundleDirectory">
            <summary>
            On Mac, indicates the path to the target's application bundle
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.OutputDirectory">
            <summary>
            The directory to put the non-executable files in (PDBs, import library, etc)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.IntermediateDirectory">
            <summary>
            Intermediate file directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.LocalShadowDirectory">
            <summary>
            The directory to shadow source files in for syncing to remote compile servers
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.OutputFilePaths">
            <summary>
            The file path for the executable file that is output by the linker.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.LinkEnvironment.OutputFilePath">
            <summary>
            Returns the OutputFilePath is there is only one entry in OutputFilePaths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.LibraryPaths">
            <summary>
            A list of the paths used to find libraries.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.ExcludedLibraries">
            <summary>
            A list of libraries to exclude from linking.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.AdditionalLibraries">
            <summary>
            A list of additional libraries to link in.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.RuntimeDependencies">
            <summary>
            A list of runtime dependencies for the resulting binary.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.AdditionalFrameworks">
            <summary>
            A list of additional frameworks to link in.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.AdditionalShadowFiles">
            <summary>
            For builds that execute on a remote machine (e.g. iPhone), this list contains additional files that
            need to be copied over in order for the app to link successfully.  Source/header files and PCHs are
            automatically copied.  Usually this is simply a list of precompiled third party library dependencies.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.Frameworks">
            <summary>
            The iOS/Mac frameworks to link in
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.AdditionalBundleResources">
            <summary>
            iOS/Mac resources that should be copied to the app bundle
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.DelayLoadDLLs">
            <summary>
            A list of the dynamically linked libraries that shouldn't be loaded until they are first called
            into.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.AdditionalArguments">
            <summary>
            Additional arguments to pass to the linker.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bCreateDebugInfo">
            <summary>
            True if debug info should be created.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bDisableSymbolCache">
            <summary>
            True if debug symbols that are cached for some platforms should not be created.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bIsBuildingLibrary">
            <summary>
            True if we're compiling .cpp files that will go into a library (.lib file)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bIsBuildingDLL">
            <summary>
            True if we're compiling a DLL
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bIsBuildingConsoleApplication">
            <summary>
            True if this is a console application that's being build
            </summary>
        </member>
        <member name="P:UnrealBuildTool.LinkEnvironment.bBuildAdditionalConsoleApplication">
            <summary>
            This setting is replaced by UEBuildBinaryConfiguration.bBuildAdditionalConsoleApp.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.WindowsEntryPointOverride">
            <summary>
            If set, overrides the program entry function on Windows platform.  This is used by the base UE4
            program so we can link in either command-line mode or windowed mode without having to recompile the Launch module.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bIsCrossReferenced">
            <summary>
            True if we're building a EXE/DLL target with an import library, and that library is needed by a dependency that
            we're directly dependent on.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bHasExports">
            <summary>
            True if the application we're linking has any exports, and we should be expecting the linker to
            generate a .lib and/or .exp file along with the target output file
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bIsBuildingDotNetAssembly">
            <summary>
            True if we're building a .NET assembly (e.g. C# project)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.DefaultStackSize">
            <summary>
            The default stack memory size allocation
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.DefaultStackSizeCommit">
            <summary>
            The amount of the default stack size to commit initially. Set to 0 to allow the OS to decide.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bOptimizeForSize">
            <summary>
            Whether to optimize for minimal code size
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bOmitFramePointers">
            <summary>
            Whether to omit frame pointers or not. Disabling is useful for e.g. memory profiling on the PC
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bSupportEditAndContinue">
            <summary>
            Whether to support edit and continue.  Only works on Microsoft compilers in 32-bit compiles.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bUseIncrementalLinking">
            <summary>
            Whether to use incremental linking or not.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bAllowLTCG">
            <summary>
            Whether to allow the use of LTCG (link time code generation) 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bPGOProfile">
            <summary>
            Whether to enable Profile Guided Optimization (PGO) instrumentation in this build.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bPGOOptimize">
            <summary>
            Whether to optimize this build with Profile Guided Optimization (PGO).
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.PGODirectory">
            <summary>
            Platform specific directory where PGO profiling data is stored.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.PGOFilenamePrefix">
            <summary>
            Platform specific filename where PGO profiling data is saved.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bCreateMapFile">
            <summary>
            Whether to request the linker create a map file as part of the build
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bAllowASLR">
            <summary>
            Whether to allow the use of ASLR (address space layout randomization) if supported.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bUsePDBFiles">
            <summary>
            Whether PDB files should be used for Visual C++ builds.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bUseFastPDBLinking">
            <summary>
            Whether to use the :FASTLINK option when building with /DEBUG to create local PDBs
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bPrintTimingInfo">
            <summary>
            Whether to log detailed timing information
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.BundleVersion">
            <summary>
            Bundle version for Mac apps
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.bShouldCompileMonolithic">
            <summary>
            Whether we're linking in monolithic mode. Determines if linking should produce import library file. Relevant only for VC++, clang stores imports in shared library.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.InputFiles">
            <summary>
            A list of the object files to be linked.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.InputLibraries">
            <summary>
            A list of dependent static or import libraries that need to be linked.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.DefaultResourceFiles">
            <summary>
            The default resource file to link in to every binary if a custom one is not provided
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.CommonResourceFiles">
            <summary>
            Resource files which should be compiled into every binary
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LinkEnvironment.ModuleDefinitionFile">
            <summary>
            Provides a Module Definition File (.def) to the linker to describe various attributes of a DLL.
            Necessary when exporting functions by ordinal values instead of by name.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinkEnvironment.#ctor(UnrealBuildTool.CppPlatform,UnrealBuildTool.CppConfiguration,System.String)">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LinkEnvironment.#ctor(UnrealBuildTool.LinkEnvironment)">
            <summary>
            Copy constructor.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionThread.ExitCode">
            <summary>
            Cache the exit code from the command so that the executor can report errors
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionThread.bComplete">
            <summary>
            Set to true only when the local or RPC action is complete
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionThread.Action">
            <summary>
            Cache the action that this thread is managing
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionThread.JobNumber">
            <summary>
            For reporting status to the user
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ActionThread.EnvironmentVariableRegex">
            <summary>
            Regex that matches environment variables in $(Variable) format.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionThread.ExpandEnvironmentVariables(System.String)">
            <summary>
            Replaces the environment variables references in a string with their values.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionThread.#ctor(UnrealBuildTool.Action,System.Int32,System.Int32)">
            <summary>
            Constructor, takes the action to process
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionThread.ActionDebugOutput(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Used when debuging Actions outputs all action return values to debug out
            </summary>
            <param name="sender"> Sending object</param>
            <param name="e">  Event arguments (In this case, the line of string output)</param>
        </member>
        <member name="M:UnrealBuildTool.ActionThread.ThreadFunc">
            <summary>
            The actual function to run in a thread. This is potentially long and blocking
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ActionThread.Run">
            <summary>
            Starts a thread and runs the action in that thread
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalExecutor.ProcessorCountMultiplier">
            <summary>
            Processor count multiplier for local execution. Can be below 1 to reserve CPU for other tasks.
            When using the local executor (not XGE), run a single action on each CPU core.  Note that you can set this to a larger value
            to get slightly faster build times in many cases, but your computer's responsiveness during compiling may be much worse.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.LocalExecutor.MaxProcessorCount">
            <summary>
            Maximum processor count for local execution. 
            </summary>
        </member>
        <member name="M:UnrealBuildTool.LocalExecutor.GetMaxActionsToExecuteInParallel">
            <summary>
            Determines the maximum number of actions to execute in parallel, taking into account the resources available on this machine.
            </summary>
            <returns>Max number of actions to execute in parallel</returns>
        </member>
        <member name="M:UnrealBuildTool.LocalExecutor.ExecuteActions(System.Collections.Generic.List{UnrealBuildTool.Action},System.Boolean)">
            <summary>
            Executes the specified actions locally.
            </summary>
            <returns>True if all the tasks successfully executed, or false if any of them failed.</returns>
        </member>
        <member name="T:UnrealBuildTool.PluginLoadedFrom">
            <summary>
            Where a plugin was loaded from
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginLoadedFrom.Engine">
            <summary>
            Plugin is built-in to the engine
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginLoadedFrom.Project">
            <summary>
            Project-specific plugin, stored within a game project directory
            </summary>
        </member>
        <member name="T:UnrealBuildTool.PluginType">
            <summary>
            Where a plugin was loaded from
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginType.Engine">
            <summary>
            Plugin is built-in to the engine
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginType.Enterprise">
            <summary>
            Enterprise plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginType.Project">
            <summary>
            Project-specific plugin, stored within a game project directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginType.External">
            <summary>
            Plugin found in an external directory (found in an AdditionalPluginDirectory listed in the project file, or referenced on the command line)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginType.Mod">
            <summary>
            Project-specific mod plugin
            </summary>
        </member>
        <member name="T:UnrealBuildTool.PluginInfo">
            <summary>
            Information about a single plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginInfo.Name">
            <summary>
            Plugin name
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginInfo.File">
            <summary>
            Path to the plugin
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginInfo.Directory">
            <summary>
            Path to the plugin's root directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginInfo.Descriptor">
            <summary>
            The plugin descriptor
            </summary>
        </member>
        <member name="F:UnrealBuildTool.PluginInfo.Type">
            <summary>
            The type of this plugin
            </summary>
        </member>
        <member name="M:UnrealBuildTool.PluginInfo.#ctor(Tools.DotNETCommon.FileReference,UnrealBuildTool.PluginType)">
            <summary>
            Constructs a PluginInfo object
            </summary>
            <param name="InFile">Path to the plugin descriptor</param>
            <param name="InType">The type of this plugin</param>
        </member>
        <member name="P:UnrealBuildTool.PluginInfo.EnabledByDefault">
            <summary>
            Determines whether the plugin should be enabled by default
            </summary>
        </member>
        <member name="P:UnrealBuildTool.PluginInfo.LoadedFrom">
            <summary>
            Determines where the plugin was loaded from
            </summary>
        </member>
        <member name="T:UnrealBuildTool.Plugins">
            <summary>
            Class for enumerating plugin metadata
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Plugins.PluginInfoCache">
            <summary>
            Cache of plugins under each directory
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Plugins.PluginFileCache">
            <summary>
            Cache of plugin filenames under each directory
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Plugins.FilterPlugins(System.Collections.Generic.IEnumerable{UnrealBuildTool.PluginInfo})">
            <summary>
            Filters the list of plugins to ensure that any game plugins override engine plugins with the same name, and otherwise that no two
            plugins with the same name exist. 
            </summary>
            <param name="Plugins">List of plugins to filter</param>
            <returns>Filtered list of plugins in the original order</returns>
        </member>
        <member name="M:UnrealBuildTool.Plugins.ReadAvailablePlugins(Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.FileReference,System.String[])">
            <summary>
            Read all the plugins available to a given project
            </summary>
            <param name="EngineDirectoryName">Path to the engine directory</param>
            <param name="ProjectFileName">Path to the project file (or null)</param>
            <param name="AdditionalDirectories">List of additional directories to scan for available plugins</param>
            <returns>Sequence of PluginInfo objects, one for each discovered plugin</returns>
        </member>
        <member name="M:UnrealBuildTool.Plugins.EnumeratePlugins(Tools.DotNETCommon.FileReference)">
            <summary>
            Enumerates all the plugin files available to the given project
            </summary>
            <param name="ProjectFile">Path to the project file</param>
            <returns>List of project files</returns>
        </member>
        <member name="M:UnrealBuildTool.Plugins.ReadEnginePlugins(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Read all the plugin descriptors under the given engine directory
            </summary>
            <param name="EngineDirectory">The parent directory to look in.</param>
            <returns>Sequence of the found PluginInfo object.</returns>
        </member>
        <member name="M:UnrealBuildTool.Plugins.ReadEnterprisePlugins(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Read all the plugin descriptors under the given enterprise directory
            </summary>
            <param name="EnterpriseDirectory">The parent directory to look in.</param>
            <returns>Sequence of the found PluginInfo object.</returns>
        </member>
        <member name="M:UnrealBuildTool.Plugins.ReadProjectPlugins(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Read all the plugin descriptors under the given project directory
            </summary>
            <param name="ProjectDirectory">The parent directory to look in.</param>
            <returns>Sequence of the found PluginInfo object.</returns>
        </member>
        <member name="M:UnrealBuildTool.Plugins.ReadAdditionalPlugins(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Read all of the plugins found in the project specified additional plugin directories
            </summary>
            <param name="AdditionalDirectory">The list of additional directories to scan</param>
            <returns>List of the found PluginInfo objects</returns>
        </member>
        <member name="M:UnrealBuildTool.Plugins.ReadPluginsFromDirectory(Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.PluginType)">
            <summary>
            Read all the plugin descriptors under the given directory
            </summary>
            <param name="ParentDirectory">The parent directory to look in.</param>
            <param name="Type">The plugin type</param>
            <returns>Sequence of the found PluginInfo object.</returns>
        </member>
        <member name="M:UnrealBuildTool.Plugins.EnumeratePlugins(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Find paths to all the plugins under a given parent directory (recursively)
            </summary>
            <param name="ParentDirectory">Parent directory to look in. Plugins will be found in any *subfolders* of this directory.</param>
        </member>
        <member name="M:UnrealBuildTool.Plugins.EnumeratePluginsInternal(Tools.DotNETCommon.DirectoryReference,System.Collections.Generic.List{Tools.DotNETCommon.FileReference})">
            <summary>
            Find paths to all the plugins under a given parent directory (recursively)
            </summary>
            <param name="ParentDirectory">Parent directory to look in. Plugins will be found in any *subfolders* of this directory.</param>
            <param name="FileNames">List of filenames. Will have all the discovered .uplugin files appended to it.</param>
        </member>
        <member name="M:UnrealBuildTool.Plugins.IsPluginEnabledForProject(UnrealBuildTool.PluginInfo,UnrealBuildTool.ProjectDescriptor,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.TargetType)">
            <summary>
            Determine if a plugin is enabled for a given project
            </summary>
            <param name="Project">The project to check</param>
            <param name="Plugin">Information about the plugin</param>
            <param name="Platform">The target platform</param>
            <param name="TargetConfiguration">The target configuration</param>
            <param name="Target"></param>
            <returns>True if the plugin should be enabled for this project</returns>
        </member>
        <member name="F:UnrealBuildTool.RPCUtilHelper.MacName">
            <summary>
            The Mac we are compiling on
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RPCUtilHelper.CommandThreadSockets">
            <summary>
            A socket per command thread
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RPCUtilHelper.TimeDifferenceFromRemote">
            <summary>
            Time difference between remote and local idea's of UTC time
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RPCUtilHelper.MaxRemoteCommandsAllowed">
            <summary>
            The number of commands the remote side should be able to run at once
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RPCUtilHelper.OnThreadComplete">
            <summary>
            Handle a thread ending
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RPCUtilHelper.RPCActionHandler(UnrealBuildTool.Action,System.Int32@,System.String@)">
            <summary>
            This function should be used as the ActionHandler delegate method for Actions that
            need to run over RPCUtility. It will block until the remote command completes
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RPCUtilHelper.GetRemoteFileInfo(System.String,System.DateTime@,System.Int64@)">
            <returns>the modification time on the remote machine, accounting for rough difference in time between the two machines</returns>
        </member>
        <member name="T:UnrealBuildTool.RulesCompiler">
            <summary>
            Class which compiles (and caches) rules assemblies for different folders.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.RulesCompiler.RulesFileType">
            <summary>
            Enum for types of rules files. Should match extensions in RulesFileExtensions.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesCompiler.RulesFileType.Module">
            <summary>
            .build.cs files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesCompiler.RulesFileType.Target">
            <summary>
            .target.cs files
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesCompiler.RulesFileType.AutomationModule">
            <summary>
            .automation.csproj files
            </summary>
        </member>
        <member name="T:UnrealBuildTool.RulesCompiler.RulesFileCache">
            <summary>
            Cached list of rules files in each directory of each type
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesCompiler.RootFolderToRulesFileCache">
            Map of root folders to a cached list of all UBT-related source files in that folder or any of its sub-folders.
            We cache these file names so we can avoid searching for them later on.
        </member>
        <member name="F:UnrealBuildTool.RulesCompiler.FrameworkAssemblyExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.FindAllRulesSourceFiles(UnrealBuildTool.RulesCompiler.RulesFileType,System.Collections.Generic.List{Tools.DotNETCommon.DirectoryReference},System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.List{Tools.DotNETCommon.DirectoryReference},System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="RulesFileType"></param>
            <param name="GameFolders"></param>
            <param name="ForeignPlugins"></param>
            <param name="AdditionalSearchPaths"></param>
            <param name="bIncludeEngine"></param>
            <param name="bIncludeEnterprise"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.InvalidateRulesFileCache(System.String)">
            <summary>
            Invalidate the cache for the givcen directory
            </summary>
            <param name="DirectoryPath">Directory to invalidate</param>
        </member>
        <member name="F:UnrealBuildTool.RulesCompiler.EngineRulesAssembly">
            <summary>
            The cached rules assembly for engine modules and targets.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesCompiler.EnterpriseRulesAssembly">
            <summary>
            The cached rules assembly for enterprise modules and targets.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RulesCompiler.LoadedAssemblyMap">
            Map of assembly names we've already compiled and loaded to their Assembly and list of game folders.  This is used to prevent
            trying to recompile the same assembly when ping-ponging between different types of targets
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.CreateEngineRulesAssembly">
            <summary>
            Creates the engine rules assembly
            </summary>
            <returns>New rules assembly</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.CreateEnterpriseRulesAssembly">
            <summary>
            Creates the enterprise rules assembly
            </summary>
            <returns>New rules assembly. Returns null if the enterprise directory is unavailable.</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.CreateEngineOrEnterpriseRulesAssembly(Tools.DotNETCommon.DirectoryReference,System.String,System.Collections.Generic.IReadOnlyList{UnrealBuildTool.PluginInfo},System.Boolean,UnrealBuildTool.RulesAssembly)">
            <summary>
            Creates a rules assembly
            </summary>
            <param name="RootDirectory">The root directory to create rules for</param>
            <param name="AssemblyPrefix">A prefix for the assembly file name</param>
            <param name="Plugins">List of plugins to include in this assembly</param>
            <param name="bInstalled">Whether the assembly should be marked as installed</param>
            <param name="Parent">The parent rules assembly</param>
            <returns>New rules assembly</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.CreateProjectRulesAssembly(Tools.DotNETCommon.FileReference)">
            <summary>
            Creates a rules assembly with the given parameters.
            </summary>
            <param name="ProjectFileName">The project file to create rules for. Null for the engine.</param>
            <returns>New rules assembly</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.CreatePluginRulesAssembly(Tools.DotNETCommon.FileReference,UnrealBuildTool.RulesAssembly,System.Boolean)">
            <summary>
            Creates a rules assembly with the given parameters.
            </summary>
            <param name="PluginFileName">The plugin file to create rules for</param>
            <param name="Parent">The parent rules assembly</param>
            <param name="bContainsEngineModules">Whether the plugin contains engine modules. Used to initialize the default value for ModuleRules.bTreatAsEngineModule.</param>
            <returns>The new rules assembly</returns>
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.FindModuleRulesForPlugins(System.Collections.Generic.IReadOnlyList{UnrealBuildTool.PluginInfo},System.Collections.Generic.List{Tools.DotNETCommon.FileReference},System.Collections.Generic.Dictionary{Tools.DotNETCommon.FileReference,UnrealBuildTool.PluginInfo})">
            <summary>
            Finds all the module rules for plugins under the given directory.
            </summary>
            <param name="Plugins">The directory to search</param>
            <param name="ModuleFiles">List of module files to be populated</param>
            <param name="ModuleFileToPluginInfo">Dictionary which is filled with mappings from the module file to its corresponding plugin file</param>
        </member>
        <member name="M:UnrealBuildTool.RulesCompiler.GetFileNameFromType(System.Type)">
            <summary>
            Gets the filename that declares the given type.
            </summary>
            <param name="ExistingType">The type to search for.</param>
            <returns>The filename that declared the given type, or null</returns>
        </member>
        <member name="M:UnrealBuildTool.SourceFileSearch.FindModuleSourceFiles(Tools.DotNETCommon.FileReference,System.Boolean)">
            Finds mouse source files
        </member>
        <member name="M:UnrealBuildTool.SourceFileSearch.FindFiles(Tools.DotNETCommon.DirectoryReference,System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
            Fills in a project file with source files discovered in the specified list of paths
            </summary>
            <param name="DirectoryToSearch">Directory to search</param>
            <param name="SubdirectoryNamesToExclude">Directory base names to ignore when searching subdirectories.  Can be null.</param>
            <param name="SearchSubdirectories">True to include subdirectories, otherwise we only search the list of base directories</param>
        </member>
        <member name="T:UnrealBuildTool.Telemetry">
            <summary>
            Telemetry service to collect data about execution.
            </summary>
            <remarks>
            You must provide an instance of a class that implements <see cref="T:UnrealBuildTool.Telemetry.IProvider"/> and has the <see cref="T:UnrealBuildTool.Telemetry.ProviderAttribute"/> attribute.
            Epic provides one internally, but external studios will need to provide one themselves.
            </remarks>
        </member>
        <member name="T:UnrealBuildTool.Telemetry.IProvider">
            <summary>
            Provides an interface for a telemetry provider.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Telemetry.IProvider.SendEvent(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            Sends an event to the telemetry provider
            </summary>
            <param name="EventName">Name of the event</param>
            <param name="Attributes">list of attributes in key,value format.</param>
        </member>
        <member name="T:UnrealBuildTool.Telemetry.ProviderAttribute">
            <summary>
            Attribute to designate a telemetry provider
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Telemetry.ProviderAttribute.bEpicInternalOnly">
            <summary>
            If true, this provider is only created for Epic internal builds.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Telemetry.GetReferencingAssemblies(System.AppDomain,System.Reflection.Assembly)">
            <summary>
            Get all assemblies in this domain which reference the passed-in assembly
            </summary>
            <param name="domain">The domain to search</param>
            <param name="target">The assembly to search for references to</param>
            <returns>All Assemblies that reference target.</returns>
        </member>
        <member name="M:UnrealBuildTool.Telemetry.Initialize">
            <summary>
            Called at app startup to initialize the telemetry provider.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Telemetry.IsAvailable">
            <summary>
            Checks if the Telemetry systeme is available. Use to skip work to prepare telemetry events.
            </summary>
            <remarks>If unavailable, SendEvent will not crash, but will ignore the event.</remarks>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.Telemetry.SendEvent(System.String,System.String[])">
            <summary>
            Helper to allow one to pass a series of key/value pairs as a single string list of the form: key1,value1,key2,value2,...
            Odd lengths are truncated. Pass an empty value using and empty string or null.
            </summary>
            <param name="EventName"></param>
            <param name="Attributes"></param>
        </member>
        <member name="M:UnrealBuildTool.Telemetry.SendEvent(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.String}})">
            <summary>
            
            </summary>
            <param name="EventName"></param>
            <param name="Attributes"></param>
        </member>
        <member name="M:UnrealBuildTool.Telemetry.Shutdown">
            <summary>
            Called at app shutdown to clean up the telemetry provider.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.UEPlatformProjectGenerator">
            <summary>
            Base class for platform-specific project generators
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.RegisterPlatformProjectGenerator(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UEPlatformProjectGenerator)">
            <summary>
            Register the given platforms UEPlatformProjectGenerator instance
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform to register with</param>
            <param name="InProjectGenerator">The UEPlatformProjectGenerator instance to use for the InPlatform</param>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetPlatformProjectGenerator(UnrealBuildTool.UnrealTargetPlatform,System.Boolean)">
            <summary>
            Retrieve the UEPlatformProjectGenerator instance for the given TargetPlatform
            </summary>
            <param name="InPlatform">    The UnrealTargetPlatform being built</param>
            <param name="bInAllowFailure">   If true, do not throw an exception and return null</param>
            <returns>UEPlatformProjectGenerator The instance of the project generator</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GenerateGameProjectStubs(UnrealBuildTool.ProjectFileGenerator,System.String,System.String,UnrealBuildTool.TargetRules,System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform},System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration})">
            <summary>
            Allow various platform project generators to generate stub projects if required
            </summary>
            <param name="InGenerator"></param>
            <param name="InTargetName"></param>
            <param name="InTargetFilepath"></param>
            <param name="InTargetRules"></param>
            <param name="InPlatforms"></param>
            <param name="InConfigurations"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GenerateGamePlatformSpecificProperties(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.TargetType,System.Text.StringBuilder,Tools.DotNETCommon.DirectoryReference,Tools.DotNETCommon.FileReference)">
            <summary>
            Allow various platform project generators to generate any special project properties if required
            </summary>
            <param name="InPlatform"></param>
            <param name="Configuration"></param>
            <param name="TargetType"></param>
            <param name="VCProjectFileContent"></param>
            <param name="RootDirectory"></param>
            <param name="TargetFilePath"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.RegisterPlatformProjectGenerator">
            <summary>
            Register the platform with the UEPlatformProjectGenerator class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.HasVisualStudioSupport(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            
            	VisualStudio project generation functions
            	
             <summary>
             Whether this build platform has native support for VisualStudio
             </summary>
             <param name="InPlatform">  The UnrealTargetPlatform being built</param>
             <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
             <param name="ProjectFileFormat">The visual studio project file format being generated</param>
             <returns>bool    true if native VisualStudio support (or custom VSI) is available</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioPlatformName(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Return the VisualStudio platform name for this build platform
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
            <returns>string    The name of the platform that VisualStudio recognizes</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioPreDefaultString(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Return project configuration settings that must be included before the default props file
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
            <returns>string    The custom configuration section for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioPlatformToolsetString(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return the platform toolset string to write into the project configuration
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
            <param name="InProjectFileFormat">The visual studio project file format being generated</param>
            <returns>string    The custom configuration section for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetAdditionalVisualStudioPropertyGroups(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom property group lines
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InProjectFileFormat">The visual studio project file format being generated</param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioPlatformConfigurationType(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom property group lines
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InProjectFileFormat">The visual studio project file format being generated</param>
            <returns>string    The platform configuration type.  Defaults to "Makefile" unless overridden</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioPathsEntries(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.TargetType,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom paths for VisualStudio this platform requires
            This include ReferencePath, LibraryPath, LibraryWPath, IncludePath and ExecutablePath.
            </summary>
            <param name="InPlatform">The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The configuration being built</param>
            <param name="TargetType">The type of target (game or program)</param>
            <param name="TargetRulesPath">Path to the .target.cs file</param>
            <param name="ProjectFilePath"></param>
            <param name="NMakeOutputPath"></param>
            <param name="InProjectFileFormat">The visual studio project file format being generated</param>
            <returns>The custom path lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioImportGroupProperties(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Return any custom property settings. These will be included in the ImportGroup section
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioGlobalProperties(UnrealBuildTool.UnrealTargetPlatform)">
            <summary>
            Return any custom property settings. These will be included right after Global properties to make values available to all other imports.
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioTargetOverrides(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom target overrides. These will be included last in the project file so they have the opportunity to override any existing settings.
            </summary>
            <param name="InPlatform">  The UnrealTargetPlatform being built</param>
            <param name="InProjectFileFormat">The visual studio project file format being generated</param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioLayoutDirSection(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,UnrealBuildTool.TargetType,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Return any custom layout directory sections
            </summary>
            <param name="InPlatform">The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The configuration being built</param>
            <param name="InConditionString"></param>
            <param name="TargetType">The type of target (game or program)</param>
            <param name="InProjectFileFormat">The visual studio project file format being generated</param>
            <param name="NMakeOutputPath"></param>
            <param name="ProjectFilePath"></param>
            <param name="TargetRulesPath"></param>
            <returns>string    The custom property import lines for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioOutputManifestSection(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.TargetType,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference,UnrealBuildTool.VCProjectFileFormat)">
            <summary>
            Get the output manifest section, if required
            </summary>
            <param name="InPlatform">The UnrealTargetPlatform being built</param>
            <param name="TargetType">The type of the target being built</param>
            <param name="TargetRulesPath">Path to the .target.cs file</param>
            <param name="ProjectFilePath">Path to the project file</param>
            <param name="InProjectFileFormat">The visual studio project file format being generated</param>
            <returns>The output manifest section for the project file; Empty string if it doesn't require one</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioDeploymentEnabled(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Get whether this platform deploys
            </summary>
            <returns>bool  true if the 'Deploy' option should be enabled</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.GetVisualStudioUserFileStrings(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,System.String,UnrealBuildTool.TargetRules,Tools.DotNETCommon.FileReference,Tools.DotNETCommon.FileReference)">
            <summary>
            Get the text to insert into the user file for the given platform/configuration/target
            </summary>
            <param name="InPlatform">The platform being added</param>
            <param name="InConfiguration">The configuration being added</param>
            <param name="InConditionString">The condition string </param>
            <param name="InTargetRules">The target rules </param>
            <param name="TargetRulesPath">The target rules path</param>
            <param name="ProjectFilePath">The project file path</param>
            <returns>The string to append to the user file</returns>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.WriteAdditionalPropFile">
            <summary>
            For Additional Project Property files that need to be written out.  This is currently used only on Android. 
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.WriteAdditionalProjUserFile(UnrealBuildTool.ProjectFile)">
            <summary>
            For additional Project files (ex. *PROJECTNAME*-AndroidRun.androidproj.user) that needs to be written out.  This is currently used only on Android. 
            </summary>
            <param name="ProjectFile">Project file this will be related to</param>
        </member>
        <member name="M:UnrealBuildTool.UEPlatformProjectGenerator.WriteAdditionalProjFile(UnrealBuildTool.ProjectFile)">
            <summary>
            For additional Project files (ex. *PROJECTNAME*-AndroidRun.androidproj) that needs to be written out.  This is currently used only on Android. 
            </summary>
            <param name="ProjectFile">Project file this will be related to</param>
            <returns>Project file written out, Solution folder it should be put in</returns>
        </member>
        <member name="F:UnrealBuildTool.Unity.SourceFileWorkingSet">
            <summary>
            The set of source files that UnrealBuildTool determined to be part of the programmer's "working set".
            This feature is only used when bUseAdaptiveUnityBuild is enabled
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Unity.CandidateSourceFilesForWorkingSet">
            <summary>
            Set of files which are candidates for being part of the working set.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Unity.PrintedSettingsForTargets">
            <summary>
            Set of target names we've printed out adaptive non-unity messages for.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Unity.ModulePrefix">
            <summary>
            Prefix used for all dynamically created Unity modules
            </summary>
        </member>
        <member name="T:UnrealBuildTool.Unity.FileCollection">
            <summary>
            A class which represents a list of files and the sum of their lengths.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.Unity.FileCollection.VirtualLength">
            The length of this file collection, plus any additional virtual space needed for bUseAdapativeUnityBuild.
            See the comment above AddVirtualFile() below for more information.
        </member>
        <member name="M:UnrealBuildTool.Unity.FileCollection.AddVirtualFile(System.Int64)">
            <summary>
            Doesn't actually add a file, but instead reserves space.  This is used with "bUseAdaptiveUnityBuild", to prevent
            other compiled unity blobs in the module's numbered set from having to be recompiled after we eject source files
            one of that module's unity blobs.  Basically, it can prevent dozens of files from being recompiled after the first
            time building after your working set of source files changes
            </summary>
            <param name="VirtualFileLength">Length of the virtual file to add to this file collection</param>
        </member>
        <member name="T:UnrealBuildTool.Unity.UnityFileBuilder">
            <summary>
            A class for building up a set of unity files.  You add files one-by-one using AddFile then call EndCurrentUnityFile to finish that one and
            (perhaps) begin a new one.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Unity.UnityFileBuilder.#ctor(System.Int32)">
            <summary>
            Constructs a new UnityFileBuilder.
            </summary>
            <param name="InSplitLength">The accumulated length at which to automatically split a unity file, or -1 to disable automatic splitting.</param>
        </member>
        <member name="M:UnrealBuildTool.Unity.UnityFileBuilder.AddFile(UnrealBuildTool.FileItem)">
            <summary>
            Adds a file to the current unity file.  If splitting is required and the total size of the
            unity file exceeds the split limit, then a new file is automatically started.
            </summary>
            <param name="File">The file to add.</param>
        </member>
        <member name="M:UnrealBuildTool.Unity.UnityFileBuilder.AddVirtualFile(UnrealBuildTool.FileItem)">
            <summary>
            Doesn't actually add a file, but instead reserves space, then splits the unity blob normally as if it
            was a real file that was added.  See the comment above FileCollection.AddVirtualFile() for more info.
            </summary>
            <param name="File">The file to add virtually.  Only the size of the file is tracked.</param>
        </member>
        <member name="M:UnrealBuildTool.Unity.UnityFileBuilder.EndCurrentUnityFile">
            <summary>
            Starts a new unity file.  If the current unity file contains no files, this function has no effect, i.e. you will not get an empty unity file.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Unity.UnityFileBuilder.GetUnityFiles">
            <summary>
            Returns the list of built unity files.  The UnityFileBuilder is unusable after this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.Unity.GenerateUnityCPPs(UnrealBuildTool.ReadOnlyTargetRules,System.Collections.Generic.List{UnrealBuildTool.FileItem},UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.ISourceFileWorkingSet,System.String,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Given a set of C++ files, generates another set of C++ files that #include all the original
            files, the goal being to compile the same code in fewer translation units.
            The "unity" files are written to the CompileEnvironment's OutputDirectory.
            </summary>
            <param name="Target">The target we're building</param>
            <param name="CPPFiles">The C++ files to #include.</param>
            <param name="CompileEnvironment">The environment that is used to compile the C++ files.</param>
            <param name="WorkingSet">Interface to query files which belong to the working set</param>
            <param name="BaseName">Base name to use for the Unity files</param>
            <param name="IntermediateDirectory">Intermediate directory for unity cpp files</param>
            <returns>The "unity" C++ files.</returns>
        </member>
        <member name="T:UnrealBuildTool.UProjectInfo">
            <summary>
            Stores information about a project
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UProjectInfo.LockObject">
            <summary>
            Lock object used to control access to static variables
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UProjectInfo.NonForeignProjectBaseDirs">
            <summary>
            List of non-foreign project directories (ie. all the directories listed in .uprojectdirs files). Call GetNonForeignProjectBaseDirs() to populate.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UProjectInfo.ProjectFiles">
            <summary>
            Map of relative or complete project file names to the project info
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UProjectInfo.TargetToProjectDictionary">
            <summary>
            Map of target names to the relative or complete project file name
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.FindTargetFilesInFolder(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Find all the target files under the given folder and add them to the TargetToProjectDictionary map
            </summary>
            <param name="InTargetFolder">Folder to search</param>
            <returns>True if any target files were found</returns>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.FindTargetFiles(Tools.DotNETCommon.DirectoryReference,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="CurrentTopDirectory"></param>
            <param name="bOutFoundTargetFiles"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.AddProject(Tools.DotNETCommon.FileReference)">
            <summary>
            Add a single project to the project info dictionary
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.GetNonForeignProjectBaseDirs">
            <summary>
            Get the list of directories that can contain non-foreign projects.
            </summary>
            <returns>List of directories that can contain non-foreign projects</returns>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.IsForeignProject(Tools.DotNETCommon.FileReference)">
            <summary>
            Determines if the given project file is a foreign project
            </summary>
            <param name="ProjectFileName">The project filename</param>
            <returns>True if it's a foreign project</returns>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.FillProjectInfo">
            <summary>
            Discover and fill in the project info
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.DumpProjectInfo">
            <summary>
            Print out all the info for known projects
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.IsPluginEnabledForProject(System.String,UnrealBuildTool.ProjectDescriptor,UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration,UnrealBuildTool.TargetType)">
            <summary>
            Determine if a plugin is enabled for a given project
            </summary>
            <param name="Project">The project to check</param>
            <param name="PluginName">Name of the plugin to check</param>
            <param name="Platform">The target platform</param>
            <param name="TargetConfiguration">The target configuration</param>
            <param name="Target"></param>
            <returns>True if the plugin should be enabled for this project</returns>
        </member>
        <member name="P:UnrealBuildTool.UProjectInfo.AllProjectFiles">
            <summary>
            Returns a list of all the projects
            </summary>
            <returns>List of projects</returns>
        </member>
        <member name="M:UnrealBuildTool.UProjectInfo.TryGetProjectForTarget(System.String,Tools.DotNETCommon.FileReference@)">
            <summary>
            Get the project folder for the given target name
            </summary>
            <param name="InTargetName">Name of the target of interest</param>
            <param name="OutProjectFileName">The project filename</param>
            <returns>True if the target was found</returns>
        </member>
        <member name="T:UnrealBuildTool.Utils">
            <summary>
            Utility functions
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Utils.IsRunningOnMono">
            <summary>
            Whether we are currently running on Mono platform.  We cache this statically because it is a bit slow to check.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Utils.ParseCommandLineFlag(System.String[],System.String,System.Int32@)">
            <summary>
            Searches for a flag in a set of command-line arguments.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.Utils.EnvironmentVariableRegex">
            <summary>
            Regular expression to match $(ENV) and/ or %ENV% environment variables.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Utils.ResolveEnvironmentVariable(System.String)">
            <summary>
            Resolves $(ENV) and/ or %ENV% to the value of the environment variable in the passed in string.
            </summary>
            <param name="InString">String to resolve environment variable in.</param>
            <returns>String with environment variable expanded/ resolved.</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.ExpandVariables(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Expands variables in $(VarName) format in the given string. Variables are retrieved from the given dictionary, or through the environment of the current process.
            Any unknown variables are ignored.
            </summary>
            <param name="InputString">String to search for variable names</param>
            <param name="AdditionalVariables">Lookup of variable names to values</param>
            <returns>String with all variables replaced</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.ReadAllText(System.String)">
            <summary>
            This is a faster replacement of File.ReadAllText. Code snippet based on code
            and analysis by Sam Allen
            http://dotnetperls.com/Content/File-Handling.aspx
            </summary>
            <param name="SourceFile"> Source file to fully read and convert to string</param>
            <returns>Textual representation of file.</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetEnvironmentVariable(System.String,System.Boolean)">
            <summary>
            Reads the specified environment variable
            </summary>
            <param name="VarName"> the environment variable to read</param>
            <param name="bDefault">the default value to use if missing</param>
            <returns>the value of the environment variable if found and the default value if missing</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetStringEnvironmentVariable(System.String,System.String)">
            <summary>
            Reads the specified environment variable
            </summary>
            <param name="VarName"> the environment variable to read</param>
            <param name="Default">the default value to use if missing</param>
            <returns>the value of the environment variable if found and the default value if missing</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetEnvironmentVariable(System.String,System.Double)">
            <summary>
            Reads the specified environment variable
            </summary>
            <param name="VarName"> the environment variable to read</param>
            <param name="Default">the default value to use if missing</param>
            <returns>the value of the environment variable if found and the default value if missing</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetEnvironmentVariable(System.String,System.String)">
            <summary>
            Reads the specified environment variable
            </summary>
            <param name="VarName"> the environment variable to read</param>
            <param name="Default">the default value to use if missing</param>
            <returns>the value of the environment variable if found and the default value if missing</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.RunLocalProcess(System.Diagnostics.Process)">
            <summary>
            Try to launch a local process, and produce a friendly error message if it fails.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Utils.RunLocalProcessAndLogOutput(System.Diagnostics.ProcessStartInfo)">
            <summary>
            Runs a local process and pipes the output to the log
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Utils.LocalProcessOutput(System.Diagnostics.DataReceivedEventArgs,System.Boolean)">
            <summary>
            Output a line of text from a local process. Implemented as a separate function to give a useful function name in the UAT log prefix.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Utils.RunLocalProcessAndLogOutput(System.String,System.String)">
            <summary>
            Runs a local process and pipes the output to the log
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Utils.RunLocalProcessAndReturnStdOut(System.String,System.String)">
            <summary>
            Runs a command line process, and returns simple StdOut output. This doesn't handle errors or return codes
            </summary>
            <returns>The entire StdOut generated from the process as a single trimmed string</returns>
            <param name="Command">Command to run</param>
            <param name="Args">Arguments to Command</param>
        </member>
        <member name="M:UnrealBuildTool.Utils.RunLocalProcessAndReturnStdOut(System.String,System.String,System.Int32@)">
            <summary>
            Runs a command line process, and returns simple StdOut output.
            </summary>
            <returns>The entire StdOut generated from the process as a single trimmed string</returns>
            <param name="Command">Command to run</param>
            <param name="Args">Arguments to Command</param>
            <param name="ExitCode">The return code from the process after it exits</param>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetPlatformsInClass(UnrealBuildTool.UnrealPlatformClass)">
            <summary>
            Find all the platforms in a given class
            </summary>
            <param name="Class">Class of platforms to return</param>
            <returns>Array of platforms in the given class</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.MakeListOfUnsupportedPlatforms(System.Collections.Generic.List{UnrealBuildTool.UnrealTargetPlatform})">
            <summary>
            Given a list of supported platforms, returns a list of names of platforms that should not be supported
            </summary>
            <param name="SupportedPlatforms">List of supported platforms</param>
            <returns>List of unsupported platforms in string format</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.CleanDirectorySeparators(System.String,System.Char)">
            <summary>
            Takes a path string and makes all of the path separator characters consistent. Also removes unnecessary multiple separators.
            </summary>
            <param name="FilePath">File path with potentially inconsistent slashes</param>
            <param name="UseDirectorySeparatorChar">The directory separator to use</param>
            <returns>File path with consistent separators</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.CollapseRelativeDirectories(System.String)">
            <summary>
            Correctly collapses any ../ or ./ entries in a path.
            </summary>
            <param name="InPath">The path to be collapsed</param>
            <returns>true if the path could be collapsed, false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.MakePathRelativeTo(System.String,System.String,System.Boolean)">
            <summary>
            Given a file path and a directory, returns a file path that is relative to the specified directory
            </summary>
            <param name="SourcePath">File path to convert</param>
            <param name="RelativeToDirectory">The directory that the source file path should be converted to be relative to.  If this path is not rooted, it will be assumed to be relative to the current working directory.</param>
            <param name="AlwaysTreatSourceAsDirectory">True if we should treat the source path like a directory even if it doesn't end with a path separator</param>
            <returns>Converted relative path</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.DisplayProgress(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Backspaces the specified number of characters, then displays a progress percentage value to the console
            </summary>
            <param name="Numerator">Progress numerator</param>
            <param name="Denominator">Progress denominator</param>
            <param name="NumCharsToBackspaceOver">Number of characters to backspace before writing the text.  This value will be updated with the length of the new progress string.  The first time progress is displayed, you should pass 0 for this value.</param>
        </member>
        <member name="M:UnrealBuildTool.Utils.ReadClass``1(System.String)">
            <summary>
            Reads a class using XML serialization
            </summary>
            <typeparam name="T">The type to read</typeparam>
            <param name="FileName">The XML file to read from</param>
            <returns>New deserialized instance of type T</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.WriteClass``1(``0,System.String,System.String)">
            <summary>
            Serialize an object to an XML file
            </summary>
            <typeparam name="T">Type of the object to serialize</typeparam>
            <param name="Data">Object to write</param>
            <param name="FileName">File to write to</param>
            <param name="DefaultNameSpace">Default namespace for the output elements</param>
            <returns>True if the file was written successfully</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.IsValidProcess(System.Diagnostics.Process)">
            <summary>
            Returns true if the specified Process has been created, started and remains valid (i.e. running).
            </summary>
            <param name="p">Process object to test</param>
            <returns>True if valid, false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetFilenameWithoutAnyExtensions(System.String)">
            <summary>
            Removes multi-dot extensions from a filename (i.e. *.automation.csproj)
            </summary>
            <param name="Filename">Filename to remove the extensions from</param>
            <returns>Clean filename.</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetPathWithoutExtension(System.String)">
            <summary>
            Returns Filename with path but without extension.
            </summary>
            <param name="Filename">Filename</param>
            <returns>Path to the file with its extension removed.</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.IsFileUnderDirectory(System.String,System.String)">
            <summary>
            Returns true if the specified file's path is located under the specified directory, or any of that directory's sub-folders.  Does not care whether the file or directory exist or not.  This is a simple string-based check.
            </summary>
            <param name="FilePath">The path to the file</param>
            <param name="Directory">The directory to check to see if the file is located under (or any of this directory's subfolders)</param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.ImplementsInterface``1(System.Type)">
            <summary>
            Checks if given type implements given interface.
            </summary>
            <typeparam name="InterfaceType">Interface to check.</typeparam>
            <param name="TestType">Type to check.</param>
            <returns>True if TestType implements InterfaceType. False otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetUserSettingDirectory">
            <summary>
            Returns the User Settings Directory path. This matches FPlatformProcess::UserSettingsDir().
            NOTE: This function may return null. Some accounts (eg. the SYSTEM account on Windows) do not have a personal folder, and Jenkins
            runs using this account by default.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetLogicalProcessorCount">
            <summary>
            Gets the number of logical cores. We use this rather than Environment.ProcessorCount when possible to handle machines with > 64 cores (the single group limit available to the .NET framework).
            </summary>
            <returns>The number of logical cores.</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.GetPhysicalProcessorCount">
            <summary>
            Gets the number of physical cores, excluding hyper threading.
            </summary>
            <returns>The number of physical cores, or -1 if it could not be obtained</returns>
        </member>
        <member name="M:UnrealBuildTool.Utils.ExecuteCustomBuildSteps(Tools.DotNETCommon.FileReference[])">
            <summary>
            Executes a list of custom build step scripts
            </summary>
            <param name="ScriptFiles">List of script files to execute</param>
            <returns>True if the steps succeeded, false otherwise</returns>
        </member>
        <member name="T:UnrealBuildTool.RemoteToolChain.RemoteToolChainErrorCode">
            <summary>
            Common error codes reported by Remote Tool Chain and its actions.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.RemoteServerName">
            <summary>
            These two variables will be loaded from XML config file in XmlConfigLoader.Init()
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.RemoteServerPort">
            <summary>
            Save the specified port so that RemoteServerName is the machine address only
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.CachedRemoteFileItems">
            <summary>
            Keep a list of remote files that are potentially copied from local to remote
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.UserDevRootMacBase">
            <summary>
            The base path (on the Mac) to the your particular development directory, where files will be copied to from the PC
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.UserDevRootMac">
            <summary>
            The final path (on the Mac) to your particular development directory, where files will be copied to from the PC
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.bUseRPCUtil">
            <summary>
            Whether or not to connect to UnrealRemoteTool using RPCUtility
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.OverrideDeltaCopyInstallPath">
            <summary>
            The user has specified a deltacopy install path
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.RSyncExe">
            <summary>
            Path to rsync executable and parameters for your rsync utility
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.SSHExe">
            <summary>
            Path to rsync executable and parameters for your rsync utility
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.SSHPrivateKeyOverridePath">
            <summary>
            Instead of looking for RemoteToolChainPrivate.key in the usual places (Documents/Unreal Engine/UnrealBuildTool/SSHKeys, Engine/Build/SSHKeys), this private key will be used if set
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.RsyncAuthentication">
            <summary>
            The authentication used for Rsync (for the -e rsync flag)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.SSHAuthentication">
            <summary>
            The authentication used for SSH (probably similar to RsyncAuthentication)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.RSyncUsername">
            <summary>
            Username on the remote machine to connect to with RSync
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.BranchDirectory">
            <summary>
            The directory that this local branch is in, without drive information (strip off X:\ from X:\UE4\iOS)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.ErrorMessageTokens">
            <summary>
            Substrings that indicate a line contains an error
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.RemoteToolChainPlatform">
            <summary>
            The platform this toolchain is compiling for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.MemoryPerCompileMB">
            <summary>
            The average amound of memory a compile takes, used so that we don't compile too many things at once
            </summary>
        </member>
        <member name="M:UnrealBuildTool.RemoteToolChain.ConvertPath(System.String)">
            <summary>
            Converts the passed in path from UBT host to compiler native format.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.OutputReceivedDataEventHandlerEncounteredError">
            <summary>
            Helper function to sync source files to and from the local system and a remote Mac
            </summary>
        </member>
        <member name="F:UnrealBuildTool.RemoteToolChain.QueryResult">
            <summary>
            Queries the remote compile server for CPU information
            and computes the proper ProcessorCountMultiplier.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.UEToolChain.CppPlatform">
            <summary>
            The C++ platform that this toolchain supports
            </summary>
        </member>
        <member name="M:UnrealBuildTool.UEToolChain.GetResponseFileName(UnrealBuildTool.LinkEnvironment,UnrealBuildTool.FileItem)">
            <summary>
            Get the name of the response file for the current linker environment and output file
            </summary>
            <param name="LinkEnvironment"></param>
            <param name="OutputFile"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.UEToolChain.ShouldAddDebugFileToReceipt(Tools.DotNETCommon.FileReference,UnrealBuildTool.BuildProductType)">
            <summary>
            Adds a build product and its associated debug file to a receipt.
            </summary>
            <param name="OutputFile">Build product to add</param>
            <param name="OutputType">The type of build product</param>
        </member>
        <member name="F:UnrealBuildTool.XGE.bXGENoWatchdogThread">
            <summary>
            Whether to use the no_watchdog_thread option to prevent VS2015 toolchain stalls.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XGE.bShowXGEMonitor">
            <summary>
            Whether to display the XGE build monitor.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.XGE.bStopXGECompilationAfterErrors">
            <summary>
            When enabled, XGE will stop compiling targets after a compile error occurs.  Recommended, as it saves computing resources for others.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XGE.WriteTaskFile(System.Collections.Generic.List{UnrealBuildTool.Action},System.String,System.Boolean,System.Boolean)">
            <summary>
            Writes a XGE task file containing the specified actions to the specified file path.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.XGE.ExecutionResult">
            <summary>
            The possible result of executing tasks with XGE.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.XGE.ExecuteTaskFile(System.String,System.Diagnostics.DataReceivedEventHandler,System.Int32)">
            <summary>
            Executes the tasks in the specified file.
            </summary>
            <param name="TaskFilePath">- The path to the file containing the tasks to execute in XGE XML format.</param>
            <param name="OutputEventHandler"></param>
            <param name="ActionCount"></param>
            <returns>Indicates whether the tasks were successfully executed.</returns>
        </member>
        <member name="M:UnrealBuildTool.XGE.ExecuteTaskFileWithProgressMarkup(System.String,System.Int32,System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Executes the tasks in the specified file, parsing progress markup as part of the output.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.GraphColor">
            <summary>
            Represents a color in the displayed graph.  Values are between 0.0 and 1.0 inclusive.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.GraphNode">
            <summary>
            A single "node" in a directed graph
            </summary>
        </member>
        <member name="F:UnrealBuildTool.GraphNode.Id">
            ID number, unique for all nodes.  This must also be the array index into the main nodes array
        </member>
        <member name="F:UnrealBuildTool.GraphNode.Label">
            Optional text label for this node
        </member>
        <member name="T:UnrealBuildTool.GraphEdge">
            <summary>
            Describes a graph "edge" in a directed graph
            </summary>
        </member>
        <member name="F:UnrealBuildTool.GraphEdge.Id">
            ID number, unique for all edges.  This must also be the array index into the main edges array.
        </member>
        <member name="F:UnrealBuildTool.GraphEdge.Source">
            Source node	(directed graph)
        </member>
        <member name="F:UnrealBuildTool.GraphEdge.Target">
            Target node (directed graph)
        </member>
        <member name="F:UnrealBuildTool.GraphEdge.Weight">
            Optional edge weight
        </member>
        <member name="T:UnrealBuildTool.GraphAttribute">
            <summary>
            Describes a type of attribute.  This is derived internally from the attribute data on nodes.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.GraphAttribute.ID">
            Gexf ID for this attribute
        </member>
        <member name="F:UnrealBuildTool.GraphAttribute.Name">
            Name of the attribute
        </member>
        <member name="F:UnrealBuildTool.GraphAttribute.TypeName">
            Gexf type name
        </member>
        <member name="M:UnrealBuildTool.GraphVisualization.WriteGraphFile(System.String,System.String,System.Collections.Generic.List{UnrealBuildTool.GraphNode},System.Collections.Generic.List{UnrealBuildTool.GraphEdge})">
            <summary>
            Writes a GEXF graph file for the specified graph nodes and edges
            </summary>
            <param name="Filename">The file name to write</param>
            <param name="Description">The description to include in the graph file's metadata</param>
            <param name="GraphNodes">List of all graph nodes.  Index order is important and must match with the individual node Id members!</param>
            <param name="GraphEdges">List of all graph edges.  Index order is important and must match with the individual edge Id members!</param>
        </member>
        <member name="T:UnrealBuildTool.WindowsCompiler">
            <summary>
            Available compiler toolchains on Windows platform
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsCompiler.Default">
            <summary>
            Use the default compiler. A specific value will always be used outside of configuration classes.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsCompiler.VisualStudio2013">
            <summary>
            Visual Studio 2013 (Visual C++ 12.0)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsCompiler.VisualStudio2015">
            <summary>
            Visual Studio 2015 (Visual C++ 14.0)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsCompiler.VisualStudio2017">
            <summary>
            Visual Studio 2017 (Visual C++ 15.0)
            </summary>
        </member>
        <member name="T:UnrealBuildTool.WindowsStaticAnalyzer">
            <summary>
            Which static analyzer to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsStaticAnalyzer.None">
            <summary>
            Do not perform static analysis
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsStaticAnalyzer.VisualCpp">
            <summary>
            Use the built-in Visual C++ static analyzer
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsStaticAnalyzer.PVSStudio">
            <summary>
            Use PVS-Studio for static analysis
            </summary>
        </member>
        <member name="T:UnrealBuildTool.WindowsTargetRules">
            <summary>
            Windows-specific target settings
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsTargetRules.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.Compiler">
            <summary>
            Version of the compiler toolchain to use on Windows platform. A value of "default" will be changed to a specific version at UBT startup.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.CompilerVersion">
            <summary>
            The specific toolchain version to use. This may be a specific version number (eg. "14.13.26128") or the string "Latest" to select the newest available version. By default, we use the
            toolchain version indicated by WindowsPlatform.DefaultToolChainVersion if it is available, or the latest version otherwise.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.WindowsSdkVersion">
            <summary>
            The specific Windows SDK version to use. This may be a specific version number (eg. "8.1", "10.0", or "10.0.10150.0") or the string "Latest" to select the newest available version.
            By default, we use the Windows SDK version indicated by WindowsPlatform.DefaultWindowsSdkVersion if it is available, or the latest version otherwise.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.TargetWindowsVersion">
            <summary>
            Value for the WINVER macro, defining the minimum supported Windows version.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.bPixProfilingEnabled">
            <summary>
            Enable PIX debugging (automatically disabled in Shipping and Test configs)
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.CompanyName">
            <summary>
            The name of the company (author, provider) that created the project.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.CopyrightNotice">
            <summary>
            The project's copyright and/or trademark notices.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.ProductName">
            <summary>
            The project's name.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.StaticAnalyzer">
            <summary>
            The static analyzer to use
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.ObjSrcMapFile">
            <summary>
            Whether we should export a file containing .obj->source file mappings.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.ModuleDefinitionFile">
            <summary>
            Provides a Module Definition File (.def) to the linker to describe various attributes of a DLL.
            Necessary when exporting functions by ordinal values instead of by name.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.bStrictConformanceMode">
            <summary>
            Enables strict standard conformance mode (/permissive-) in VS2017+.
            </summary>
        </member>
        <member name="P:UnrealBuildTool.WindowsTargetRules.bNeedsLegacyStdioDefinitionsLib">
            VS2015 updated some of the CRT definitions but not all of the Windows SDK has been updated to match.
            Microsoft provides legacy_stdio_definitions library to enable building with VS2015 until they fix everything up.
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.DefaultStackSize">
            <summary>
            The stack size when linking a non-editor target
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsTargetRules.DefaultStackSizeCommit">
            <summary>
            The stack size to commit when linking a non-editor target
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsTargetRules.GetVisualStudioCompilerVersionName">
            <summary>
            When using a Visual Studio compiler, returns the version name as a string
            </summary>
            <returns>The Visual Studio compiler version name (e.g. "2015")</returns>
        </member>
        <member name="T:UnrealBuildTool.ReadOnlyWindowsTargetRules">
            <summary>
            Read-only wrapper for Windows-specific target settings
            </summary>
        </member>
        <member name="F:UnrealBuildTool.ReadOnlyWindowsTargetRules.Inner">
            <summary>
            The private mutable settings object
            </summary>
        </member>
        <member name="M:UnrealBuildTool.ReadOnlyWindowsTargetRules.#ctor(UnrealBuildTool.WindowsTargetRules)">
            <summary>
            Constructor
            </summary>
            <param name="Inner">The settings object to wrap</param>
        </member>
        <member name="P:UnrealBuildTool.ReadOnlyWindowsTargetRules.Compiler">
            <summary>
            Accessors for fields on the inner TargetRules instance
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.DefaultToolChainVersion">
            <summary>
            The default compiler version to be used, if installed. 
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.DefaultVersion">
            <summary>
            The default Windows SDK version to be used, if installed.
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.CachedVSInstallDirs">
            <summary>
            Cache of Visual Studio installation directories
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.CachedVCToolChainDirs">
            <summary>
            Cache of Visual C++ installation directories
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.CachedWindowsSdkDirs">
            <summary>
            Cache of Windows SDK installation directories
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.CachedUniversalCrtDirs">
            <summary>
            Cache of Universal CRT installation directories
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.bCompileWithClang">
            <summary>
            True if we should use Clang/LLVM instead of MSVC to compile code on Windows platform
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.bUseVCCompilerArgs">
            <summary>
            When using Clang, enabling enables the MSVC-like "clang-cl" wrapper, otherwise we pass arguments to Clang directly
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.bAllowClangLinker">
            <summary>
            True if we should use the Clang linker (LLD) when bCompileWithClang is enabled, otherwise we use the MSVC linker
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.bCompileWithICL">
            <summary>
            True if we should use the Intel Compiler instead of MSVC to compile code on Windows platform
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.bAllowICLLinker">
            <summary>
            True if we should use the Intel linker (xilink) when bCompileWithICL is enabled, otherwise we use the MSVC linker
            </summary>
        </member>
        <member name="F:UnrealBuildTool.WindowsPlatform.bBuildLargeAddressAwareBinary">
            <summary>
            True if we allow using addresses larger than 2GB on 32 bit builds
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.#ctor(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.CppPlatform,UnrealBuildTool.WindowsPlatformSDK)">
            <summary>
            Constructor
            </summary>
            <param name="InPlatform">Creates a windows platform with the given enum value</param>
            <param name="InDefaultCppPlatform">The default C++ platform to compile for</param>
            <param name="InSDK">The installed Windows SDK</param>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.HasRequiredSDKsInstalled">
            <summary>
            Whether the required external SDKs are installed for this platform. Could be either a manual install or an AutoSDK.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.ValidateTarget(UnrealBuildTool.TargetRules)">
            <summary>
            Validate a target's settings
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.GetDefaultCompiler(Tools.DotNETCommon.FileReference)">
            <summary>
            Gets the default compiler which should be used, if it's not set explicitly by the target, command line, or config file.
            </summary>
            <returns>The default compiler version</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.GetCompilerName(UnrealBuildTool.WindowsCompiler)">
            <summary>
            Returns the human-readable name of the given compiler
            </summary>
            <param name="Compiler">The compiler value</param>
            <returns>Name of the compiler</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.TryGetVSInstallDir(UnrealBuildTool.WindowsCompiler,Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Get the first Visual Studio install directory for the given compiler version. Note that it is possible for the compiler toolchain to be installed without
            Visual Studio.
            </summary>
            <param name="Compiler">Version of the toolchain to look for.</param>
            <param name="InstallDir">On success, the directory that Visual Studio is installed to.</param>
            <returns>True if the directory was found, false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.FindVSInstallDirs(UnrealBuildTool.WindowsCompiler)">
            <summary>
            Read the Visual Studio install directory for the given compiler version. Note that it is possible for the compiler toolchain to be installed without
            Visual Studio.
            </summary>
            <param name="Compiler">Version of the toolchain to look for.</param>
            <returns>List of directories containing Visual Studio installations</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.FindVCToolChainDirs(UnrealBuildTool.WindowsCompiler)">
            <summary>
            Determines the directory containing the MSVC toolchain
            </summary>
            <param name="Compiler">Major version of the compiler to use</param>
            <returns>Map of version number to directories</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.IsValidToolChainDir2015(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Checks if the given directory contains a valid Visual Studio 2015 toolchain
            </summary>
            <param name="ToolChainDir">Directory to check</param>
            <returns>True if the given directory is valid</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.IsValidToolChainDir2017(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Checks if the given directory contains a valid Visual Studio 2017 toolchain
            </summary>
            <param name="ToolChainDir">Directory to check</param>
            <returns>True if the given directory is valid</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.HasCompiler(UnrealBuildTool.WindowsCompiler)">
            <summary>
            Determines if a given compiler is installed
            </summary>
            <param name="Compiler">Compiler to check for</param>
            <returns>True if the given compiler is installed</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.TryGetVCToolChainDir(UnrealBuildTool.WindowsCompiler,System.String,UnrealBuildTool.VersionNumber@,Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Determines the directory containing the MSVC toolchain
            </summary>
            <param name="Compiler">Major version of the compiler to use</param>
            <param name="CompilerVersion">The minimum compiler version to use</param>
            <param name="OutToolChainVersion">Receives the chosen toolchain version</param>
            <param name="OutToolChainDir">Receives the directory containing the toolchain</param>
            <returns>True if the toolchain directory was found correctly</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.TryReadInstallDirRegistryKey32(System.String,System.String,Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Reads an install directory for a 32-bit program from a registry key. This checks for per-user and machine wide settings, and under the Wow64 virtual keys (HKCU\SOFTWARE, HKLM\SOFTWARE, HKCU\SOFTWARE\Wow6432Node, HKLM\SOFTWARE\Wow6432Node).
            </summary>
            <param name="KeySuffix">Path to the key to read, under one of the roots listed above.</param>
            <param name="ValueName">Value to be read.</param>
            <param name="InstallDir">On success, the directory corresponding to the value read.</param>
            <returns>True if the key was read, false otherwise.</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.TryReadDirRegistryKey(System.String,System.String,Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Attempts to reads a directory name stored in a registry key
            </summary>
            <param name="KeyName">Key to read from</param>
            <param name="ValueName">Value within the key to read</param>
            <param name="Value">The directory read from the registry key</param>
            <returns>True if the key was read, false if it was missing or empty</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.TryGetMsBuildPath(Tools.DotNETCommon.FileReference@)">
            <summary>
            Gets the path to MSBuild. This mirrors the logic in GetMSBuildPath.bat.
            </summary>
            <param name="OutLocation">On success, receives the path to the MSBuild executable.</param>
            <returns>True on success.</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.GetMsBuildToolPath">
            <summary>
            Gets the MSBuild path, and throws an exception on failure.
            </summary>
            <returns>Path to MSBuild</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.TryReadMsBuildInstallPath(System.String,System.String,System.String,Tools.DotNETCommon.FileReference@)">
            <summary>
            Function to query the registry under HKCU/HKLM Win32/Wow64 software registry keys for a certain install directory.
            This mirrors the logic in GetMSBuildPath.bat.
            </summary>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.UpdateCachedWindowsSdks">
            <summary>
            Updates the CachedWindowsSdkDirs and CachedUniversalCrtDirs variables
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.FindWindowsSdkDirs">
            <summary>
            Finds all the installed Windows SDK versions
            </summary>
            <returns>Map of version number to Windows SDK directories</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.FindUniversalCrtDirs">
            <summary>
            Finds all the installed Universal CRT versions
            </summary>
            <returns>Map of version number to universal CRT directories</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.EnumerateSdkRootDirs(System.Collections.Generic.List{Tools.DotNETCommon.DirectoryReference})">
            <summary>
            Enumerates all the Windows 10 SDK root directories
            </summary>
            <param name="RootDirs">Receives all the Windows 10 sdk root directories</param>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.TryGetWindowsSdkDir(System.String,UnrealBuildTool.VersionNumber@,Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Determines the directory containing the Windows SDK toolchain
            </summary>
            <param name="DesiredVersion">The desired Windows SDK version. This may be "Latest", a specific version number, or null. If null, the function will look for DefaultWindowsSdkVersion. Failing that, it will return the latest version.</param>
            <param name="OutSdkVersion">Receives the version number of the selected Windows SDK</param>
            <param name="OutSdkDir">Receives the root directory for the selected SDK</param>
            <returns>True if the toolchain directory was found correctly</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.TryGetNetFxSdkInstallDir(Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Gets the installation directory for the NETFXSDK
            </summary>
            <param name="OutInstallDir">Receives the installation directory on success</param>
            <returns>True if the directory was found, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.CanUseSNDBS">
            <summary>
            If this platform can be compiled with SN-DBS
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.IsBuildProduct(System.String,System.String[],System.String[])">
            <summary>
            Determines if the given name is a build product for a target.
            </summary>
            <param name="FileName">The name to check</param>
            <param name="NamePrefixes">Target or application names that may appear at the start of the build product name (eg. "UE4Editor", "ShooterGameEditor")</param>
            <param name="NameSuffixes">Suffixes which may appear at the end of the build product name</param>
            <returns>True if the string matches the name of a build product, false otherwise</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.GetBinaryExtension(UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extension to use for the given binary type
            </summary>
            <param name="InBinaryType"> The binrary type being built</param>
            <returns>string    The binary extenstion (ie 'exe' or 'dll')</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.GetDebugInfoExtensions(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.UEBuildBinaryType)">
            <summary>
            Get the extensions to use for debug info for the given binary type
            </summary>
            <param name="Target">The target being built</param>
            <param name="InBinaryType"> The binary type being built</param>
            <returns>string[]    The debug info extensions (i.e. 'pdb')</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.ShouldNotBuildEditor(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            <summary>
            Whether the editor should be built for this platform or not
            </summary>
            <param name="InPlatform"> The UnrealTargetPlatform being built</param>
            <param name="InConfiguration">The UnrealTargetConfiguration being built</param>
            <returns>bool   true if the editor should be built, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.ModifyModuleRulesForOtherPlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, where the target is a different host platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.HasUniqueBinaries">
            <summary>
            Return whether this platform has uniquely named binaries across multiple games
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.ModifyModuleRulesForActivePlatform(System.String,UnrealBuildTool.ModuleRules,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Modify the rules for a newly created module, in a target that's being built for this platform.
            This is not required - but allows for hiding details of a particular platform.
            </summary>
            <param name="ModuleName">The name of the module</param>
            <param name="Rules">The module rules</param>
            <param name="Target">The target being build</param>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.SetUpEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the target environment for building
            </summary>
            <param name="Target">Settings for the target being compiled</param>
            <param name="CompileEnvironment">The compile environment for this target</param>
            <param name="LinkEnvironment">The link environment for this target</param>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.SanitizeMacroValue(System.String)">
            <summary>
            Macros passed via the command line have their quotes stripped, and are tokenized before being re-stringized by the compiler. This conversion
            back and forth is normally ok, but certain characters such as single quotes must always be paired. Remove any such characters here.
            </summary>
            <param name="Value">The macro value</param>
            <returns>The sanitized value</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.SetUpConfigurationEnvironment(UnrealBuildTool.ReadOnlyTargetRules,UnrealBuildTool.CppCompileEnvironment,UnrealBuildTool.LinkEnvironment)">
            <summary>
            Setup the configuration environment for building
            </summary>
            <param name="Target"> The target being built</param>
            <param name="GlobalCompileEnvironment">The global compile environment</param>
            <param name="GlobalLinkEnvironment">The global link environment</param>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.ShouldCreateDebugInfo(UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Whether this platform should create debug information or not
            </summary>
            <param name="Target">The target being built</param>
            <returns>bool    true if debug info should be generated, false if not</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.CreateToolChain(UnrealBuildTool.CppPlatform,UnrealBuildTool.ReadOnlyTargetRules)">
            <summary>
            Creates a toolchain instance for the given platform.
            </summary>
            <param name="CppPlatform">The platform to create a toolchain for</param>
            <param name="Target">The target being built</param>
            <returns>New toolchain instance.</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatform.Deploy(UnrealBuildTool.UEBuildDeployTarget)">
            <summary>
            Deploys the given target
            </summary>
            <param name="Target">Information about the target being deployed</param>
        </member>
        <member name="M:UnrealBuildTool.WindowsPlatformFactory.RegisterBuildPlatforms(UnrealBuildTool.SDKOutputLevel)">
            <summary>
            Register the platform with the UEBuildPlatform class
            </summary>
        </member>
        <member name="T:UnrealBuildTool.VCEnvironment">
            <summary>
            Stores information about a Visual C++ installation and compile environment
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.Platform">
            <summary>
            The platform the envvars have been initialized for
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.Compiler">
            <summary>
            The compiler version
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.ToolChainDir">
            <summary>
            Root directory containing the toolchain
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.ToolChainVersion">
            <summary>
            The toolchain version number
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.WindowsSdkDir">
            <summary>
            Root directory containing the Windows Sdk
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.WindowsSdkVersion">
            <summary>
            Version number of the Windows Sdk
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.CompilerPath">
            <summary>
            The path to the linker for linking executables
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.LinkerPath">
            <summary>
            The path to the linker for linking executables
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.LibraryManagerPath">
            <summary>
            The path to the linker for linking libraries
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.ResourceCompilerPath">
            <summary>
            Path to the resource compiler from the Windows SDK
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.IncludePaths">
            <summary>
            The default system include paths
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCEnvironment.LibraryPaths">
            <summary>
            The default system library paths
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.#ctor(UnrealBuildTool.WindowsCompiler,UnrealBuildTool.CppPlatform,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.VersionNumber,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.VersionNumber)">
            <summary>
            Constructor
            </summary>
            <param name="Compiler">The compiler version</param>
            <param name="Platform">The platform to find the compiler for</param>
            <param name="ToolChainDir">Directory containing the toolchain</param>
            <param name="ToolChainVersion">Version of the toolchain</param>
            <param name="WindowsSdkDir">Root directory containing the Windows Sdk</param>
            <param name="WindowsSdkVersion">Version of the Windows Sdk</param>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.AddDirectoryToPath(Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Add a directory to the PATH environment variable
            </summary>
            <param name="ToolPath">The path to add</param>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.GetVCToolPath32(UnrealBuildTool.WindowsCompiler,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Gets the path to the 32bit tool binaries.
            </summary>
            <param name="Compiler">The compiler version</param>
            <param name="VCToolChainDir">Base directory for the VC toolchain</param>
            <returns>Directory containing the 32-bit toolchain binaries</returns>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.GetVCToolPath64(UnrealBuildTool.WindowsCompiler,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Gets the path to the 64bit tool binaries.
            </summary>
            <param name="Compiler">The version of the compiler being used</param>
            <param name="VCToolChainDir">Base directory for the VC toolchain</param>
            <returns>Directory containing the 64-bit toolchain binaries</returns>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.GetCompilerToolPath(UnrealBuildTool.CppPlatform,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Gets the path to the compiler.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.GetLinkerToolPath(UnrealBuildTool.CppPlatform,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Gets the path to the linker.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.GetLibraryLinkerToolPath(UnrealBuildTool.CppPlatform,Tools.DotNETCommon.DirectoryReference)">
            <summary>
            Gets the path to the library linker.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.GetResourceCompilerToolPath(UnrealBuildTool.CppPlatform,Tools.DotNETCommon.DirectoryReference,UnrealBuildTool.VersionNumber)">
            <summary>
            Gets the path to the resource compiler's rc.exe for the specified platform.
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.SetupEnvironment">
            <summary>
            Sets up the standard compile environment for the toolchain
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCEnvironment.Create(UnrealBuildTool.WindowsCompiler,UnrealBuildTool.CppPlatform,System.String,System.String)">
            <summary>
            Creates an environment with the given settings
            </summary>
            <param name="Compiler">The compiler version to use</param>
            <param name="Platform">The platform to target</param>
            <param name="CompilerVersion">The specific toolchain version to use</param>
            <param name="WindowsSdkVersion">Version of the Windows SDK to use</param>
            <returns>New environment object with paths for the given settings</returns>
        </member>
        <member name="F:UnrealBuildTool.VCToolChain.Target">
            <summary>
            The target being built
            </summary>
        </member>
        <member name="F:UnrealBuildTool.VCToolChain.EnvVars">
            <summary>
            The Visual C++ environment
            </summary>
        </member>
        <member name="M:UnrealBuildTool.VCToolChain.GetVCIncludePaths(UnrealBuildTool.CppPlatform,UnrealBuildTool.WindowsCompiler,System.String)">
            <summary>
            Gets the default include paths for the given platform.
            </summary>
        </member>
        <member name="T:UnrealBuildTool.WindowsExports">
            <summary>
            Public Linux functions exposed to UAT
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsExports.SetApplicationIcon(Tools.DotNETCommon.FileReference,System.String,Tools.DotNETCommon.DirectoryReference,System.Collections.Generic.List{UnrealBuildTool.UnrealTargetConfiguration},System.Collections.Generic.List{Tools.DotNETCommon.FileReference},Tools.DotNETCommon.DirectoryReference)">
            <summary>
            
            </summary>
            <param name="ProjectFile"></param>
            <param name="ProjectName"></param>
            <param name="ProjectDirectory"></param>
            <param name="InTargetConfigurations"></param>
            <param name="InExecutablePaths"></param>
            <param name="EngineDirectory"></param>
            <returns></returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsExports.TryGetVSInstallDir(UnrealBuildTool.WindowsCompiler,Tools.DotNETCommon.DirectoryReference@)">
            <summary>
            Tries to get the directory for an installed Visual Studio version
            </summary>
            <param name="Compiler">The compiler version</param>
            <param name="InstallDir">Receives the install directory on success</param>
            <returns>True if successful</returns>
        </member>
        <member name="M:UnrealBuildTool.WindowsExports.GetMSBuildToolPath">
            <summary>
            Gets the path to MSBuild.exe
            </summary>
            <returns>Path to MSBuild.exe</returns>
        </member>
        <member name="T:UnrealBuildTool.WindowsProjectGenerator">
            <summary>
            Base class for platform-specific project generators
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsProjectGenerator.RegisterPlatformProjectGenerator">
            <summary>
            Register the platform with the UEPlatformProjectGenerator class
            </summary>
        </member>
        <member name="M:UnrealBuildTool.WindowsProjectGenerator.GetVisualStudioPlatformName(UnrealBuildTool.UnrealTargetPlatform,UnrealBuildTool.UnrealTargetConfiguration)">
            
            	VisualStudio project generation functions
            	
             <summary>
             Return the VisualStudio platform name for this build platform
             </summary>
             <param name="InPlatform">  The UnrealTargetPlatform being built</param>
             <param name="InConfiguration"> The UnrealTargetConfiguration being built</param>
             <returns>string    The name of the platform that VisualStudio recognizes</returns>
        </member>
    </members>
</doc>
